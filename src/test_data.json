[["Web Development",[{"items":[{"creator":"Ruth John","title":"Time for a review of Firefox 92","link":"https://hacks.mozilla.org/2021/09/time-for-a-review-of-firefox-92/","pubDate":"Wed, 08 Sep 2021 15:17:15 +0000","content:encoded":"<p>Release time comes around so quickly! This month we have quite a few CSS updates, along with the new <code>Object.hasOwn()</code> static method for JavaScript.</p>\n<p>This blog post provides merely a set of highlights; for all the details, check out the following:</p>\n<ul>\n<li aria-level=\"1\"><a href=\"https://developer.mozilla.org/docs/Mozilla/Firefox/Releases/92\">Firefox 92 for developers on MDN</a></li>\n<li aria-level=\"1\"><a href=\"https://www.mozilla.org/en-US/firefox/92.0/releasenotes/\">Firefox 92 end-user release notes</a></li>\n</ul>\n<h2><b>CSS Updates</b></h2>\n<p>A couple of CSS features have moved from behind a preference and are now available by default: <code>accent-color</code> and <code>size-adjust.</code></p>\n<h3><b>accent-color</b></h3>\n<p>The <code>accent-color</code> CSS property sets the color of an element&#8217;s accent. Accents appear in elements such as a checkbox or radio input. It&#8217;s default value is <code>auto</code> which represents a UA-chosen color, which should match the accent color of the platform. You can also specify a color value. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/accent-color\">Read more about the accent-color property here</a>.</p>\n<h3><b>size-adjust</b></h3>\n<p>The <code>size-adjust</code> descriptor for <code>@font-face</code> takes a percentage value which acts as a multiplier for glyph outlines and metrics. Another tool in the CSS box for controlling fonts, it can help to harmonize the designs of various fonts when rendered at the same font size. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/size-adjust\">Check out some examples on the size-adjust descriptor page on MDN</a>.</p>\n<h3><b>And more&#8230;</b></h3>\n<p>Along with both of those, the <code>break-inside</code> property now has support for values <code>avoid-page</code> and <code>avoid-column</code>, the <code>font-size-adjust</code> property accepts two values <i>and</i> if that wasn&#8217;t enough <code>system-ui</code> as a generic font family name for the <code>font-family</code> property is now supported.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/break-inside\">break-inside property on MDN</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-size-adjust\">font-size-adjust property on MDN</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\">font-family property on MDN</a></p>\n<h2><b>Object.hasOwn arrives</b></h2>\n<p>A nice addition to JavaScript is the <code>Object.hasOwn()</code> static method. This returns <code>true</code> if the specified property is a direct property of the object (even if that property&#8217;s value is <code>null</code> or <code>undefined</code>). <code>false</code> is returned if the specified property is inherited or not declared. Unlike the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\"><code>in</code></a> operator, this method does not check for the specified property in the object&#8217;s prototype chain.</p>\n<p><code>Object.hasOwn()</code> is recommended over <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.hasOwnProperty()</code></a> as it works for objects created using <code>Object.create(null)</code> and with objects that have overridden the inherited <code>hasOwnProperty()</code> method.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\">Read more about Object.hasOwn() on MDN</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/09/time-for-a-review-of-firefox-92/\">Time for a review of Firefox 92</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"Release time comes around so quickly! This month we have quite a few CSS updates, along with the new Object.hasOwn() static method for JavaScript.\nThis blog post provides merely a set of highlights; for all the details, check out the following:\nFirefox 92 for developers on MDN\nFirefox 92 end-user release notes\nCSS Updates\nA couple of CSS features have moved from behind a preference and are now available by default: accent-color and size-adjust.\naccent-color\nThe accent-color CSS property sets the color of an element’s accent. Accents appear in elements such as a checkbox or radio input. It’s default value is auto which represents a UA-chosen color, which should match the accent color of the platform. You can also specify a color value. Read more about the accent-color property here.\nsize-adjust\nThe size-adjust descriptor for @font-face takes a percentage value which acts as a multiplier for glyph outlines and metrics. Another tool in the CSS box for controlling fonts, it can help to harmonize the designs of various fonts when rendered at the same font size. Check out some examples on the size-adjust descriptor page on MDN.\nAnd more…\nAlong with both of those, the break-inside property now has support for values avoid-page and avoid-column, the font-size-adjust property accepts two values and if that wasn’t enough system-ui as a generic font family name for the font-family property is now supported.\nbreak-inside property on MDN\nfont-size-adjust property on MDN\nfont-family property on MDN\nObject.hasOwn arrives\nA nice addition to JavaScript is the Object.hasOwn() static method. This returns true if the specified property is a direct property of the object (even if that property’s value is null or undefined). false is returned if the specified property is inherited or not declared. Unlike the in operator, this method does not check for the specified property in the object’s prototype chain.\nObject.hasOwn() is recommended over Object.hasOwnProperty() as it works for objects created using Object.create(null) and with objects that have overridden the inherited hasOwnProperty() method.\nRead more about Object.hasOwn() on MDN\nThe post Time for a review of Firefox 92 appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Ruth John","comments":"https://hacks.mozilla.org/2021/09/time-for-a-review-of-firefox-92/#respond","content":"<p>Release time comes around so quickly! This month we have quite a few CSS updates, along with the new Object.hasOwn() static method for JavaScript.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/09/time-for-a-review-of-firefox-92/\">Time for a review of Firefox 92</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"Release time comes around so quickly! This month we have quite a few CSS updates, along with the new Object.hasOwn() static method for JavaScript.\nThe post Time for a review of Firefox 92 appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47367","categories":["CSS","Featured Article","Firefox","Firefox Releases","JavaScript","MDN","Release","css","firefox","mdn"],"isoDate":"2021-09-08T15:17:15.000Z","timestamp":"9/8/2021"},{"creator":"Ruth John","title":"Spring cleaning MDN: Part 2","link":"https://hacks.mozilla.org/2021/08/spring-cleaning-mdn-part-2/","pubDate":"Wed, 18 Aug 2021 15:05:06 +0000","content:encoded":"<div id=\"attachment_47361\" style=\"width: 610px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-47361\" loading=\"lazy\" class=\"wp-image-47361 size-full\" src=\"https://hacks.mozilla.org/files/2021/08/mdn_spring_cleaning_ii.png\" alt=\"An illustration of a blue coloured dinosaur sweeping with a broom\" width=\"600\" height=\"400\" srcset=\"https://hacks.mozilla.org/files/2021/08/mdn_spring_cleaning_ii.png 600w, https://hacks.mozilla.org/files/2021/08/mdn_spring_cleaning_ii-250x167.png 250w, https://hacks.mozilla.org/files/2021/08/mdn_spring_cleaning_ii-500x333.png 500w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-47361\" class=\"wp-caption-text\">Illustration by <a href=\"https://www.darylalexsy.net/\">Daryl Alexsy</a></p></div>\n<p>&nbsp;</p>\n<p>The bags have been filled up with all the things we&#8217;re ready to let go of and it&#8217;s time to take them to the charity shop.</p>\n<h2><b>Archiving content</b></h2>\n<p>Last month we removed a bunch of content from MDN. MDN is 16 years old (and yes it can drink in some countries), all that time ago it was a great place for all of Mozilla to document all of their things. As MDN evolved and the web reference became our core content, other areas became less relevant to the overall site. We have ~11k active pages on MDN, so keeping them up to date is a big task and we feel our focus should be there.</p>\n<p>This was a big decision and had been in the works for over a year. It actually started before we moved MDN content to GitHub. You may have noticed a banner every now and again, saying certain pages weren&#8217;t maintained. Various topics were removed including all Firefox (inc. Gecko) docs, which you <a href=\"https://firefox-source-docs.mozilla.org/\">can now find here</a>. Mercurial, Spidermonkey, Thunderbird, Rhino and XUL were also included in the archive.</p>\n<h2><b>So where is the content now?</b></h2>\n<p>It&#8217;s saved &#8211; it&#8217;s <a href=\"https://github.com/mdn/archived-content/\">in this repo</a>. We haven&#8217;t actually deleted it completely. Some of it is being re-hosted by various teams and we have the ability to redirect to those new places. It&#8217;s saved in both it&#8217;s rendered state and the raw wiki form. Just. In. Case.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/08/spring-cleaning-mdn-part-2/\">Spring cleaning MDN: Part 2</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"Illustration by Daryl Alexsy\n\n \nThe bags have been filled up with all the things we’re ready to let go of and it’s time to take them to the charity shop.\nArchiving content\nLast month we removed a bunch of content from MDN. MDN is 16 years old (and yes it can drink in some countries), all that time ago it was a great place for all of Mozilla to document all of their things. As MDN evolved and the web reference became our core content, other areas became less relevant to the overall site. We have ~11k active pages on MDN, so keeping them up to date is a big task and we feel our focus should be there.\nThis was a big decision and had been in the works for over a year. It actually started before we moved MDN content to GitHub. You may have noticed a banner every now and again, saying certain pages weren’t maintained. Various topics were removed including all Firefox (inc. Gecko) docs, which you can now find here. Mercurial, Spidermonkey, Thunderbird, Rhino and XUL were also included in the archive.\nSo where is the content now?\nIt’s saved – it’s in this repo. We haven’t actually deleted it completely. Some of it is being re-hosted by various teams and we have the ability to redirect to those new places. It’s saved in both it’s rendered state and the raw wiki form. Just. In. Case.\nThe post Spring cleaning MDN: Part 2 appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Ruth John","comments":"https://hacks.mozilla.org/2021/08/spring-cleaning-mdn-part-2/#respond","content":"<p>Last month we removed a bunch of content from MDN. MDN is 16 years old (and yes it can drink in some countries), all that time ago it was a great place for all of Mozilla to document all of their things. As MDN evolved and the web reference became our core content, other areas became less relevant to the overall site. We have ~11k active pages on MDN, so keeping them up to date is a big task and we feel our focus should be there.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/08/spring-cleaning-mdn-part-2/\">Spring cleaning MDN: Part 2</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"Last month we removed a bunch of content from MDN. MDN is 16 years old (and yes it can drink in some countries), all that time ago it was a great place for all of Mozilla to document all of their things. As MDN evolved and the web reference became our core content, other areas became less relevant to the overall site. We have ~11k active pages on MDN, so keeping them up to date is a big task and we feel our focus should be there.\nThe post Spring cleaning MDN: Part 2 appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47356","categories":["Featured Article","MDN","firefox","mdn","mozilla"],"isoDate":"2021-08-18T15:05:06.000Z","timestamp":"8/18/2021"},{"creator":"Ruth John","title":"Hopping on Firefox 91","link":"https://hacks.mozilla.org/2021/08/hopping-on-firefox-91/","pubDate":"Tue, 10 Aug 2021 15:04:27 +0000","content:encoded":"<h1><b>Hopping on Firefox 91</b></h1>\n<p>August is already here, which means so is Firefox 91! This release has a Scottish locale added and, if the &#8216;increased contrast&#8217; setting is checked, auto enables High Contrast mode on macOS.</p>\n<p>Private browsing windows have an HTTPS-first policy and will automatically attempt to make all connections to websites secure. Connections will fall back to HTTP if the website does not support HTTPS.</p>\n<p>For developers Firefox 91 supports the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Visual_Viewport_API\">Visual Viewport API</a> and adds some more additions to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\">Intl.DateTimeFormat</a> object.</p>\n<p>This blog post provides merely a set of highlights; for all the details, check out the following:</p>\n<ul>\n<li aria-level=\"1\"><a href=\"https://developer.mozilla.org/docs/Mozilla/Firefox/Releases/91\">Firefox 91 for developers on MDN</a></li>\n<li aria-level=\"1\"><a href=\"https://www.mozilla.org/en-US/firefox/91.0/releasenotes/\">Firefox 91 end-user release notes</a></li>\n</ul>\n<h2><b>Visual Viewport API</b></h2>\n<p>Implemented back in Firefox 63, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Visual_Viewport_API\">Visual Viewport API</a> was behind the pref <code>dom.visualviewport.enabled</code> in the desktop release. It is now no longer behind that pref and enabled by default, meaning the API is now supported in all major browsers.</p>\n<p>There are two viewports on the mobile web, the layout viewport and the visual viewport. The layout viewport covers all the elements on a page and the visual viewport represents what is actually visible on screen. If a keyboard appears on screen, the visual viewport dimensions will shrink, but the layout viewport will remain the same.</p>\n<p>This API gives you information about the size, offset and scale of the visual viewport and allows you to listen for resize and scroll events. You access it via the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/visualViewport\">visualViewport</a> property of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\">window</a> interface.</p>\n<p>In this simple example the <code>resize</code> event is listened for and when a user zooms in, hides an element in the layout, so as not to clutter the interface.</p>\n<pre><code class=\"”language-js”\">const elToHide = document.getElementById('to-hide');\n\nvar viewport = window.visualViewport;\n\nfunction resizeHandler() {\n\n   if (viewport.scale &gt; 1.3)\n     elToHide.style.display = \"none\";\n   else\n     elToHide.style.display = \"block\";\n}\n\nwindow.visualViewport.addEventListener('resize', resizeHandler);\n</code></pre>\n<h2><b>New formats for Intl.DateTimeFormat</b></h2>\n<p>A couple of updates to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\">Intl.DateTimeFormat</a> object include new <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\">timeZoneName</a> options for formatting how a timezone is displayed. These include the localized GMT formats <code>shortOffset</code> and <code>longOffset</code>, and generic non-location formats <code>shortGeneric</code> and <code>longGeneric</code>. The below code shows all the different options for the <code>timeZoneName</code> and their format.</p>\n<pre><code class=\"”language-js”\">var date = Date.UTC(2021, 11, 17, 3, 0, 42);\nconst timezoneNames = ['short', 'long', 'shortOffset', 'longOffset', 'shortGeneric', 'longGeneric']\n\nfor (const zoneName of timezoneNames) {\n\n  // Do something with currentValue\n  var formatter = new Intl.DateTimeFormat('en-US', {\n    timeZone: 'America/Los_Angeles',\n    timeZoneName: zoneName,\n  });\n\nconsole.log(zoneName + \": \" + formatter.format(date) );\n\n}\n\n// expected output:\n// &gt; \"short: 12/16/2021, PST\"\n// &gt; \"long: 12/16/2021, Pacific Standard Time\"\n// &gt; \"shortOffset: 12/16/2021, GMT-8\"\n// &gt; \"longOffset: 12/16/2021, GMT-08:00\"\n// &gt; \"shortGeneric: 12/16/2021, PT\"\n// &gt; \"longGeneric: 12/16/2021, Pacific Time\"</code></pre>\n<p>You can now format date ranges as well with the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange\">formatRange()</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRangeToParts\">formatRangeToParts()</a> methods. The former returns a localized and formatted string for the range between two <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date objects</a>:</p>\n<pre><code class=\"”language-js”\">const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n\nconst startDate = new Date(Date.UTC(2007, 0, 10, 10, 0, 0));\nconst endDate = new Date(Date.UTC(2008, 0, 10, 11, 0, 0));\n\nconst dateTimeFormat = new Intl.DateTimeFormat('en', options1);\nconsole.log(dateTimeFormat.formatRange(startDate, endDate));\n\n// expected output: Wednesday, January 10, 2007 – Thursday, January 10, 2008</code></pre>\n<p>And the latter returns an array containing the locale-specific parts of a date range:</p>\n<pre><code class=\"”language-js”\">const startDate = new Date(Date.UTC(2007, 0, 10, 10, 0, 0)); // &gt; 'Wed, 10 Jan 2007 10:00:00 GMT'\nconst endDate = new Date(Date.UTC(2007, 0, 10, 11, 0, 0));   // &gt; 'Wed, 10 Jan 2007 11:00:00 GMT'\n\nconst dateTimeFormat = new Intl.DateTimeFormat('en', {\n  hour: 'numeric',\n  minute: 'numeric'\n});\nconst parts = dateTimeFormat.formatRangeToParts(startDate, endDate);\n\nfor (const part of parts) {\n\n  console.log(part);\n\n}\n\n// expected output (in GMT timezone):\n// Object { type: \"hour\", value: \"2\", source: \"startRange\" }\n// Object { type: \"literal\", value: \":\", source: \"startRange\" }\n// Object { type: \"minute\", value: \"00\", source: \"startRange\" }\n// Object { type: \"literal\", value: \" – \", source: \"shared\" }\n// Object { type: \"hour\", value: \"3\", source: \"endRange\" }\n// Object { type: \"literal\", value: \":\", source: \"endRange\" }\n// Object { type: \"minute\", value: \"00\", source: \"endRange\" }\n// Object { type: \"literal\", value: \" \", source: \"shared\" }\n// Object { type: \"dayPeriod\", value: \"AM\", source: \"shared\" }\n</code></pre>\n<h2><b>Securing the Gamepad API</b></h2>\n<p>There have been a few updates to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\">Gamepad API</a> to fall in line with the spec. It is now only available in secure contexts (HTTPS) and is protected by <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy/gamepad\">Feature Policy: gamepad</a>. If access to gamepads is <i>disallowed,</i> calls to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getGamepads\">Navigator.getGamepads()</a> will throw an error and the <code>gamepadconnected</code> and <code>gamepaddisconnected</code> events will not fire.</p>\n<p>&nbsp;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/08/hopping-on-firefox-91/\">Hopping on Firefox 91</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"Hopping on Firefox 91\nAugust is already here, which means so is Firefox 91! This release has a Scottish locale added and, if the ‘increased contrast’ setting is checked, auto enables High Contrast mode on macOS.\nPrivate browsing windows have an HTTPS-first policy and will automatically attempt to make all connections to websites secure. Connections will fall back to HTTP if the website does not support HTTPS.\nFor developers Firefox 91 supports the Visual Viewport API and adds some more additions to the Intl.DateTimeFormat object.\nThis blog post provides merely a set of highlights; for all the details, check out the following:\nFirefox 91 for developers on MDN\nFirefox 91 end-user release notes\nVisual Viewport API\nImplemented back in Firefox 63, the Visual Viewport API was behind the pref dom.visualviewport.enabled in the desktop release. It is now no longer behind that pref and enabled by default, meaning the API is now supported in all major browsers.\nThere are two viewports on the mobile web, the layout viewport and the visual viewport. The layout viewport covers all the elements on a page and the visual viewport represents what is actually visible on screen. If a keyboard appears on screen, the visual viewport dimensions will shrink, but the layout viewport will remain the same.\nThis API gives you information about the size, offset and scale of the visual viewport and allows you to listen for resize and scroll events. You access it via the visualViewport property of the window interface.\nIn this simple example the resize event is listened for and when a user zooms in, hides an element in the layout, so as not to clutter the interface.\nconst elToHide = document.getElementById('to-hide');\n\nvar viewport = window.visualViewport;\n\nfunction resizeHandler() {\n\n   if (viewport.scale > 1.3)\n     elToHide.style.display = \"none\";\n   else\n     elToHide.style.display = \"block\";\n}\n\nwindow.visualViewport.addEventListener('resize', resizeHandler);\n\nNew formats for Intl.DateTimeFormat\nA couple of updates to the Intl.DateTimeFormat object include new timeZoneName options for formatting how a timezone is displayed. These include the localized GMT formats shortOffset and longOffset, and generic non-location formats shortGeneric and longGeneric. The below code shows all the different options for the timeZoneName and their format.\nvar date = Date.UTC(2021, 11, 17, 3, 0, 42);\nconst timezoneNames = ['short', 'long', 'shortOffset', 'longOffset', 'shortGeneric', 'longGeneric']\n\nfor (const zoneName of timezoneNames) {\n\n  // Do something with currentValue\n  var formatter = new Intl.DateTimeFormat('en-US', {\n    timeZone: 'America/Los_Angeles',\n    timeZoneName: zoneName,\n  });\n\nconsole.log(zoneName + \": \" + formatter.format(date) );\n\n}\n\n// expected output:\n// > \"short: 12/16/2021, PST\"\n// > \"long: 12/16/2021, Pacific Standard Time\"\n// > \"shortOffset: 12/16/2021, GMT-8\"\n// > \"longOffset: 12/16/2021, GMT-08:00\"\n// > \"shortGeneric: 12/16/2021, PT\"\n// > \"longGeneric: 12/16/2021, Pacific Time\"\nYou can now format date ranges as well with the new formatRange() and formatRangeToParts() methods. The former returns a localized and formatted string for the range between two Date objects:\nconst options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n\nconst startDate = new Date(Date.UTC(2007, 0, 10, 10, 0, 0));\nconst endDate = new Date(Date.UTC(2008, 0, 10, 11, 0, 0));\n\nconst dateTimeFormat = new Intl.DateTimeFormat('en', options1);\nconsole.log(dateTimeFormat.formatRange(startDate, endDate));\n\n// expected output: Wednesday, January 10, 2007 – Thursday, January 10, 2008\nAnd the latter returns an array containing the locale-specific parts of a date range:\nconst startDate = new Date(Date.UTC(2007, 0, 10, 10, 0, 0)); // > 'Wed, 10 Jan 2007 10:00:00 GMT'\nconst endDate = new Date(Date.UTC(2007, 0, 10, 11, 0, 0));   // > 'Wed, 10 Jan 2007 11:00:00 GMT'\n\nconst dateTimeFormat = new Intl.DateTimeFormat('en', {\n  hour: 'numeric',\n  minute: 'numeric'\n});\nconst parts = dateTimeFormat.formatRangeToParts(startDate, endDate);\n\nfor (const part of parts) {\n\n  console.log(part);\n\n}\n\n// expected output (in GMT timezone):\n// Object { type: \"hour\", value: \"2\", source: \"startRange\" }\n// Object { type: \"literal\", value: \":\", source: \"startRange\" }\n// Object { type: \"minute\", value: \"00\", source: \"startRange\" }\n// Object { type: \"literal\", value: \" – \", source: \"shared\" }\n// Object { type: \"hour\", value: \"3\", source: \"endRange\" }\n// Object { type: \"literal\", value: \":\", source: \"endRange\" }\n// Object { type: \"minute\", value: \"00\", source: \"endRange\" }\n// Object { type: \"literal\", value: \" \", source: \"shared\" }\n// Object { type: \"dayPeriod\", value: \"AM\", source: \"shared\" }\n\nSecuring the Gamepad API\nThere have been a few updates to the Gamepad API to fall in line with the spec. It is now only available in secure contexts (HTTPS) and is protected by Feature Policy: gamepad. If access to gamepads is disallowed, calls to Navigator.getGamepads() will throw an error and the gamepadconnected and gamepaddisconnected events will not fire.\n \nThe post Hopping on Firefox 91 appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Ruth John","comments":"https://hacks.mozilla.org/2021/08/hopping-on-firefox-91/#comments","content":"<p>August is already here, which means so is Firefox 91! For developers, Firefox 91 supports the Visual Viewport API and Intl.DateTimeFormat object additions.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/08/hopping-on-firefox-91/\">Hopping on Firefox 91</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"August is already here, which means so is Firefox 91! For developers, Firefox 91 supports the Visual Viewport API and Intl.DateTimeFormat object additions.\nThe post Hopping on Firefox 91 appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47357","categories":["DOM","Featured Article","Firefox Releases","Games","JavaScript","MDN","Web APIs","Web Developers","firefox","firefox 91","mdn"],"isoDate":"2021-08-10T15:04:27.000Z","timestamp":"8/10/2021"},{"creator":"Peter Bengtsson","title":"How MDN’s autocomplete search works","link":"https://hacks.mozilla.org/2021/08/mdns-autocomplete-search/","pubDate":"Tue, 03 Aug 2021 15:49:30 +0000","content:encoded":"<p>Last month, <a href=\"https://github.com/Gregoor/\">Gregor Weber</a> and I added an autocomplete search to <a href=\"https://developer.mozilla.org\">MDN Web Docs</a>, that allows you to quickly jump straight to the document you&#8217;re looking for by typing parts of the document title. This is the story about how that&#8217;s implemented. If you stick around to the end, I&#8217;ll share an &#8220;easter egg&#8221; feature that, once you&#8217;ve learned it, will make you look really cool at dinner parties. Or, perhaps you just want to navigate MDN faster than mere mortals.</p>\n<p><img loading=\"lazy\" class=\"alignnone size-medium wp-image-47345\" src=\"https://hacks.mozilla.org/files/2021/07/mdn-autocomplete-1-250x462.png\" alt=\"MDN's autocomplete search in action\" width=\"250\" height=\"462\" srcset=\"https://hacks.mozilla.org/files/2021/07/mdn-autocomplete-1-250x462.png 250w, https://hacks.mozilla.org/files/2021/07/mdn-autocomplete-1-500x924.png 500w, https://hacks.mozilla.org/files/2021/07/mdn-autocomplete-1-768x1419.png 768w, https://hacks.mozilla.org/files/2021/07/mdn-autocomplete-1.png 816w\" sizes=\"(max-width: 250px) 100vw, 250px\" /></p>\n<p>In its simplest form, the input field has an <code>onkeypress</code> event listener that filters through a complete list of every single document title (per locale). At the time of writing, there are 11,690 different document titles (and their URLs) for English US. You can see a preview by opening <a href=\"https://developer.mozilla.org/en-US/search-index.json\">https://developer.mozilla.org/en-US/search-index.json</a>. Yes, it&#8217;s huge, but it&#8217;s not too huge to load all into memory. After all, together with the code that does the searching, it&#8217;s only loaded when the user has indicated intent to type something. And speaking of size, because the file is compressed with <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/brotli_compression\">Brotli</a>, the file is only 144KB over the network.</p>\n<h2>Implementation details</h2>\n<p>By default, the only JavaScript code that&#8217;s loaded is a small shim that watches for <code>onmouseover</code> and <code>onfocus</code> for the search <code>&lt;input&gt;</code> field. There&#8217;s also an event listener on the whole <code>document</code> that looks for a certain keystroke. Pressing <code>/</code> at any point, acts the same as if you had used your mouse cursor to put focus into the <code>&lt;input&gt;</code> field. As soon as focus is triggered, the first thing it does is download two JavaScript bundles which turns the <code>&lt;input&gt;</code> field into something much more advanced. In its simplest (pseudo) form, here&#8217;s how it works:</p>\n<pre class=\"html\"><code>&lt;input \n type=\"search\" \n name=\"q\"\n onfocus=\"startAutocomplete()\" \n onmouseover=\"startAutocomplete()\"\n placeholder=\"Site search...\" \n value=\"q\"&gt;</code></pre>\n<pre class=\"js\"><code>let started = false;\nfunction startAutocomplete() {\n  if (started) {\n    return false;\n  }\n  const script = document.createElement(\"script\");\n  script.src = \"/static/js/autocomplete.js\";\n  document.head.appendChild(script);\n}</code></pre>\n<p>Then it loads <code>/static/js/autocomplete.js</code> which is where the real magic happens. Let&#8217;s dig deeper with the pseudo code:</p>\n<pre class=\"js\"><code>(async function() {\n  const response = await fetch('/en-US/search-index.json');\n  const documents = await response.json();\n  \n  const inputValue = document.querySelector(\n    'input[type=\"search\"]'\n  ).value;\n  const flex = FlexSearch.create();\n  documents.forEach(({ title }, i) =&gt; {\n    flex.add(i, title);\n  });\n\n  const indexResults = flex.search(inputValue);\n  const foundDocuments = indexResults.map((index) =&gt; documents[index]);\n  displayFoundDocuments(foundDocuments.slice(0, 10));\n})();</code></pre>\n<p>As you can probably see, this is an oversimplification of how it actually works, but it&#8217;s not yet time to dig into the details. The next step is to display the matches. We use (TypeScript) React to do this, but the following pseudo code is easier to follow:</p>\n<pre class=\"js\"><code>function displayFoundResults(documents) {\n  const container = document.createElement(\"ul\");\n  documents.forEach(({url, title}) =&gt; {\n    const row = document.createElement(\"li\");\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.textContent = title;\n    row.appendChild(link);\n    container.appendChild(row);\n  });\n  document.querySelector('#search').appendChild(container);\n}\n</code></pre>\n<p>Then with some CSS, we just display this as an overlay just beneath the <code>&lt;input&gt;</code> field. For example, we highlight each <code>title</code> according to the <code>inputValue</code> and various keystroke event handlers take care of highlighting the relevant row when you navigate up and down.</p>\n<h2>Ok, let&#8217;s dig deeper into the implementation details</h2>\n<p>We create the <code>FlexSearch</code> index just <i>once</i> and <i>re-use it for every new keystroke</i>. Because the user might type more while waiting for the network, it&#8217;s actually reactive so executes the actual search once all the JavaScript and the JSON XHR have arrived.</p>\n<p>Before we dig into what this <code>FlexSearch</code> is, let&#8217;s talk about how the display actually works. For that we use a React library called <a href=\"https://www.npmjs.com/package/downshift\">downshift</a> which handles all the interactions, displays, and makes sure the displayed search results are accessible. <code>downshift</code> is a mature library that handles a myriad of challenges with building a widget like that, especially the aspects of making it accessible.</p>\n<p>So, what is this <a href=\"https://www.npmjs.com/package/flexsearch\"><code>FlexSearch</code> library</a>? It&#8217;s another third party that makes sure that searching on titles is done with natural language in mind. It describes itself as the &#8220;Web&#8217;s fastest and most memory-flexible full-text search library with zero dependencies.&#8221; which is a lot more performant and accurate than attempting to simply look for one string in a long list of other strings.</p>\n<h2>Deciding which result to show first</h2>\n<p>In fairness, if the user types <code>foreac</code>, it&#8217;s not that hard to reduce a list of 10,000+ document titles down to only those that contain <code>foreac</code> in the title, then we decide which result to show first. The way we implement that is relying on pageview stats. We record, for every single MDN URL, which one gets the most pageviews as a form of determining &#8220;popularity&#8221;. The documents that most people decide to arrive on are most probably what the user was searching for.</p>\n<p>Our <a href=\"https://github.com/mdn/yari\">build-process</a> that generates the <code>search-index.json</code> file knows about each URLs number of pageviews. We actually don&#8217;t care about absolute numbers, but what we do care about is the relative differences. For example, we know that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a> (that&#8217;s one of the document titles) is a more popular page than <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach\"><code>TypedArray.prototype.forEach()</code></a>, so we leverage that and sort the entries in <code>search-index.json</code> accordingly. Now, with <code>FlexSearch</code> doing the reduction, we use the &#8220;natural order&#8221; of the array as the trick that tries to give users the document they were probably looking for. It&#8217;s actually the same technique we use for <code>Elasticsearch</code> in our full site-search. More about that in: <a href=\"https://hacks.mozilla.org/2021/03/how-mdns-site-search-works/\">How MDN’s site-search works</a>.</p>\n<h2>The easter egg: How to search by URL</h2>\n<p>Actually, it&#8217;s not a whimsical easter egg, but a feature that came from the fact that this autocomplete needs to work for our content creators. You see, when you work on the <a href=\"https://github.com/mdn/content\">content in MDN</a> you start a local &#8220;preview server&#8221; which is a complete copy of all documents but all running locally, as a static site, under <code>http://localhost:5000</code>. There, you don&#8217;t want to rely on a server to do searches. Content authors need to quickly move between documents, so much of the reason why the autocomplete search is done entirely in the client is because of that.</p>\n<p>Commonly implemented in tools like the VSCode and Atom IDEs, you can do &#8220;fuzzy searches&#8221; to find and open files simply by typing portions of the file path. For example, searching for <code>whmlemvo</code> should find the file <code>files/<b>w</b>eb/<b>h</b>t<b>ml</b>/<b>e</b>lement/<b>v</b>ide<b>o</b></code>. You can do that with MDN&#8217;s autocomplete search too. The way you do it is by typing <code>/</code> as the first input character.</p>\n<p><img loading=\"lazy\" class=\"alignnone size-medium wp-image-47349\" src=\"https://hacks.mozilla.org/files/2021/07/Screen-Shot-2021-07-30-at-3.47.26-PM-250x217.png\" alt=\"Activate &quot;fuzzy search&quot; on MDN\" width=\"250\" height=\"217\" srcset=\"https://hacks.mozilla.org/files/2021/07/Screen-Shot-2021-07-30-at-3.47.26-PM-250x217.png 250w, https://hacks.mozilla.org/files/2021/07/Screen-Shot-2021-07-30-at-3.47.26-PM-500x435.png 500w, https://hacks.mozilla.org/files/2021/07/Screen-Shot-2021-07-30-at-3.47.26-PM-768x667.png 768w, https://hacks.mozilla.org/files/2021/07/Screen-Shot-2021-07-30-at-3.47.26-PM.png 794w\" sizes=\"(max-width: 250px) 100vw, 250px\" /></p>\n<p>It makes it really quick to jump straight to a document if you know its URL but don&#8217;t want to spell it out exactly.<br />\nIn fact, there&#8217;s another way to navigate and that is to first press <code>/</code> anywhere when browsing MDN, which activates the autocomplete search. Then you type <code>/</code> again, and you&#8217;re off to the races!</p>\n<h2>How to get really deep into the implementation details</h2>\n<p>The code for all of this is in the <a href=\"https://github.com/mdn/yari\">Yari repo</a> which is the project that builds and previews all of the <a href=\"https://github.com/mdn/content\">MDN content</a>. To find the exact code, click into the <a href=\"https://github.com/mdn/yari/blob/main/client/src/search.tsx\"><code>client/src/search.tsx</code></a> source code and you&#8217;ll find all the code for lazy-loading, searching, preloading, and displaying autocomplete searches.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/08/mdns-autocomplete-search/\">How MDN&#8217;s autocomplete search works</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"Last month, Gregor Weber and I added an autocomplete search to MDN Web Docs, that allows you to quickly jump straight to the document you’re looking for by typing parts of the document title. This is the story about how that’s implemented. If you stick around to the end, I’ll share an “easter egg” feature that, once you’ve learned it, will make you look really cool at dinner parties. Or, perhaps you just want to navigate MDN faster than mere mortals.\n\nIn its simplest form, the input field has an onkeypress event listener that filters through a complete list of every single document title (per locale). At the time of writing, there are 11,690 different document titles (and their URLs) for English US. You can see a preview by opening https://developer.mozilla.org/en-US/search-index.json. Yes, it’s huge, but it’s not too huge to load all into memory. After all, together with the code that does the searching, it’s only loaded when the user has indicated intent to type something. And speaking of size, because the file is compressed with Brotli, the file is only 144KB over the network.\nImplementation details\nBy default, the only JavaScript code that’s loaded is a small shim that watches for onmouseover and onfocus for the search <input> field. There’s also an event listener on the whole document that looks for a certain keystroke. Pressing / at any point, acts the same as if you had used your mouse cursor to put focus into the <input> field. As soon as focus is triggered, the first thing it does is download two JavaScript bundles which turns the <input> field into something much more advanced. In its simplest (pseudo) form, here’s how it works:\n<input \n type=\"search\" \n name=\"q\"\n onfocus=\"startAutocomplete()\" \n onmouseover=\"startAutocomplete()\"\n placeholder=\"Site search...\" \n value=\"q\">\nlet started = false;\nfunction startAutocomplete() {\n  if (started) {\n    return false;\n  }\n  const script = document.createElement(\"script\");\n  script.src = \"/static/js/autocomplete.js\";\n  document.head.appendChild(script);\n}\nThen it loads /static/js/autocomplete.js which is where the real magic happens. Let’s dig deeper with the pseudo code:\n(async function() {\n  const response = await fetch('/en-US/search-index.json');\n  const documents = await response.json();\n  \n  const inputValue = document.querySelector(\n    'input[type=\"search\"]'\n  ).value;\n  const flex = FlexSearch.create();\n  documents.forEach(({ title }, i) => {\n    flex.add(i, title);\n  });\n\n  const indexResults = flex.search(inputValue);\n  const foundDocuments = indexResults.map((index) => documents[index]);\n  displayFoundDocuments(foundDocuments.slice(0, 10));\n})();\nAs you can probably see, this is an oversimplification of how it actually works, but it’s not yet time to dig into the details. The next step is to display the matches. We use (TypeScript) React to do this, but the following pseudo code is easier to follow:\nfunction displayFoundResults(documents) {\n  const container = document.createElement(\"ul\");\n  documents.forEach(({url, title}) => {\n    const row = document.createElement(\"li\");\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.textContent = title;\n    row.appendChild(link);\n    container.appendChild(row);\n  });\n  document.querySelector('#search').appendChild(container);\n}\n\nThen with some CSS, we just display this as an overlay just beneath the <input> field. For example, we highlight each title according to the inputValue and various keystroke event handlers take care of highlighting the relevant row when you navigate up and down.\nOk, let’s dig deeper into the implementation details\nWe create the FlexSearch index just once and re-use it for every new keystroke. Because the user might type more while waiting for the network, it’s actually reactive so executes the actual search once all the JavaScript and the JSON XHR have arrived.\nBefore we dig into what this FlexSearch is, let’s talk about how the display actually works. For that we use a React library called downshift which handles all the interactions, displays, and makes sure the displayed search results are accessible. downshift is a mature library that handles a myriad of challenges with building a widget like that, especially the aspects of making it accessible.\nSo, what is this FlexSearch library? It’s another third party that makes sure that searching on titles is done with natural language in mind. It describes itself as the “Web’s fastest and most memory-flexible full-text search library with zero dependencies.” which is a lot more performant and accurate than attempting to simply look for one string in a long list of other strings.\nDeciding which result to show first\nIn fairness, if the user types foreac, it’s not that hard to reduce a list of 10,000+ document titles down to only those that contain foreac in the title, then we decide which result to show first. The way we implement that is relying on pageview stats. We record, for every single MDN URL, which one gets the most pageviews as a form of determining “popularity”. The documents that most people decide to arrive on are most probably what the user was searching for.\nOur build-process that generates the search-index.json file knows about each URLs number of pageviews. We actually don’t care about absolute numbers, but what we do care about is the relative differences. For example, we know that Array.prototype.forEach() (that’s one of the document titles) is a more popular page than TypedArray.prototype.forEach(), so we leverage that and sort the entries in search-index.json accordingly. Now, with FlexSearch doing the reduction, we use the “natural order” of the array as the trick that tries to give users the document they were probably looking for. It’s actually the same technique we use for Elasticsearch in our full site-search. More about that in: How MDN’s site-search works.\nThe easter egg: How to search by URL\nActually, it’s not a whimsical easter egg, but a feature that came from the fact that this autocomplete needs to work for our content creators. You see, when you work on the content in MDN you start a local “preview server” which is a complete copy of all documents but all running locally, as a static site, under http://localhost:5000. There, you don’t want to rely on a server to do searches. Content authors need to quickly move between documents, so much of the reason why the autocomplete search is done entirely in the client is because of that.\nCommonly implemented in tools like the VSCode and Atom IDEs, you can do “fuzzy searches” to find and open files simply by typing portions of the file path. For example, searching for whmlemvo should find the file files/web/html/element/video. You can do that with MDN’s autocomplete search too. The way you do it is by typing / as the first input character.\n\nIt makes it really quick to jump straight to a document if you know its URL but don’t want to spell it out exactly.\n/ anywhere when browsing MDN, which activates the autocomplete search. Then you type / again, and you’re off to the races!\nHow to get really deep into the implementation details\nThe code for all of this is in the Yari repo which is the project that builds and previews all of the MDN content. To find the exact code, click into the client/src/search.tsx source code and you’ll find all the code for lazy-loading, searching, preloading, and displaying autocomplete searches.\nThe post How MDN’s autocomplete search works appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Peter Bengtsson","comments":"https://hacks.mozilla.org/2021/08/mdns-autocomplete-search/#comments","content":"<p>Last month, Gregor Weber and Peter Bengtsson added an autocomplete search to MDN Web Docs, that allows you to quickly jump straight to the document you're looking for by typing parts of the document title. This is the story about how that's implemented. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/08/mdns-autocomplete-search/\">How MDN&#8217;s autocomplete search works</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"Last month, Gregor Weber and Peter Bengtsson added an autocomplete search to MDN Web Docs, that allows you to quickly jump straight to the document you're looking for by typing parts of the document title. This is the story about how that's implemented. \nThe post How MDN’s autocomplete search works appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47344","categories":["Docs","Featured Article","JavaScript","MDN","firefox","mdn","mozilla"],"isoDate":"2021-08-03T15:49:30.000Z","timestamp":"8/3/2021"},{"creator":"Ruth John","title":"Spring Cleaning MDN: Part 1","link":"https://hacks.mozilla.org/2021/07/spring-cleaning-mdn-part-1/","pubDate":"Tue, 20 Jul 2021 16:00:48 +0000","content:encoded":"<p>As we’re all aware by now, <a href=\"https://hacks.mozilla.org/2020/12/welcome-yari-mdn-web-docs-has-a-new-platform\">we made some big platform changes at the end of 2020</a>. Whilst the big move has happened, its given us a great opportunity to clear out the cupboards and closets.</p>\r\n<div id=\"attachment_47339\" style=\"width: 610px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-47339\" loading=\"lazy\" class=\"wp-image-47339 size-full\" src=\"https://hacks.mozilla.org/files/2021/07/mdn_spring_cleaning.png\" alt=\"An illustration of a salmon coloured dinosaur sweeping with a broom\" width=\"600\" height=\"401\" srcset=\"https://hacks.mozilla.org/files/2021/07/mdn_spring_cleaning.png 600w, https://hacks.mozilla.org/files/2021/07/mdn_spring_cleaning-250x167.png 250w, https://hacks.mozilla.org/files/2021/07/mdn_spring_cleaning-500x334.png 500w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-47339\" class=\"wp-caption-text\"><em>                                  Illustration by <a href=\"https://www.darylalexsy.net/\">Daryl Alexsy</a></em></p></div>\r\n<p>&nbsp;</p>\r\n<p>Most notably MDN now manages its content from a <a href=\"https://github.com/mdn/content\">repository on GitHub</a>. Prior to this, the content was stored in a database and edited by logging in to the site and modifying content via an in-page (WYSIWYG) editor, aka ‘The Wiki’. Since the big move, we have determined that MDN accounts are no longer functional for our users. If you want to edit or contribute content, you need to sign in to GitHub, not MDN.</p>\r\n<p>Due to this, we’ll be removing the account functionality and removing all of the account data from our database. This is consistent with our <a href=\"https://www.mozilla.org/en-US/about/policy/lean-data/\">Lean Data Practices principles</a> and our commitment to user privacy. We also have the perfect opportunity to be doing this now, as we’re moving our database from MySQL to PostgreSQL this week.</p>\r\n<p>Accounts will be disabled on MDN on Thursday, 22nd July.</p>\r\n<p>Don’t worry though &#8211; you can still contribute to MDN! That hasn’t changed. All the information on how to help is <a href=\"https://developer.mozilla.org/en-US/docs/MDN/Contribute\">here in this guide</a>.</p>\r\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/07/spring-cleaning-mdn-part-1/\">Spring Cleaning MDN: Part 1</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"As we’re all aware by now, we made some big platform changes at the end of 2020. Whilst the big move has happened, its given us a great opportunity to clear out the cupboards and closets.\n\r\n\n                                  Illustration by Daryl Alexsy\n\r\n \n\r\nMost notably MDN now manages its content from a repository on GitHub. Prior to this, the content was stored in a database and edited by logging in to the site and modifying content via an in-page (WYSIWYG) editor, aka ‘The Wiki’. Since the big move, we have determined that MDN accounts are no longer functional for our users. If you want to edit or contribute content, you need to sign in to GitHub, not MDN.\n\r\nDue to this, we’ll be removing the account functionality and removing all of the account data from our database. This is consistent with our Lean Data Practices principles and our commitment to user privacy. We also have the perfect opportunity to be doing this now, as we’re moving our database from MySQL to PostgreSQL this week.\n\r\nAccounts will be disabled on MDN on Thursday, 22nd July.\n\r\nDon’t worry though – you can still contribute to MDN! That hasn’t changed. All the information on how to help is here in this guide.\n\r\nThe post Spring Cleaning MDN: Part 1 appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Ruth John","comments":"https://hacks.mozilla.org/2021/07/spring-cleaning-mdn-part-1/#comments","content":"<p>As we’re all aware by now, we made some big platform changes at the end of 2020. Whilst the big move has happened, it’s given us a great opportunity to clear out the cupboards and closets. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/07/spring-cleaning-mdn-part-1/\">Spring Cleaning MDN: Part 1</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"As we’re all aware by now, we made some big platform changes at the end of 2020. Whilst the big move has happened, it’s given us a great opportunity to clear out the cupboards and closets. \nThe post Spring Cleaning MDN: Part 1 appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47324","categories":["Featured Article","MDN","data","firefox","github","mdn"],"isoDate":"2021-07-20T16:00:48.000Z","timestamp":"7/20/2021"},{"creator":"Ruth John","title":"Getting lively with Firefox 90","link":"https://hacks.mozilla.org/2021/07/getting-lively-with-firefox-90/","pubDate":"Tue, 13 Jul 2021 15:02:10 +0000","content:encoded":"<h1><b>Getting lively with Firefox 90</b></h1>\n<p>As the summer rolls around for those of us in the northern hemisphere, temperatures are high and unwinding with a cool ice tea is high on the agenda. Isn&#8217;t it lucky then that Background Update is here for Windows, which means Firefox can update even if it&#8217;s not running. We can just sit back and relax!</p>\n<p>Also this release we see a few nice JavaScript additions, including <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">private fields and methods for classes</a>, and the at() method for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\">Array</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at\">String</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/at\">TypedArray</a> global objects.</p>\n<p>This blog post just provides a set of highlights; for all the details, check out the following:</p>\n<ul>\n<li aria-level=\"1\"><a href=\"https://developer.mozilla.org/docs/Mozilla/Firefox/Releases/90\">Firefox 90 for developers on MDN</a></li>\n<li aria-level=\"1\"><a href=\"https://www.mozilla.org/en-US/firefox/90.0/releasenotes/\">Firefox 90 end-user release notes</a></li>\n</ul>\n<h2><b>Classes go private</b></h2>\n<p>A feature JavaScript has lacked since its inception,<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\"> private fields and methods</a> are now enabled by default In Firefox 90. This allows you to declare private properties within a class. You can not reference these private properties from outside of the class; they can only be read or written within the class body.</p>\n<p>Private names must be prefixed with a &#8216;hash mark&#8217; (#) to distinguish them from any public properties a class might hold.</p>\n<p>This shows how to declare private fields as opposed to public ones within a class:</p>\n<pre><code class=\"language-js\">class ClassWithPrivateProperties {\n\n  #privateField;\n  publicField;\n\n  constructor() {\n\n    // can be referenced within the class, but not accessed outside\n    this.#privateField = 42;\n\n    // can be referenced within the class aswell as outside\n    this.publicField = 52;\n}\n\n  // again, can only be used within the class\n  #privateMethod() {\n    return 'hello world';\n  }\n\n  // can be called when using the class\n  getPrivateMessage() {\n    return this.#privateMethod();\n  }\n}</code></pre>\n<p>Static fields and methods can also be private. For a more detailed overview and explanation, check out the great guide:<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_With_Private_Class_Features\"> Working with private class features</a>. You can also read what it takes to implement such a feature in our <a href=\"https://hacks.mozilla.org/2021/06/implementing-private-fields-for-javascript/\">previous blog post Implementing Private Fields for JavaScript</a>.</p>\n<h2><b>JavaScript at() method</b></h2>\n<p>The relative indexing method at() has been added to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\">Array</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at\">String</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/at\">TypedArray</a> global objects.</p>\n<p>Passing a positive integer to the method returns the item or character at that position. However the highlight with this method, is that it also accepts negative integers. These count back from the end of the array or string. For example, 1 would return the second item or character and -1 would return the last item or character.</p>\n<p>This example declares an array of values and uses the at() method to select an item in that array <i>from the end</i>.</p>\n<pre><code class=\"language-js\">const myArray = [5, 12, 8, 130, 44];\n\nlet arrItem = myArray.at(-2);\n\n// arrItem = 130\n</code></pre>\n<p>It&#8217;s worth mentioning there <i>are</i> other common ways of doing this, however this one looks quite neat.</p>\n<h2><b>Conic gradients for Canvas</b></h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">2D Canvas API</a> has a new <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createConicGradient\">createConicGradient()</a> method, which creates a gradient <i>around</i> a point (rather than from it, like <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\">createRadialGradient()</a> ). This feature allows you to specify where you want the center to be and in which direction the gradient should start. You then add the colours you want and where they should begin (and end).</p>\n<p>This example creates a conic gradient with 5 colour stops, which we use to fill a rectangle.</p>\n<pre><code class=\"language-js\">var canvas = document.getElementById('canvas');\n\nvar ctx = canvas.getContext('2d');\n\n// Create a conic gradient\n// The start angle is 0\n// The centre position is 100, 100\nvar gradient = ctx.createConicGradient(0, 100, 100);\n\n// Add five color stops\ngradient.addColorStop(0, \"red\");\ngradient.addColorStop(0.25, \"orange\");\ngradient.addColorStop(0.5, \"yellow\");\ngradient.addColorStop(0.75, \"green\");\ngradient.addColorStop(1, \"blue\");\n\n// Set the fill style and draw a rectangle\nctx.fillStyle = gradient;\nctx.fillRect(20, 20, 200, 200);\n</code></pre>\n<p>The result looks like this:</p>\n<p><img loading=\"lazy\" class=\"alignnone size-medium wp-image-47325\" src=\"https://hacks.mozilla.org/files/2021/07/Screenshot-2021-07-08-at-10.38.43-250x183.png\" alt=\"Rainbow radial gradient\" width=\"250\" height=\"183\" srcset=\"https://hacks.mozilla.org/files/2021/07/Screenshot-2021-07-08-at-10.38.43-250x183.png 250w, https://hacks.mozilla.org/files/2021/07/Screenshot-2021-07-08-at-10.38.43.png 492w\" sizes=\"(max-width: 250px) 100vw, 250px\" /></p>\n<h2><b>New Request Headers</b></h2>\n<p>Fetch metadata request headers provide information about the context from which a request originated. This allows the server to make decisions about whether a request should be allowed based on where the request came from and how the resource will be used. Firefox 90 enables the following by default:</p>\n<ul>\n<li aria-level=\"1\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Site\">Sec-Fetch-Site</a></li>\n<li aria-level=\"1\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Mode\">Sec-Fetch-Mode</a></li>\n<li aria-level=\"1\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-User\">Sec-Fetch-User</a></li>\n<li aria-level=\"1\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Dest\">Sec-Fetch-Dest</a></li>\n</ul>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/07/getting-lively-with-firefox-90/\">Getting lively with Firefox 90</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"Getting lively with Firefox 90\nAs the summer rolls around for those of us in the northern hemisphere, temperatures are high and unwinding with a cool ice tea is high on the agenda. Isn’t it lucky then that Background Update is here for Windows, which means Firefox can update even if it’s not running. We can just sit back and relax!\nAlso this release we see a few nice JavaScript additions, including private fields and methods for classes, and the at() method for Array, String and TypedArray global objects.\nThis blog post just provides a set of highlights; for all the details, check out the following:\nFirefox 90 for developers on MDN\nFirefox 90 end-user release notes\nClasses go private\nA feature JavaScript has lacked since its inception, private fields and methods are now enabled by default In Firefox 90. This allows you to declare private properties within a class. You can not reference these private properties from outside of the class; they can only be read or written within the class body.\nPrivate names must be prefixed with a ‘hash mark’ (#) to distinguish them from any public properties a class might hold.\nThis shows how to declare private fields as opposed to public ones within a class:\nclass ClassWithPrivateProperties {\n\n  #privateField;\n  publicField;\n\n  constructor() {\n\n    // can be referenced within the class, but not accessed outside\n    this.#privateField = 42;\n\n    // can be referenced within the class aswell as outside\n    this.publicField = 52;\n}\n\n  // again, can only be used within the class\n  #privateMethod() {\n    return 'hello world';\n  }\n\n  // can be called when using the class\n  getPrivateMessage() {\n    return this.#privateMethod();\n  }\n}\nStatic fields and methods can also be private. For a more detailed overview and explanation, check out the great guide: Working with private class features. You can also read what it takes to implement such a feature in our previous blog post Implementing Private Fields for JavaScript.\nJavaScript at() method\nThe relative indexing method at() has been added to the Array, String and TypedArray global objects.\nPassing a positive integer to the method returns the item or character at that position. However the highlight with this method, is that it also accepts negative integers. These count back from the end of the array or string. For example, 1 would return the second item or character and -1 would return the last item or character.\nThis example declares an array of values and uses the at() method to select an item in that array from the end.\nconst myArray = [5, 12, 8, 130, 44];\n\nlet arrItem = myArray.at(-2);\n\n// arrItem = 130\n\nIt’s worth mentioning there are other common ways of doing this, however this one looks quite neat.\nConic gradients for Canvas\nThe 2D Canvas API has a new createConicGradient() method, which creates a gradient around a point (rather than from it, like createRadialGradient() ). This feature allows you to specify where you want the center to be and in which direction the gradient should start. You then add the colours you want and where they should begin (and end).\nThis example creates a conic gradient with 5 colour stops, which we use to fill a rectangle.\nvar canvas = document.getElementById('canvas');\n\nvar ctx = canvas.getContext('2d');\n\n// Create a conic gradient\n// The start angle is 0\n// The centre position is 100, 100\nvar gradient = ctx.createConicGradient(0, 100, 100);\n\n// Add five color stops\ngradient.addColorStop(0, \"red\");\ngradient.addColorStop(0.25, \"orange\");\ngradient.addColorStop(0.5, \"yellow\");\ngradient.addColorStop(0.75, \"green\");\ngradient.addColorStop(1, \"blue\");\n\n// Set the fill style and draw a rectangle\nctx.fillStyle = gradient;\nctx.fillRect(20, 20, 200, 200);\n\nThe result looks like this:\n\nNew Request Headers\nFetch metadata request headers provide information about the context from which a request originated. This allows the server to make decisions about whether a request should be allowed based on where the request came from and how the resource will be used. Firefox 90 enables the following by default:\nSec-Fetch-Site\nSec-Fetch-Mode\nSec-Fetch-User\nSec-Fetch-Dest\nThe post Getting lively with Firefox 90 appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Ruth John","comments":"https://hacks.mozilla.org/2021/07/getting-lively-with-firefox-90/#comments","content":"<p>As the summer rolls around for those of us in the northern hemisphere, temperatures are high and unwinding with a cool ice tea is high on the agenda. Isn't it lucky then that Background Update is here for Windows, which means Firefox can update even if it's not running. We can just sit back and relax!</p>\n<p>Also this release we see a few nice JavaScript additions, including private fields and methods for classes, and the at() method for Array, String and TypedArray global objects.</p>\n<p>This blog post just provides a set of highlights.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/07/getting-lively-with-firefox-90/\">Getting lively with Firefox 90</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"As the summer rolls around for those of us in the northern hemisphere, temperatures are high and unwinding with a cool ice tea is high on the agenda. Isn't it lucky then that Background Update is here for Windows, which means Firefox can update even if it's not running. We can just sit back and relax!\nAlso this release we see a few nice JavaScript additions, including private fields and methods for classes, and the at() method for Array, String and TypedArray global objects.\nThis blog post just provides a set of highlights.\nThe post Getting lively with Firefox 90 appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47323","categories":["Canvas","Developer Tools","Featured Article","Firefox","Firefox Releases","JavaScript","MDN","Security","Uncategorized","firefox","firefox90","mdn","release notes"],"isoDate":"2021-07-13T15:02:10.000Z","timestamp":"7/13/2021"},{"creator":"Matthew Gaudet","title":"Implementing Private Fields for JavaScript","link":"https://hacks.mozilla.org/2021/06/implementing-private-fields-for-javascript/","pubDate":"Tue, 08 Jun 2021 15:26:19 +0000","content:encoded":"<p><em>This post is <a href=\"https://www.mgaudet.ca/technical/2021/5/4/implementing-private-fields-for-javascript\">cross-posted from Matthew Gaudet’s blog</a></em></p>\n<p>When implementing a language feature for JavaScript, an implementer must make decisions about how the language in the specification maps to the implementation. Sometimes this is fairly simple, where the specification and implementation can share much of the same terminology and algorithms. Other times, pressures in the implementation make it more challenging, requiring or pressuring the implementation strategy diverge to diverge from the language specification.</p>\n<p>Private fields is an example of where the specification language and implementation reality diverge, at least in <a href=\"https://spidermonkey.dev/\">SpiderMonkey</a>– the JavaScript engine which powers Firefox. To understand more, I’ll explain what private fields are, a couple of models for thinking about them, and explain why our implementation diverges from the specification language.</p>\n<h2 id=\"private-fields\">Private Fields</h2>\n<p>Private fields are a language feature being added to the JavaScript language through the <a href=\"https://tc39.es/\">TC39</a> <a href=\"https://tc39.es/process-document/\">proposal process</a>, as part of the <a href=\"https://github.com/tc39/proposal-class-fields\">class fields proposal</a>, which is at Stage 4 in the TC39 process. We will ship private fields and private methods in Firefox 90.</p>\n<p>The private fields proposal adds a strict notion of ‘private state’ to the language. In the following example, <code>#x</code> may only be accessed by instances of class <code>A</code>:</p>\n<pre class=\"js\"><code>class A {\n  #x = 10;\n}</code></pre>\n<p>This means that outside of the class, it is impossible to access that field. Unlike public fields for example, as the following example shows:</p>\n<pre class=\"js\"><code>class A {\n  #x = 10; // Private field\n  y = 12; // Public Field\n}\n\nvar a = new A();\na.y; // Accessing public field y: OK\na.#x; // Syntax error: reference to undeclared private field</code></pre>\n<p>Even various other tools that JavaScript gives you for interrogating objects are prevented from accessing private fields (e.g. <code>Object.getOwnProperty{Symbols,Names}</code> don’t list private fields; there’s no way to use <code>Reflect.get</code> to access them).</p>\n<h2 id=\"a-feature-three-ways\">A Feature Three Ways</h2>\n<p>When talking about a feature in JavaScript, there are often three different aspects in play: the mental model, the specification, and the implementation.</p>\n<p>The mental model provides the high-level thinking that we expect programmers to use mostly. The specification in turn provides the detail of the semantics required by the feature. The implementation can look wildly different from the specification text, so long as the specification semantics are maintained.</p>\n<p>These three aspects shouldn’t produce different results for people reasoning through things (though, sometimes a ‘mental model’ is shorthand, and doesn’t accurately capture semantics in edge case scenarios).</p>\n<p>We can look at private fields using these three aspects:</p>\n<h3 id=\"mental-model\">Mental Model</h3>\n<p>The most basic mental model one can have for private fields is what it says on the tin: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">fields</a>, but private. Now, JS fields become properties on objects, so the mental model is perhaps ‘properties that can’t be accessed from outside the class’.</p>\n<p>However, when we encounter proxies, this mental model breaks down a bit; trying to specify the semantics for ‘hidden properties’ and proxies <a href=\"https://github.com/zenparsing/es-abstract-refs/issues/11#issuecomment-65723350\">is challenging</a> (what happens when a Proxy is trying to provide access control to properties, if you aren’t supposed to be able see private fields with Proxies? Can subclasses access private fields? Do private fields participate in prototype inheritance?) . In order to preserve the desired privacy properties an alternative mental model became the way the committee thinks about private fields.</p>\n<p>This alternative model is called the ‘WeakMap’ model. In this mental model you imagine that each class has a hidden weak map associated with each private field, such that you could hypothetically <a href=\"https://en.wikipedia.org/wiki/Syntactic_sugar\">‘desugar’</a></p>\n<pre class=\"js\"><code>class A {\n  #x = 15;\n  g() {\n    return this.#x;\n  }\n}</code></pre>\n<p>into something like</p>\n<pre class=\"js\"><code>class A_desugared {\n  static InaccessibleWeakMap_x = new WeakMap();\n  constructor() {\n    A_desugared.InaccessibleWeakMap_x.set(this, 15);\n  }\n\n  g() {\n    return A_desugared.InaccessibleWeakMap_x.get(this);\n  }\n}</code></pre>\n<p>The <code>WeakMap</code> model is, surprisingly, not how the feature is written in the specification, but is an important part of the design intention is behind them. I will cover a bit later how this mental model shows up in places later.</p>\n<h3 id=\"specification\">Specification</h3>\n<p>The actual specification changes are provided by the <a href=\"https://github.com/tc39/proposal-class-fields\">class fields proposal</a>, specifically the <a href=\"https://tc39.es/proposal-class-fields/\">changes to the specification text</a>. I won’t cover every piece of this specification text, but I’ll call out specific aspects to help elucidate the differences between specification text and implementation.</p>\n<p>First, the specification adds the notion of <a href=\"https://tc39.es/proposal-class-fields/#sec-private-names\"><code>[[PrivateName]]</code></a>, which is a globally unique field identifier. This global uniqueness is to ensure that two classes cannot access each other’s fields merely by having the same name.</p>\n<pre class=\"js\"><code>function createClass() {\n  return class {\n    #x = 1;\n    static getX(o) {\n      return o.#x;\n    }\n  };\n}\n\nlet [A, B] = [0, 1].map(createClass);\nlet a = new A();\nlet b = new B();\n\nA.getX(a); // Allowed: Same class\nA.getX(b); // Type Error, because different class.</code></pre>\n<p>The specification also adds a new <a href=\"https://tc39.es/ecma262/#sec-object-internal-methods-and-internal-slots\">‘internal slot’</a>, which is a specification level piece of internal state associated with an object in the spec, called <a href=\"https://tc39.es/proposal-class-fields/#sec-private-names\"><code>[[PrivateFieldValues]]</code></a> to all objects. <code>[[PrivateFieldValues]]</code> is a list of records of the form:</p>\n<pre><code>{\n  [[PrivateName]]: Private Name,\n  [[PrivateFieldValue]]: ECMAScript value\n}</code></pre>\n<p>To manipulate this list, the specification adds four new algorithms:</p>\n<ol type=\"1\">\n<li><a href=\"https://tc39.es/proposal-class-fields/#sec-privatefieldfind\"><code>PrivateFieldFind</code></a></li>\n<li><a href=\"https://tc39.es/proposal-class-fields/#sec-privatefieldadd\"><code>PrivateFieldAdd</code></a></li>\n<li><a href=\"https://tc39.es/proposal-class-fields/#sec-privatefieldget\"><code>PrivateFieldGet</code></a></li>\n<li><a href=\"https://tc39.es/proposal-class-fields/#sec-privatefieldset\"><code>PrivateFieldSet</code></a></li>\n</ol>\n<p>These algorithms largely work as you would expect: <code>PrivateFieldAdd</code> appends an entry to the list (though, in the interest of trying to provide errors eagerly, if a matching Private Name already exists in the list, it will throw a <code>TypeError</code>. I’ll show how that can happen later). <code>PrivateFieldGet</code> retrieves a value stored in the list, keyed by a given Private name, etc.</p>\n<h4 id=\"the-constructor-override-trick\">The Constructor Override Trick</h4>\n<p>When I first started to read the specification, I was surprised to see that <code>PrivateFieldAdd</code> could throw. Given that it was only called from a constructor on the object being constructed, I had fully expected that the object would be freshly created, and therefore you’d not need to worry about a field already being there.</p>\n<p>This turns out to be possible, <a href=\"https://www.mgaudet.ca/technical/2020/7/24/investigating-the-return-behaviour-of-js-constructors\">a side effect of some of the specification’s handling of constructor return values</a>. To be more concrete, the following is an example provided to me by André Bargull, which shows this in action.</p>\n<pre class=\"js\"><code>class Base {\n  constructor(o) {\n    return o; // Note: We are returning the argument!\n  }\n}\n\nclass Stamper extends Base {\n  #x = \"stamped\";\n  static getX(o) {\n    return o.#x;\n  }\n}</code></pre>\n<p><code>Stamper</code> is a class which can ‘stamp’ its private field onto any object:</p>\n<pre class=\"js\"><code>let obj = {};\nnew Stamper(obj); // obj now has private field #x\nStamper.getX(obj); // =&gt; \"stamped\"</code></pre>\n<p>This means that when we add private fields to an object we cannot assume it doesn’t have them already. This is where the pre-existence check in <code>PrivateFieldAdd</code> comes into play:</p>\n<pre class=\"js\"><code>let obj2 = {};\nnew Stamper(obj2);\nnew Stamper(obj2); // Throws 'TypeError' due to pre-existence of private field</code></pre>\n<p>This ability to stamp private fields into arbitrary objects interacts with the WeakMap model a bit here as well. For example, given that you can stamp private fields onto any object, that means you could also stamp a private field onto a sealed object:</p>\n<pre><code>var obj3 = {};\nObject.seal(obj3);\nnew Stamper(obj3);\nStamper.getX(obj3); // =&gt; \"stamped\"</code></pre>\n<p>If you imagine private fields as properties, this is uncomfortable, because it means you’re modifying an object that was sealed by a programmer to future modification. However, using the weak map model, it is totally acceptable, as you’re only using the sealed object as a key in the weak map.</p>\n<p>PS: Just because you <em>can</em> stamp private fields into arbitrary objects, doesn’t mean you <em>should</em>: Please don’t do this.</p>\n<h3 id=\"implementing-the-specification\">Implementing the Specification</h3>\n<p>When faced with implementing the specification, there is a tension between following the letter of the specification, and doing something different to improve the implementation on some dimension.</p>\n<p>Where it is possible to implement the steps of the specification directly, we prefer to do that, as it makes maintenance of features easier as specification changes are made. SpiderMonkey does this in many places. You will see sections of code that are transcriptions of specification algorithms, <a href=\"https://searchfox.org/mozilla-central/rev/3434a9df60373a997263107e6f124fb164ddebf2/js/src/vm/JSFunction.cpp#1143-1210\">with step</a> <a href=\"https://searchfox.org/mozilla-central/rev/3434a9df60373a997263107e6f124fb164ddebf2/js/src/builtin/Array.js#7-47\">numbers for comments</a>. Following the exact letter of the specification can also be helpful where the specification is highly complex and small divergences can lead to compatibility risks.</p>\n<p>Sometimes however, there are good reasons to diverge from the specification language. JavaScript implementations have been honed for high performance for years, and there are many implementation tricks that have been applied to make that happen. Sometimes recasting a part of the specification in terms of code already written is the right thing to do, because that means the new code is also able to have the performance characteristics of the already written code.</p>\n<h4 id=\"implementing-private-names\">Implementing Private Names</h4>\n<p>The specification language for Private Names already almost matches the semantics around <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbols</code></a>, which already exist in SpiderMonkey. So adding <code>PrivateNames</code> as a special kind of <code>Symbol</code> is a fairly easy choice.</p>\n<h4 id=\"implementing-private-fields\">Implementing Private Fields</h4>\n<p>Looking at the specification for private fields, the specification implementation would be to add an extra hidden slot to every object in SpiderMonkey, which contains a reference to a list of <code>{PrivateName, Value}</code> pairs. However, implementing this directly has a number of clear downsides:</p>\n<ul>\n<li>It adds memory usage to objects without private fields</li>\n<li>It requires invasive addition of either new bytecodes or complexity to performance sensitive property access paths.</li>\n</ul>\n<p>An alternative option is to diverge from the specification language, and implement only the semantics, not the actual specification algorithms. In the majority of cases, you really <em>can</em> think of private fields as special properties on objects that are hidden from reflection or introspection outside a class.</p>\n<p>If we model private fields as properties, rather than a special side-list that is maintained with an object, we are able to take advantage of the fact that property manipulation is already extremely optimized in a JavaScript engine.</p>\n<p>However, properties are subject to reflection. So if we model private fields as object properties, we need to ensure that reflection APIs don’t reveal them, and that you can’t get access to them via Proxies.</p>\n<p>In SpiderMonkey, we elected to implement private fields as hidden properties in order to take advantage of all the optimized machinery that already exists for properties in the engine. When I started implementing this feature André Bargull – a SpiderMonkey contributor for many years – actually handed me a series of patches that had a good chunk of the private fields implementation already done, for which I was hugely grateful.</p>\n<p>Using our special PrivateName symbols, we effectively desuagar</p>\n<pre class=\"js\"><code>class A {\n  #x = 10;\n  x() {\n    return this.#x;\n  }\n}</code></pre>\n<p>to something that looks closer to</p>\n<pre class=\"js\"><code>class A_desugared {\n  constructor() {\n    this[PrivateSymbol(#x)] = 10;\n  }\n  x() {\n    return this[PrivateSymbol(#x)];\n  }\n}</code></pre>\n<p>Private fields have slightly different semantics than properties however. They are designed to issue errors on patterns expected to be programming mistakes, rather than silently accepting it. For example:</p>\n<ol type=\"1\">\n<li>Accessing an a property on an object that doesn’t have it returns <code>undefined</code>. Private fields are specified to throw a <code>TypeError</code>, as a result of the <a href=\"https://tc39.es/proposal-class-fields/#sec-privatefieldget\"><code>PrivateFieldGet</code> algorithm</a>.</li>\n<li>Setting a property on an object that doesn’t have it simply adds the property. Private fields will throw a <code>TypeError</code> in <a href=\"https://tc39.es/proposal-class-fields/#sec-privatefieldset\"><code>PrivateFieldSet</code></a>.</li>\n<li>Adding a private field to an object that already has that field also throws a <code>TypeError</code> in <a href=\"https://tc39.es/proposal-class-fields/#sec-privatefieldadd\"><code>PrivateFieldAdd</code></a>. See “The Constructor Override Trick” above for how this can happen.</li>\n</ol>\n<p>To handle the different semantics, we modified the bytecode emission for private field accesses. We added a new bytecode op, <code>CheckPrivateField</code> which verifies an object has the correct state for a given private field. This means throwing an exception if the property is missing or present, as appropriate for Get/Set or Add. <code>CheckPrivateField</code> is emitted just before using the regular ‘computed property name’ path (the one used for <code>A[someKey]</code>).</p>\n<p><code>CheckPrivateField</code> is designed such that we can easily implement an <a href=\"https://www.mgaudet.ca/technical/2018/6/5/an-inline-cache-isnt-just-a-cache\">inline cache</a> using <a href=\"https://jandemooij.nl/blog/2017/01/25/cacheir/\">CacheIR</a>. Since we are storing private fields as properties, we can use the Shape of an object as a guard, and simply return the appropriate boolean value. The Shape of an object in SpiderMonkey determines what properties it has, and where they are located in the storage for that object. Objects that have the same shape are guaranteed to have the same properties, and it’s a perfect check for an IC for <code>CheckPrivateField</code>.</p>\n<p>Other modifications we made to make to the engine include omitting private fields from the property enumeration protocol, and allowing the extension of sealed objects if we are adding private field.</p>\n<h2 id=\"proxies\">Proxies</h2>\n<p>Proxies presented us a bit of a new challenge. Concretely, using the <code>Stamper</code> class above, you can add a private field directly to a Proxy:</p>\n<pre><code>let obj3 = {};\nlet proxy = new Proxy(obj3, handler);\nnew Stamper(proxy)\n\nStamper.getX(proxy) // =&gt; \"stamped\"\nStamper.getX(obj3)  // TypeError, private field is stamped\n                    // onto the Proxy Not the target!</code></pre>\n<p>I definitely found this surprising initially. The reason I found this surprising was I had expected that, like other operations, the addition of a private field would tunnel through the proxy to the target. However, once I was able to internalize the WeakMap mental model, I was able to understand this example much better. The trick is that in the WeakMap model, it is the <code>Proxy</code>, not the target object, used as the key in the <code>#x</code> WeakMap.</p>\n<p>These semantics presented a challenge to our implementation choice to model private fields as hidden properties however, as SpiderMonkey’s Proxies are highly specialized objects that do not have room for arbitrary properties. In order to support this case, we added a new reserved slot for an ‘expando’ object. The expando is an object allocated lazily that acts as the holder for dynamically added properties on the proxy. This pattern is used already for DOM objects, which are typically implemented as C++ objects with no room for extra properties. So if you write <code>document.foo = \"hi\"</code>, this allocates an expando object for <code>document</code>, and puts the <code>foo</code> property and value in there instead. Returning to private fields, when <code>#x</code> is accessed on a Proxy, the proxy code knows to go and look in the expando object for that property.</p>\n<h2 id=\"in-conclusion\">In Conclusion</h2>\n<p>Private Fields is an instance of implementing a JavaScript language feature where directly implementing the specification as written would be less performant than re-casting the specification in terms of already optimized engine primitives. Yet, that recasting itself can require some problem solving not present in the specification.</p>\n<p>At the end, I am fairly happy with the choices made for our implementation of Private Fields, and am excited to see it finally enter the world!</p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>I have to thank, again, André Bargull, who provided the first set of patches and laid down an excellent trail for me to follow. His work made finishing private fields much easier, as he’d already put a lot of thought into decision making.</p>\n<p>Jason Orendorff has been an excellent and patient mentor as I have worked through this implementation, including two separate implementations of the private field bytecode, as well as two separate implementations of proxy support.</p>\n<p>Thanks to Caroline Cullen, and Iain Ireland for helping to read drafts of this post, and to Steve Fink for fixing many typos.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/06/implementing-private-fields-for-javascript/\">Implementing Private Fields for JavaScript</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"This post is cross-posted from Matthew Gaudet’s blog\nWhen implementing a language feature for JavaScript, an implementer must make decisions about how the language in the specification maps to the implementation. Sometimes this is fairly simple, where the specification and implementation can share much of the same terminology and algorithms. Other times, pressures in the implementation make it more challenging, requiring or pressuring the implementation strategy diverge to diverge from the language specification.\nPrivate fields is an example of where the specification language and implementation reality diverge, at least in SpiderMonkey– the JavaScript engine which powers Firefox. To understand more, I’ll explain what private fields are, a couple of models for thinking about them, and explain why our implementation diverges from the specification language.\nPrivate Fields\nPrivate fields are a language feature being added to the JavaScript language through the TC39 proposal process, as part of the class fields proposal, which is at Stage 4 in the TC39 process. We will ship private fields and private methods in Firefox 90.\nThe private fields proposal adds a strict notion of ‘private state’ to the language. In the following example, #x may only be accessed by instances of class A:\nclass A {\n  #x = 10;\n}\nThis means that outside of the class, it is impossible to access that field. Unlike public fields for example, as the following example shows:\nclass A {\n  #x = 10; // Private field\n  y = 12; // Public Field\n}\n\nvar a = new A();\na.y; // Accessing public field y: OK\na.#x; // Syntax error: reference to undeclared private field\nEven various other tools that JavaScript gives you for interrogating objects are prevented from accessing private fields (e.g. Object.getOwnProperty{Symbols,Names} don’t list private fields; there’s no way to use Reflect.get to access them).\nA Feature Three Ways\nWhen talking about a feature in JavaScript, there are often three different aspects in play: the mental model, the specification, and the implementation.\nThe mental model provides the high-level thinking that we expect programmers to use mostly. The specification in turn provides the detail of the semantics required by the feature. The implementation can look wildly different from the specification text, so long as the specification semantics are maintained.\nThese three aspects shouldn’t produce different results for people reasoning through things (though, sometimes a ‘mental model’ is shorthand, and doesn’t accurately capture semantics in edge case scenarios).\nWe can look at private fields using these three aspects:\nMental Model\nThe most basic mental model one can have for private fields is what it says on the tin: fields, but private. Now, JS fields become properties on objects, so the mental model is perhaps ‘properties that can’t be accessed from outside the class’.\nHowever, when we encounter proxies, this mental model breaks down a bit; trying to specify the semantics for ‘hidden properties’ and proxies is challenging (what happens when a Proxy is trying to provide access control to properties, if you aren’t supposed to be able see private fields with Proxies? Can subclasses access private fields? Do private fields participate in prototype inheritance?) . In order to preserve the desired privacy properties an alternative mental model became the way the committee thinks about private fields.\nThis alternative model is called the ‘WeakMap’ model. In this mental model you imagine that each class has a hidden weak map associated with each private field, such that you could hypothetically ‘desugar’\nclass A {\n  #x = 15;\n  g() {\n    return this.#x;\n  }\n}\ninto something like\nclass A_desugared {\n  static InaccessibleWeakMap_x = new WeakMap();\n  constructor() {\n    A_desugared.InaccessibleWeakMap_x.set(this, 15);\n  }\n\n  g() {\n    return A_desugared.InaccessibleWeakMap_x.get(this);\n  }\n}\nThe WeakMap model is, surprisingly, not how the feature is written in the specification, but is an important part of the design intention is behind them. I will cover a bit later how this mental model shows up in places later.\nSpecification\nThe actual specification changes are provided by the class fields proposal, specifically the changes to the specification text. I won’t cover every piece of this specification text, but I’ll call out specific aspects to help elucidate the differences between specification text and implementation.\nFirst, the specification adds the notion of [[PrivateName]], which is a globally unique field identifier. This global uniqueness is to ensure that two classes cannot access each other’s fields merely by having the same name.\nfunction createClass() {\n  return class {\n    #x = 1;\n    static getX(o) {\n      return o.#x;\n    }\n  };\n}\n\nlet [A, B] = [0, 1].map(createClass);\nlet a = new A();\nlet b = new B();\n\nA.getX(a); // Allowed: Same class\nA.getX(b); // Type Error, because different class.\nThe specification also adds a new ‘internal slot’, which is a specification level piece of internal state associated with an object in the spec, called [[PrivateFieldValues]] to all objects. [[PrivateFieldValues]] is a list of records of the form:\n{\n  [[PrivateName]]: Private Name,\n  [[PrivateFieldValue]]: ECMAScript value\n}\nTo manipulate this list, the specification adds four new algorithms:\nPrivateFieldFind\nPrivateFieldAdd\nPrivateFieldGet\nPrivateFieldSet\nThese algorithms largely work as you would expect: PrivateFieldAdd appends an entry to the list (though, in the interest of trying to provide errors eagerly, if a matching Private Name already exists in the list, it will throw a TypeError. I’ll show how that can happen later). PrivateFieldGet retrieves a value stored in the list, keyed by a given Private name, etc.\nThe Constructor Override Trick\nWhen I first started to read the specification, I was surprised to see that PrivateFieldAdd could throw. Given that it was only called from a constructor on the object being constructed, I had fully expected that the object would be freshly created, and therefore you’d not need to worry about a field already being there.\nThis turns out to be possible, a side effect of some of the specification’s handling of constructor return values. To be more concrete, the following is an example provided to me by André Bargull, which shows this in action.\nclass Base {\n  constructor(o) {\n    return o; // Note: We are returning the argument!\n  }\n}\n\nclass Stamper extends Base {\n  #x = \"stamped\";\n  static getX(o) {\n    return o.#x;\n  }\n}\nStamper is a class which can ‘stamp’ its private field onto any object:\nlet obj = {};\nnew Stamper(obj); // obj now has private field #x\nStamper.getX(obj); // => \"stamped\"\nThis means that when we add private fields to an object we cannot assume it doesn’t have them already. This is where the pre-existence check in PrivateFieldAdd comes into play:\nlet obj2 = {};\nnew Stamper(obj2);\nnew Stamper(obj2); // Throws 'TypeError' due to pre-existence of private field\nThis ability to stamp private fields into arbitrary objects interacts with the WeakMap model a bit here as well. For example, given that you can stamp private fields onto any object, that means you could also stamp a private field onto a sealed object:\nvar obj3 = {};\nObject.seal(obj3);\nnew Stamper(obj3);\nStamper.getX(obj3); // => \"stamped\"\nIf you imagine private fields as properties, this is uncomfortable, because it means you’re modifying an object that was sealed by a programmer to future modification. However, using the weak map model, it is totally acceptable, as you’re only using the sealed object as a key in the weak map.\nPS: Just because you can stamp private fields into arbitrary objects, doesn’t mean you should: Please don’t do this.\nImplementing the Specification\nWhen faced with implementing the specification, there is a tension between following the letter of the specification, and doing something different to improve the implementation on some dimension.\nWhere it is possible to implement the steps of the specification directly, we prefer to do that, as it makes maintenance of features easier as specification changes are made. SpiderMonkey does this in many places. You will see sections of code that are transcriptions of specification algorithms, with step numbers for comments. Following the exact letter of the specification can also be helpful where the specification is highly complex and small divergences can lead to compatibility risks.\nSometimes however, there are good reasons to diverge from the specification language. JavaScript implementations have been honed for high performance for years, and there are many implementation tricks that have been applied to make that happen. Sometimes recasting a part of the specification in terms of code already written is the right thing to do, because that means the new code is also able to have the performance characteristics of the already written code.\nImplementing Private Names\nThe specification language for Private Names already almost matches the semantics around Symbols, which already exist in SpiderMonkey. So adding PrivateNames as a special kind of Symbol is a fairly easy choice.\nImplementing Private Fields\nLooking at the specification for private fields, the specification implementation would be to add an extra hidden slot to every object in SpiderMonkey, which contains a reference to a list of {PrivateName, Value} pairs. However, implementing this directly has a number of clear downsides:\nIt adds memory usage to objects without private fields\nIt requires invasive addition of either new bytecodes or complexity to performance sensitive property access paths.\nAn alternative option is to diverge from the specification language, and implement only the semantics, not the actual specification algorithms. In the majority of cases, you really can think of private fields as special properties on objects that are hidden from reflection or introspection outside a class.\nIf we model private fields as properties, rather than a special side-list that is maintained with an object, we are able to take advantage of the fact that property manipulation is already extremely optimized in a JavaScript engine.\nHowever, properties are subject to reflection. So if we model private fields as object properties, we need to ensure that reflection APIs don’t reveal them, and that you can’t get access to them via Proxies.\nIn SpiderMonkey, we elected to implement private fields as hidden properties in order to take advantage of all the optimized machinery that already exists for properties in the engine. When I started implementing this feature André Bargull – a SpiderMonkey contributor for many years – actually handed me a series of patches that had a good chunk of the private fields implementation already done, for which I was hugely grateful.\nUsing our special PrivateName symbols, we effectively desuagar\nclass A {\n  #x = 10;\n  x() {\n    return this.#x;\n  }\n}\nto something that looks closer to\nclass A_desugared {\n  constructor() {\n    this[PrivateSymbol(#x)] = 10;\n  }\n  x() {\n    return this[PrivateSymbol(#x)];\n  }\n}\nPrivate fields have slightly different semantics than properties however. They are designed to issue errors on patterns expected to be programming mistakes, rather than silently accepting it. For example:\nAccessing an a property on an object that doesn’t have it returns undefined. Private fields are specified to throw a TypeError, as a result of the PrivateFieldGet algorithm.\nSetting a property on an object that doesn’t have it simply adds the property. Private fields will throw a TypeError in PrivateFieldSet.\nAdding a private field to an object that already has that field also throws a TypeError in PrivateFieldAdd. See “The Constructor Override Trick” above for how this can happen.\nTo handle the different semantics, we modified the bytecode emission for private field accesses. We added a new bytecode op, CheckPrivateField which verifies an object has the correct state for a given private field. This means throwing an exception if the property is missing or present, as appropriate for Get/Set or Add. CheckPrivateField is emitted just before using the regular ‘computed property name’ path (the one used for A[someKey]).\nCheckPrivateField is designed such that we can easily implement an inline cache using CacheIR. Since we are storing private fields as properties, we can use the Shape of an object as a guard, and simply return the appropriate boolean value. The Shape of an object in SpiderMonkey determines what properties it has, and where they are located in the storage for that object. Objects that have the same shape are guaranteed to have the same properties, and it’s a perfect check for an IC for CheckPrivateField.\nOther modifications we made to make to the engine include omitting private fields from the property enumeration protocol, and allowing the extension of sealed objects if we are adding private field.\nProxies\nProxies presented us a bit of a new challenge. Concretely, using the Stamper class above, you can add a private field directly to a Proxy:\nlet obj3 = {};\nlet proxy = new Proxy(obj3, handler);\nnew Stamper(proxy)\n\nStamper.getX(proxy) // => \"stamped\"\nStamper.getX(obj3)  // TypeError, private field is stamped\n                    // onto the Proxy Not the target!\nI definitely found this surprising initially. The reason I found this surprising was I had expected that, like other operations, the addition of a private field would tunnel through the proxy to the target. However, once I was able to internalize the WeakMap mental model, I was able to understand this example much better. The trick is that in the WeakMap model, it is the Proxy, not the target object, used as the key in the #x WeakMap.\nThese semantics presented a challenge to our implementation choice to model private fields as hidden properties however, as SpiderMonkey’s Proxies are highly specialized objects that do not have room for arbitrary properties. In order to support this case, we added a new reserved slot for an ‘expando’ object. The expando is an object allocated lazily that acts as the holder for dynamically added properties on the proxy. This pattern is used already for DOM objects, which are typically implemented as C++ objects with no room for extra properties. So if you write document.foo = \"hi\", this allocates an expando object for document, and puts the foo property and value in there instead. Returning to private fields, when #x is accessed on a Proxy, the proxy code knows to go and look in the expando object for that property.\nIn Conclusion\nPrivate Fields is an instance of implementing a JavaScript language feature where directly implementing the specification as written would be less performant than re-casting the specification in terms of already optimized engine primitives. Yet, that recasting itself can require some problem solving not present in the specification.\nAt the end, I am fairly happy with the choices made for our implementation of Private Fields, and am excited to see it finally enter the world!\nAcknowledgements\nI have to thank, again, André Bargull, who provided the first set of patches and laid down an excellent trail for me to follow. His work made finishing private fields much easier, as he’d already put a lot of thought into decision making.\nJason Orendorff has been an excellent and patient mentor as I have worked through this implementation, including two separate implementations of the private field bytecode, as well as two separate implementations of proxy support.\nThanks to Caroline Cullen, and Iain Ireland for helping to read drafts of this post, and to Steve Fink for fixing many typos.\nThe post Implementing Private Fields for JavaScript appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Matthew Gaudet","comments":"https://hacks.mozilla.org/2021/06/implementing-private-fields-for-javascript/#comments","content":"<p>When implementing a language feature for JavaScript, an implementer must make decisions about how the language in the specification maps to the implementation. Private fields is an example of where the specification language and implementation reality diverge, at least in SpiderMonkey– the JavaScript engine which powers Firefox. To understand more, I’ll explain what private fields are, a couple of models for thinking about them, and explain why our implementation diverges from the specification language.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/06/implementing-private-fields-for-javascript/\">Implementing Private Fields for JavaScript</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"When implementing a language feature for JavaScript, an implementer must make decisions about how the language in the specification maps to the implementation. Private fields is an example of where the specification language and implementation reality diverge, at least in SpiderMonkey– the JavaScript engine which powers Firefox. To understand more, I’ll explain what private fields are, a couple of models for thinking about them, and explain why our implementation diverges from the specification language.\nThe post Implementing Private Fields for JavaScript appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47312","categories":["Featured Article","Firefox","JavaScript","firefox","private fields","SpiderMonkey"],"isoDate":"2021-06-08T15:26:19.000Z","timestamp":"6/8/2021"},{"creator":"Chris Mills","title":"Looking fine with Firefox 89","link":"https://hacks.mozilla.org/2021/06/looking-fine-with-firefox-89/","pubDate":"Tue, 01 Jun 2021 15:19:01 +0000","content:encoded":"<p>While we&#8217;re sitting here feeling a bit frumpy after a year with reduced activity, Firefox 89 has smartened up and brings with it a slimmed down, slightly more minimalist interface.</p>\n<p>Along with this new look, we get some great styling features including a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors\"><code>force-colors</code></a> feature for media queries and better control over how fonts are displayed. The long awaited <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#top-level-await\">top-level <code>await</code></a> keyword for JavaScript modules is now enabled, as well as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEventTiming\"><code>PerformanceEventTiming</code></a> interface, which is another addition to the performance suite of APIs: 89 really has been working out!</p>\n<p>This blog post provides merely a set of highlights; for all the details, check out the following:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/89\">Firefox 89 for developers on MDN</a></li>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/89.0/releasenotes/\">Firefox 89 end-user release notes</a></li>\n</ul>\n<h2>forced-colors media feature</h2>\n<p>The <code>forced-colors</code> CSS media feature detects if a user agent restricts the color palette used on a web page. For instance Windows has a <em>High Contrast</em> mode. If it&#8217;s turned on, using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors\"><code>forced-colors: active</code></a> within a CSS media query would apply the styles nested inside.</p>\n<p>In this example we have a <code>.button</code> class that declares a <code>box-shadow</code> property, giving any HTML element using that class a nice drop-shadow.</p>\n<p>If <code>forced-colors</code> mode is active, this shadow would not be rendered, so instead we&#8217;re declaring a border to make up for the shadow loss:</p>\n<pre><code class=\"language-css\">.button {\n  border: 0;\n  padding: 10px;\n  box-shadow: -2px -2px 5px gray, 2px 2px 5px gray;\n}\n\n@media (forced-colors: active) {\n  .button {\n    /* Use a border instead, since box-shadow is forced to 'none' in forced-colors mode */\n    border: 2px ButtonText solid;\n  }\n}</code></pre>\n<h2>Better control for displayed fonts</h2>\n<p>Firefox 89 brings with it the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/line-gap-override\"><code>line-gap-override</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/ascent-override\"><code>ascent-override</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/descent-override\"><code>descent-override</code></a> CSS properties. These allow developers more control over how fonts are displayed. The following snippet shows just how useful these properties are when using a local fallback font:</p>\n<pre><code class=\"language-css\">@font-face {\n  font-family: web-font;\n  src: url(\"&lt;https://example.com/font.woff&gt;\");\n}\n\n@font-face {\n  font-family: local-font;\n  src: local(Local Font);\n  ascent-override: 90%;\n  descent-override: 110%;\n  line-gap-override: 120%;\n}</code></pre>\n<p>These new properties help to reduce layout shift when fonts are loading, as developers can better match the intricacies of a local font with a web font. They work alongside the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/size-adjust\"><code>size-adjust</code></a> property which is currently behind a <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Experimental_features#descriptor_size_adjust\">preference in Firefox 89</a>.</p>\n<h2>Top-level await</h2>\n<p>If you&#8217;ve been writing JavaScript over the past few years you&#8217;ve more than likely become familiar with <code>async</code> functions. Now the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#top-level-await\"><code>await</code> keyword</a>, usually confined to use within an <code>async</code> function, has been given independence and allowed to go it alone. As long as it stays within <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#top_level_await\">modules</a> that is.</p>\n<p>In short, this means JavaScript modules that have child modules using top level await wait for that child to execute before they themselves run. All while not blocking other child modules from loading.</p>\n<p>Here is a very small example of a module using the &gt;a href=&#8221;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&#8221;&gt;Fetch API and specifying <code>await</code> within the <code>export</code> statement. Any modules that include this will wait for the fetch to resolve before running any code.</p>\n<pre><code class=\"language-js\">// fetch request\nconst colors = fetch('../data/colors.json')\n  .then(response =&gt; response.json());\n\nexport default await colors;</code></pre>\n<h2>PerformanceEventTiming</h2>\n<p>A new look can&#8217;t go unnoticed without mentioning performance. There&#8217;s a plethora of Performance APIs, which give developers granular power over their own bespoke performance tests. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEventTiming\"><code>PerformanceEventTiming</code></a> interface is now available in Firefox 89 and provides timing information for a whole array of events. It adds yet another extremely useful feature for developers by cleverly giving information about when a user-triggered event starts and when it ends. A very welcome addition to the new release.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/06/looking-fine-with-firefox-89/\">Looking fine with Firefox 89</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"While we’re sitting here feeling a bit frumpy after a year with reduced activity, Firefox 89 has smartened up and brings with it a slimmed down, slightly more minimalist interface.\nAlong with this new look, we get some great styling features including a force-colors feature for media queries and better control over how fonts are displayed. The long awaited top-level await keyword for JavaScript modules is now enabled, as well as the PerformanceEventTiming interface, which is another addition to the performance suite of APIs: 89 really has been working out!\nThis blog post provides merely a set of highlights; for all the details, check out the following:\nFirefox 89 for developers on MDN\nFirefox 89 end-user release notes\nforced-colors media feature\nThe forced-colors CSS media feature detects if a user agent restricts the color palette used on a web page. For instance Windows has a High Contrast mode. If it’s turned on, using forced-colors: active within a CSS media query would apply the styles nested inside.\nIn this example we have a .button class that declares a box-shadow property, giving any HTML element using that class a nice drop-shadow.\nIf forced-colors mode is active, this shadow would not be rendered, so instead we’re declaring a border to make up for the shadow loss:\n.button {\n  border: 0;\n  padding: 10px;\n  box-shadow: -2px -2px 5px gray, 2px 2px 5px gray;\n}\n\n@media (forced-colors: active) {\n  .button {\n    /* Use a border instead, since box-shadow is forced to 'none' in forced-colors mode */\n    border: 2px ButtonText solid;\n  }\n}\nBetter control for displayed fonts\nFirefox 89 brings with it the line-gap-override, ascent-override and descent-override CSS properties. These allow developers more control over how fonts are displayed. The following snippet shows just how useful these properties are when using a local fallback font:\n@font-face {\n  font-family: web-font;\n  src: url(\"<https://example.com/font.woff>\");\n}\n\n@font-face {\n  font-family: local-font;\n  src: local(Local Font);\n  ascent-override: 90%;\n  descent-override: 110%;\n  line-gap-override: 120%;\n}\nThese new properties help to reduce layout shift when fonts are loading, as developers can better match the intricacies of a local font with a web font. They work alongside the size-adjust property which is currently behind a preference in Firefox 89.\nTop-level await\nIf you’ve been writing JavaScript over the past few years you’ve more than likely become familiar with async functions. Now the await keyword, usually confined to use within an async function, has been given independence and allowed to go it alone. As long as it stays within modules that is.\nIn short, this means JavaScript modules that have child modules using top level await wait for that child to execute before they themselves run. All while not blocking other child modules from loading.\nHere is a very small example of a module using the >a href=”https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API”>Fetch API and specifying await within the export statement. Any modules that include this will wait for the fetch to resolve before running any code.\n// fetch request\nconst colors = fetch('../data/colors.json')\n  .then(response => response.json());\n\nexport default await colors;\nPerformanceEventTiming\nA new look can’t go unnoticed without mentioning performance. There’s a plethora of Performance APIs, which give developers granular power over their own bespoke performance tests. The PerformanceEventTiming interface is now available in Firefox 89 and provides timing information for a whole array of events. It adds yet another extremely useful feature for developers by cleverly giving information about when a user-triggered event starts and when it ends. A very welcome addition to the new release.\nThe post Looking fine with Firefox 89 appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Chris Mills","content":"<p>Firefox 89 has smartened up and brings with it a slimmed-down, slightly more minimalist interface.</p>\n<p>Along with this new look, we get some great styling features including a force-colours feature for media queries and better control over how fonts are displayed. The long-awaited top-level await keyword for JavaScript modules is now enabled, as well as the PerformanceEventTiming interface, which is another addition to the performance suite of APIs: 89 really has been working out!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/06/looking-fine-with-firefox-89/\">Looking fine with Firefox 89</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"Firefox 89 has smartened up and brings with it a slimmed-down, slightly more minimalist interface.\nAlong with this new look, we get some great styling features including a force-colours feature for media queries and better control over how fonts are displayed. The long-awaited top-level await keyword for JavaScript modules is now enabled, as well as the PerformanceEventTiming interface, which is another addition to the performance suite of APIs: 89 really has been working out!\nThe post Looking fine with Firefox 89 appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47303","categories":["Featured Article","Firefox","Firefox Releases","MDN","css","firefox","JavaScript"],"isoDate":"2021-06-01T15:19:01.000Z","timestamp":"6/1/2021"},{"creator":"Gabriele Svelto","title":"Improving Firefox stability on Linux","link":"https://hacks.mozilla.org/2021/05/improving-firefox-stability-on-linux/","pubDate":"Wed, 19 May 2021 14:28:53 +0000","content:encoded":"<p>Roughly a year ago at Mozilla we started an effort to improve Firefox stability on Linux. This effort quickly became an example of good synergies between FOSS projects.</p>\n<p>Every time Firefox crashes, the user can send us a crash report which we use to analyze the problem and hopefully fix it:</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-47180\" src=\"https://hacks.mozilla.org/files/2021/04/image2.png\" alt=\"A screenshot of a tab that justc crashed\" width=\"893\" height=\"812\" srcset=\"https://hacks.mozilla.org/files/2021/04/image2.png 893w, https://hacks.mozilla.org/files/2021/04/image2-250x227.png 250w, https://hacks.mozilla.org/files/2021/04/image2-500x455.png 500w, https://hacks.mozilla.org/files/2021/04/image2-768x698.png 768w\" sizes=\"(max-width: 893px) 100vw, 893px\" /></p>\n<p>This report contains, among other things, a minidump: a small snapshot of the process memory at the time it crashed. This includes the contents of the processor&#8217;s registers as well as data from the stacks of every thread.</p>\n<p>Here’s what this usually looks like:</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-47188\" src=\"https://hacks.mozilla.org/files/2021/04/image4.png\" alt=\"\" width=\"1253\" height=\"596\" srcset=\"https://hacks.mozilla.org/files/2021/04/image4.png 1253w, https://hacks.mozilla.org/files/2021/04/image4-250x119.png 250w, https://hacks.mozilla.org/files/2021/04/image4-500x238.png 500w, https://hacks.mozilla.org/files/2021/04/image4-768x365.png 768w\" sizes=\"(max-width: 1253px) 100vw, 1253px\" /></p>\n<p>If you&#8217;re familiar with core dumps, then minidumps are essentially a smaller version of them. The minidump format was originally designed at Microsoft and Windows has a native way of writing out minidumps. On Linux, we use Breakpad for this task. Breakpad originated at Google for their software (Picasa, Google Earth, etc&#8230;) but we have forked, heavily modified for our purposes and recently partly rewrote it in Rust.</p>\n<p>Once the user submits a crash report, we have a server-side component &#8211; called Socorro &#8211; that processes it and extracts a stack trace from the minidump. The reports are then clustered based on the top method name of the stack trace of the crashing thread. When a new crash is spotted we assign it a bug and start working on it. See the picture below for an example of how crashes are grouped:</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-47184\" src=\"https://hacks.mozilla.org/files/2021/04/image3.png\" alt=\"The snapshot of a stack trace as displayed on crash-stats.mozilla.com\" width=\"1827\" height=\"250\" srcset=\"https://hacks.mozilla.org/files/2021/04/image3.png 1827w, https://hacks.mozilla.org/files/2021/04/image3-250x34.png 250w, https://hacks.mozilla.org/files/2021/04/image3-500x68.png 500w, https://hacks.mozilla.org/files/2021/04/image3-768x105.png 768w, https://hacks.mozilla.org/files/2021/04/image3-1536x210.png 1536w\" sizes=\"(max-width: 1827px) 100vw, 1827px\" /></p>\n<p>To extract a meaningful stack trace from a minidump two more things are needed: unwinding information and symbols. The unwinding information is a set of instructions that describe how to find the various frames in the stack given an instruction pointer. Symbol information contains the names of the functions corresponding to a given range of addresses as well as the source files they come from and the line numbers a given instruction corresponds to.</p>\n<p>In regular Firefox releases, we extract this information from the build files and store it into symbol files in Breakpad standard format. Equipped with this information Socorro can produce a human-readable stack trace. The whole flow can be seen below:</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-47200\" src=\"https://hacks.mozilla.org/files/2021/04/image7.png\" alt=\"A graphicsl representation of our crash reporting flow, from the capture on the client to processing on the server\" width=\"708\" height=\"774\" srcset=\"https://hacks.mozilla.org/files/2021/04/image7.png 708w, https://hacks.mozilla.org/files/2021/04/image7-250x273.png 250w, https://hacks.mozilla.org/files/2021/04/image7-500x547.png 500w\" sizes=\"(max-width: 708px) 100vw, 708px\" /></p>\n<p>Here’s an example of a proper stack trace:</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-47176 size-full\" src=\"https://hacks.mozilla.org/files/2021/04/image1.png\" alt=\"A fully symbolicated stack trace\" width=\"1776\" height=\"620\" srcset=\"https://hacks.mozilla.org/files/2021/04/image1.png 1776w, https://hacks.mozilla.org/files/2021/04/image1-250x87.png 250w, https://hacks.mozilla.org/files/2021/04/image1-500x175.png 500w, https://hacks.mozilla.org/files/2021/04/image1-768x268.png 768w, https://hacks.mozilla.org/files/2021/04/image1-1536x536.png 1536w\" sizes=\"(max-width: 1776px) 100vw, 1776px\" /></p>\n<p>If Socorro doesn’t have access to the appropriate symbol files for a crash the resulting trace contains only addresses and isn’t very helpful:</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-47196\" src=\"https://hacks.mozilla.org/files/2021/04/image6.png\" alt=\"A stack trace showing raw addresses instead of symbols\" width=\"859\" height=\"334\" srcset=\"https://hacks.mozilla.org/files/2021/04/image6.png 859w, https://hacks.mozilla.org/files/2021/04/image6-250x97.png 250w, https://hacks.mozilla.org/files/2021/04/image6-500x194.png 500w, https://hacks.mozilla.org/files/2021/04/image6-768x299.png 768w\" sizes=\"(max-width: 859px) 100vw, 859px\" /></p>\n<p>When it comes to Linux things work differently than on other platforms: most of our users do not install our builds, they install the Firefox version that comes packaged for their favourite distribution.</p>\n<p>This posed a significant problem when dealing with stability issues on Linux: for the majority of our crash reports, we couldn&#8217;t produce high-quality stack traces because we didn&#8217;t have the required symbol information. The Firefox builds that submitted the reports weren’t done by us. To make matters worse, Firefox depends on a number of third-party packages (such as GTK, Mesa, FFmpeg, SQLite, etc.). We wouldn&#8217;t get good stack traces if a crash occurred in one of these packages instead of Firefox itself because we didn&#8217;t have symbols for them either.</p>\n<p>To address this issue, we started scraping debug information for Firefox builds and their dependencies from the package repositories of multiple distributions: Arch, Debian, Fedora, OpenSUSE and Ubuntu. Since every distribution does things a little bit differently, we had to write distro-specific scripts that would go through the list of packages in their repositories and find the associated debug information (the scripts are available <a href=\"https://github.com/gabrielesvelto/symbol-scrapers/\">here</a>). This data is then fed into a tool that extracts symbol files from the debug information and uploads it to our symbol server.</p>\n<p>With that information now available, we were able to analyze &gt;99% of the crash reports we received from Linux users, up from less than 20%. Here’s an example of a high-quality trace extracted from a distro-packaged version of Firefox. We haven’t built any of the libraries involved yet the function names are present and so are the file and line numbers of the affected code:</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-47192\" src=\"https://hacks.mozilla.org/files/2021/04/image5.png\" alt=\"A fully symbolicated stack trace including external code\" width=\"1452\" height=\"799\" srcset=\"https://hacks.mozilla.org/files/2021/04/image5.png 1452w, https://hacks.mozilla.org/files/2021/04/image5-250x138.png 250w, https://hacks.mozilla.org/files/2021/04/image5-500x275.png 500w, https://hacks.mozilla.org/files/2021/04/image5-768x423.png 768w\" sizes=\"(max-width: 1452px) 100vw, 1452px\" /></p>\n<p>The importance of this cannot be overestimated: Linux users tend to be more tech-savvy and are more likely to help us solve issues, so all those reports were a treasure trove for improving stability even for other operating systems (Windows, Mac, Android, etc). In particular, we often identified <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1633459\">Fission bugs</a> on Linux first.</p>\n<p>The first effect of this newfound ability to inspect Linux crashes is that it greatly sped up our response time to Linux-specific issues, and often allowed us to identify problems in the Nightly and Beta versions of Firefox before they reached users on the release channel.</p>\n<p>We could also quickly identify issues in bleeding-edge components such as <a href=\"https://github.com/servo/webrender\">WebRender</a>, <a href=\"https://hacks.mozilla.org/2020/04/experimental-webgpu-in-firefox/\">WebGPU</a>, <a href=\"https://fedoraproject.org/wiki/Changes/Firefox_Wayland_By_Default_On_Gnome\">Wayland</a> and VA-API video acceleration; oftentimes providing a fix within days of the change that triggered the issue.</p>\n<p>We didn&#8217;t stop there: we could now identify distro-specific issues and regressions. This allowed us to inform package maintainers of the problems and have them resolved quickly. For example, we were able to identify a Debian-specific issue only two weeks after it was introduced and fixed it right away. The crash was caused by a modification made by Debian to one of Firefox dependencies that could cause a crash on startup, it’s filed under bug <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1679430\">1679430</a> if you’re curious about the details.</p>\n<p>Another good example comes from Fedora: they had been using their own crash reporting system (ABRT) to catch Firefox crashes in their Firefox builds, but given the improvements on our side <a href=\"https://src.fedoraproject.org/rpms/firefox/c/de27f20acc7bdf391ccb1b571a9cb2061fc2dc3c?branch=master\">they started sending Firefox crashes our way instead</a>.</p>\n<p>We could also finally identify regressions and issues in our dependencies. This allowed us to communicate the issues upstream and sometimes even contributed fixes, benefiting both our users and theirs.</p>\n<p>For example, at some point, Debian updated the fontconfig package by backporting an upstream fix for a memory leak. Unfortunately, the fix contained a bug that <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1633467\">would crash Firefox</a> and possibly other software too. We spotted the new crash only six days after the change landed in Debian sources and only a couple of weeks afterwards the issue had been fixed both upstream and in Debian. We sent reports and fixes to other projects too including <a href=\"https://gitlab.freedesktop.org/mesa/mesa/-/issues/3066\">Mesa</a>, GTK, <a href=\"https://gitlab.gnome.org/GNOME/glib/-/issues/954\">glib</a>, <a href=\"https://github.com/LudovicRousseau/PCSC/issues/51\">PCSC</a>, SQLite and more.</p>\n<p>Nightly versions of Firefox also include a tool to spot security-sensitive issues: <a href=\"https://groups.google.com/g/mozilla.dev.platform/c/AyECjDNsqUE/m/Jd7Jr4cXAgAJ\">the probabilistic heap checker</a>. This tool randomly pads a handful of memory allocations in order to detect buffer overflows and use-after-free accesses. When it detects one of these, it sends us a very detailed crash report. Given Firefox&#8217;s large user-base on Linux, this allowed us to spot some elusive issues in upstream projects and report them.</p>\n<p>This also exposed some limitations in the tools we use for crash analysis, so we decided to rewrite them in Rust largely relying on the excellent crates developed by Sentry. The resulting tools were dramatically faster than our old ones, used a fraction of the memory and produced more accurate results. Code flowed both ways: we contributed improvements to their crates (and their dependencies) while they expanded their APIs to address our new use-cases and fixed the issues we discovered.</p>\n<p>Another pleasant side-effect of this work is that Thunderbird now also benefits from the improvement we made for Firefox.</p>\n<p>This goes on to show how collaboration between FOSS projects not only benefits their users but ultimately improves the whole ecosystem and the broader community that relies on it.</p>\n<p>Special thanks to Calixte Denizet, Nicholas Nethercote, Jan Auer and all the others that contributed to this effort!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/05/improving-firefox-stability-on-linux/\">Improving Firefox stability on Linux</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"Roughly a year ago at Mozilla we started an effort to improve Firefox stability on Linux. This effort quickly became an example of good synergies between FOSS projects.\nEvery time Firefox crashes, the user can send us a crash report which we use to analyze the problem and hopefully fix it:\n\nThis report contains, among other things, a minidump: a small snapshot of the process memory at the time it crashed. This includes the contents of the processor’s registers as well as data from the stacks of every thread.\nHere’s what this usually looks like:\n\nIf you’re familiar with core dumps, then minidumps are essentially a smaller version of them. The minidump format was originally designed at Microsoft and Windows has a native way of writing out minidumps. On Linux, we use Breakpad for this task. Breakpad originated at Google for their software (Picasa, Google Earth, etc…) but we have forked, heavily modified for our purposes and recently partly rewrote it in Rust.\nOnce the user submits a crash report, we have a server-side component – called Socorro – that processes it and extracts a stack trace from the minidump. The reports are then clustered based on the top method name of the stack trace of the crashing thread. When a new crash is spotted we assign it a bug and start working on it. See the picture below for an example of how crashes are grouped:\n\nTo extract a meaningful stack trace from a minidump two more things are needed: unwinding information and symbols. The unwinding information is a set of instructions that describe how to find the various frames in the stack given an instruction pointer. Symbol information contains the names of the functions corresponding to a given range of addresses as well as the source files they come from and the line numbers a given instruction corresponds to.\nIn regular Firefox releases, we extract this information from the build files and store it into symbol files in Breakpad standard format. Equipped with this information Socorro can produce a human-readable stack trace. The whole flow can be seen below:\n\nHere’s an example of a proper stack trace:\n\nIf Socorro doesn’t have access to the appropriate symbol files for a crash the resulting trace contains only addresses and isn’t very helpful:\n\nWhen it comes to Linux things work differently than on other platforms: most of our users do not install our builds, they install the Firefox version that comes packaged for their favourite distribution.\nThis posed a significant problem when dealing with stability issues on Linux: for the majority of our crash reports, we couldn’t produce high-quality stack traces because we didn’t have the required symbol information. The Firefox builds that submitted the reports weren’t done by us. To make matters worse, Firefox depends on a number of third-party packages (such as GTK, Mesa, FFmpeg, SQLite, etc.). We wouldn’t get good stack traces if a crash occurred in one of these packages instead of Firefox itself because we didn’t have symbols for them either.\nTo address this issue, we started scraping debug information for Firefox builds and their dependencies from the package repositories of multiple distributions: Arch, Debian, Fedora, OpenSUSE and Ubuntu. Since every distribution does things a little bit differently, we had to write distro-specific scripts that would go through the list of packages in their repositories and find the associated debug information (the scripts are available here). This data is then fed into a tool that extracts symbol files from the debug information and uploads it to our symbol server.\nWith that information now available, we were able to analyze >99% of the crash reports we received from Linux users, up from less than 20%. Here’s an example of a high-quality trace extracted from a distro-packaged version of Firefox. We haven’t built any of the libraries involved yet the function names are present and so are the file and line numbers of the affected code:\n\nThe importance of this cannot be overestimated: Linux users tend to be more tech-savvy and are more likely to help us solve issues, so all those reports were a treasure trove for improving stability even for other operating systems (Windows, Mac, Android, etc). In particular, we often identified Fission bugs on Linux first.\nThe first effect of this newfound ability to inspect Linux crashes is that it greatly sped up our response time to Linux-specific issues, and often allowed us to identify problems in the Nightly and Beta versions of Firefox before they reached users on the release channel.\nWe could also quickly identify issues in bleeding-edge components such as WebRender, WebGPU, Wayland and VA-API video acceleration; oftentimes providing a fix within days of the change that triggered the issue.\nWe didn’t stop there: we could now identify distro-specific issues and regressions. This allowed us to inform package maintainers of the problems and have them resolved quickly. For example, we were able to identify a Debian-specific issue only two weeks after it was introduced and fixed it right away. The crash was caused by a modification made by Debian to one of Firefox dependencies that could cause a crash on startup, it’s filed under bug 1679430 if you’re curious about the details.\nAnother good example comes from Fedora: they had been using their own crash reporting system (ABRT) to catch Firefox crashes in their Firefox builds, but given the improvements on our side they started sending Firefox crashes our way instead.\nWe could also finally identify regressions and issues in our dependencies. This allowed us to communicate the issues upstream and sometimes even contributed fixes, benefiting both our users and theirs.\nFor example, at some point, Debian updated the fontconfig package by backporting an upstream fix for a memory leak. Unfortunately, the fix contained a bug that would crash Firefox and possibly other software too. We spotted the new crash only six days after the change landed in Debian sources and only a couple of weeks afterwards the issue had been fixed both upstream and in Debian. We sent reports and fixes to other projects too including Mesa, GTK, glib, PCSC, SQLite and more.\nNightly versions of Firefox also include a tool to spot security-sensitive issues: the probabilistic heap checker. This tool randomly pads a handful of memory allocations in order to detect buffer overflows and use-after-free accesses. When it detects one of these, it sends us a very detailed crash report. Given Firefox’s large user-base on Linux, this allowed us to spot some elusive issues in upstream projects and report them.\nThis also exposed some limitations in the tools we use for crash analysis, so we decided to rewrite them in Rust largely relying on the excellent crates developed by Sentry. The resulting tools were dramatically faster than our old ones, used a fraction of the memory and produced more accurate results. Code flowed both ways: we contributed improvements to their crates (and their dependencies) while they expanded their APIs to address our new use-cases and fixed the issues we discovered.\nAnother pleasant side-effect of this work is that Thunderbird now also benefits from the improvement we made for Firefox.\nThis goes on to show how collaboration between FOSS projects not only benefits their users but ultimately improves the whole ecosystem and the broader community that relies on it.\nSpecial thanks to Calixte Denizet, Nicholas Nethercote, Jan Auer and all the others that contributed to this effort!\nThe post Improving Firefox stability on Linux appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Gabriele Svelto","content":"<p>Roughly a year ago at Mozilla we started an effort to improve Firefox stability on Linux. This effort quickly became an example of good synergies between FOSS projects.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/05/improving-firefox-stability-on-linux/\">Improving Firefox stability on Linux</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"Roughly a year ago at Mozilla we started an effort to improve Firefox stability on Linux. This effort quickly became an example of good synergies between FOSS projects.\nThe post Improving Firefox stability on Linux appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47175","categories":["Featured Article","Firefox","Mozilla","firefox","Linux","mozilla"],"isoDate":"2021-05-19T14:28:53.000Z","timestamp":"5/19/2021"},{"creator":"Anny Gakhokidze","title":"Introducing Firefox’s new Site Isolation Security Architecture","link":"https://hacks.mozilla.org/2021/05/introducing-firefox-new-site-isolation-security-architecture/","pubDate":"Tue, 18 May 2021 15:45:15 +0000","content:encoded":"<p>Like any web browser, Firefox loads code from untrusted and potentially hostile websites and runs it on your computer. To protect you against new types of attacks from malicious sites and to meet the security principles of Mozilla, we set out to redesign Firefox on desktop.</p>\n<p>Site Isolation builds upon a new security architecture that extends current protection mechanisms by separating (web) content and loading each site in its own operating system process.</p>\n<p>This new security architecture allows Firefox to completely separate code originating from different sites and, in turn, defend against malicious sites trying to access sensitive information from other sites you are visiting.</p>\n<p>In more detail, whenever you open a website and enter a password, a credit card number, or any other sensitive information, you want to be sure that this information is kept secure and inaccessible to malicious actors.</p>\n<p>As a first line of defence Firefox enforces a variety of security mechanisms, e.g. the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">same-origin policy</a> which prevents adversaries from accessing such information when loaded into the same application.</p>\n<p>Unfortunately, the web evolves and so do the techniques of malicious actors. To fully protect your private information, a modern web browser not only needs to provide protections on the application layer but also needs to entirely separate the memory space of different sites &#8211; the new Site Isolation security architecture in Firefox provides those security guarantees.</p>\n<h2>Why separating memory space is crucial</h2>\n<p>In early 2018, security researchers disclosed two major vulnerabilities, known as <a href=\"https://en.wikipedia.org/wiki/Meltdown_(security_vulnerability)\">Meltdown</a> and <a href=\"https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)\">Spectre</a>. The researchers exploited fundamental assumptions about modern hardware execution, and were able to demonstrate how untrusted code can access and read memory anywhere within a process’ address space, even in a language as high level as JavaScript (which powers almost every single website).</p>\n<p>While band-aid countermeasures deployed by OS, CPU and major web browser vendors quickly neutralized the attacks, they came with a performance cost and were designed to be temporary. Back when the attacks were announced publicly, Firefox teams promptly <a href=\"https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/\">reduced the precision of high-precision timers and disabled APIs that allowed such timers to be implemented</a> to keep our users safe.</p>\n<p>Going forward, it was clear that we needed to fundamentally re-architecture the security design of Firefox to mitigate future variations of such vulnerabilities.</p>\n<p>Let&#8217;s take a closer look at the following example which demonstrates how an attacker can access your private data when executing a Spectre-like attack.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-47264\" src=\"https://hacks.mozilla.org/files/2021/05/figure1-500x707.jpg\" alt=\"Two hand-drawn diagrams, with the first labeled “Without Site Isolation, we might load both of these sites in the same process :( ”. Two browser windows with partially visible sites “attacker.com” and “my-bank” partial site, are loaded in the same process - process 16. On top of the banking window, there is a cartoon face that looks happy, personifying the browser. The attacker site window contains a face that is looking at the banking window, with a mischievous smile. In the second diagram, labeled “Attacker.com executes a sophisticated attack”, we see the same two browser windows loaded in process 16 and a 1 column table labelled “memory where my-bank’s data is stored in process 16” underneath the banking window. It has two entries: “credit card info” and “login password”. A hand extending from the malicious site reaches toward the table (aka memory of the second window), signifying that the malicious site is able to access sensitive data belonging to the banking window because it is in the same process. The personified browser character is looking towards the malicious site, and exhibits feelings of concern and worry, with exclamation marks floating around the face.\" width=\"700\" height=\"990\" srcset=\"https://hacks.mozilla.org/files/2021/05/figure1-500x707.jpg 500w, https://hacks.mozilla.org/files/2021/05/figure1-250x354.jpg 250w, https://hacks.mozilla.org/files/2021/05/figure1-768x1086.jpg 768w, https://hacks.mozilla.org/files/2021/05/figure1-1086x1536.jpg 1086w, https://hacks.mozilla.org/files/2021/05/figure1-1448x2048.jpg 1448w, https://hacks.mozilla.org/files/2021/05/figure1-scaled.jpg 1810w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>Without Site Isolation, Firefox might load a malicious site in the same process as a site that is handling sensitive information. In the worst case scenario, a malicious site might execute a Spectre-like attack to gain access to memory of the other site.</p>\n<p>Suppose you have two websites open &#8211; www.my-bank.com and www.attacker.com. As illustrated in the diagram above, with current web browser architecture it’s possible that web content from both sites ends up being loaded into the same operating system process. To make things worse, using a Spectre-like attack would allow attacker.com to query and access data from the my-bank.com website.</p>\n<p>Despite existing security mitigations, the only way to provide memory protections necessary to defend against Spectre-like attacks is to rely on the security guarantees that come with isolating content from different sites using the operating system’s process separation.</p>\n<h2>Background on Current Browser Architecture</h2>\n<p>Upon being launched, the Firefox web browser internally spawns one privileged process (also known as the parent process) which then launches and coordinates activities of multiple (web) content processes &#8211; the parent process is the most privileged one, as it is allowed to perform any action that the end-user can.</p>\n<p>This multi-process architecture allows Firefox to separate more complicated or less trustworthy code into processes, most of which have reduced access to operating system resources or user files. As a consequence, less privileged code will need to ask more privileged code to perform operations which it itself cannot.</p>\n<p>For example, a content process will have to ask the parent process to save a download because it does not have the permissions to write to disk. Put differently, if an attacker manages to compromise the content process it must additionally (ab)use one of the APIs to convince the parent process to act on its behalf.</p>\n<p>In great detail, (as of April 2021) Firefox’s parent process launches a fixed number of processes: eight web content processes, up to two additional semi-privileged web content processes, and four utility processes for web extensions, GPU operations, networking, and media decoding.</p>\n<p>While separating content into currently eight web content processes already provides a solid foundation, it does not meet the security standards of Mozilla because it allows two completely different sites to end up in the same operating system process and, therefore, share process memory. To counter this, we are targeting a Site Isolation architecture that loads every single site into its own process.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-47268\" src=\"https://hacks.mozilla.org/files/2021/05/figure2-500x707.jpg\" alt=\"A hand drawn diagram titled “Loading Sites with Current Browser Architecture”. On the left hand-side, from top to bottom, there are four browser windows with different sites loaded. The first window, www.my-bank.com, is loaded in process 3. The second window is loaded in process 4. The third window is loaded in process 5. The last window with a url - “www.attacker.com” - is loaded in process 3, same as the first window. On the right hand-side of the drawing, there is a table titled “List of Content Processes”. The table contains two columns: “site” and “pid”, which stands for process id. In the table, the first window, my-bank.com, and the last attacker.com window have the same PID.\" width=\"700\" height=\"990\" srcset=\"https://hacks.mozilla.org/files/2021/05/figure2-500x707.jpg 500w, https://hacks.mozilla.org/files/2021/05/figure2-250x354.jpg 250w, https://hacks.mozilla.org/files/2021/05/figure2-768x1086.jpg 768w, https://hacks.mozilla.org/files/2021/05/figure2-1086x1536.jpg 1086w, https://hacks.mozilla.org/files/2021/05/figure2-1448x2048.jpg 1448w, https://hacks.mozilla.org/files/2021/05/figure2-scaled.jpg 1810w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>Without Site Isolation, Firefox does not separate web content into different processes and it’s possible for different sites to be loaded in the same process.</p>\n<p>Imagine you open some websites in different tabs: www.my-bank.com, www.getpocket.com, www.mozilla.org and www.attacker.com. As illustrated in the diagram above, it&#8217;s entirely possible that my-bank.com and attacker.com end up being loaded in the same operating system process, which would result in them sharing process memory. As we saw in the previous example, with this separation model, an attacker could perform a Spectre-like attack to access my-bank.com’s data.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-47272\" src=\"https://hacks.mozilla.org/files/2021/05/figure3-500x366.jpg\" alt=\"A hand drawn diagram titled “Loading Subframes With Current Browser Architecture”. There is one browser window drawn. The window, www.attacker.com, embeds a page from a different site, www.my-bank.com. The top level page and the subframe are loaded in the same process - process 3.\" width=\"700\" height=\"513\" srcset=\"https://hacks.mozilla.org/files/2021/05/figure3-500x366.jpg 500w, https://hacks.mozilla.org/files/2021/05/figure3-250x183.jpg 250w, https://hacks.mozilla.org/files/2021/05/figure3-768x562.jpg 768w, https://hacks.mozilla.org/files/2021/05/figure3-1536x1125.jpg 1536w, https://hacks.mozilla.org/files/2021/05/figure3.jpg 1830w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>Without Site Isolation, the browser will load embedded pages, such as a bank page or an ad, in the same process as the top level document.</p>\n<p>While straightforward to understand sites being loaded into different tabs, it’s also possible that sites are embedded into other sites through so-called subframes &#8211; if you ever visited a website that had ads on it, those are probably subframes. If you ever had a personal website and you embedded a YouTube video with your favourite song within it, the YouTube video was embedded in a subframe.</p>\n<p>In a more dangerous scenario, a malicious site could embed a legitimate site within a subframe and try to trick you into entering sensitive information. With the current architecture, if a page contains any subframes from a different site, they will generally be in the same process as the outer tab.</p>\n<p>This results in both the page and all of its subframes sharing process memory, even if the subframes originate from different sites. In the case of a successful Spectre-like attack, a top-level site might access sensitive information it should not have access to from a subframe it embeds (and vice-versa) &#8211; the new Site Isolation security architecture within Firefox will effectively make it even harder for malicious sites to execute such attacks.</p>\n<h2>How Site Isolation Works in Firefox</h2>\n<p>When enabling Site Isolation in Firefox for desktop, each unique site is loaded in a separate process. In more detail, loading “https://mozilla.org” and also loading &#8220;http://getpocket.com&#8221; will cause Site Isolation to separate the two sites into their own operating system process because they are not considered “same-site”.</p>\n<p>Similarly, &#8220;https://getpocket.com&#8221; (note the difference between http and https) will also be loaded into a separate process &#8211; so ultimately all three sites will load in different processes.</p>\n<p>For the sake of completeness, there are some domains such as “.github.io” or “.blogspot.com” that would be too general to identify a “site”. This is why we use a <a href=\"https://github.com/publicsuffix/list\">community-maintained</a> list of effective top level domains (eTLDs) to aid in differentiating between sites.</p>\n<p>Since “github.io” is listed as an eTLD, “a.github.io”  and “b.github.io” would load in different processes. In our running examples, websites “www.my-bank.com” and “www.attacker.com” are not considered “same-site” with each other and will be isolated in separate processes.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-47276\" src=\"https://hacks.mozilla.org/files/2021/05/figure4-500x707.jpg\" alt=\"Two hand-drawn diagrams, with the first labeled “With Site Isolation, we will load these sites in different processes”. It shows two browser windows, one www.attacker.com , loaded in process 5, and www.my-bank.com loaded in process 16. On top of the banking window, there is a cartoon face that looks happy, personifying the browser. In contrast, the webpage area of the www.attacker.com window, contains a face that is looking at the banking window, with a mischievous smile. In the second diagram, labeled “Attacker.com tries to execute a sophisticated attack”, we see the same two browser windows. There is a 1 column table labelled “memory where my-bank’s data is stored in process 16” underneath the banking window . It has two entries: “credit card info” and “login password”. A hand extending from the malicious site tries to reach towards the table (aka memory of the banking window), but is unable to reach it, due to the process boundary. The face of the malicious site is frowning and looks unhappy, while the face, representing the browser, continues to look happy and carefree. The second window’s data is safe from the malicious site.\" width=\"700\" height=\"990\" srcset=\"https://hacks.mozilla.org/files/2021/05/figure4-500x707.jpg 500w, https://hacks.mozilla.org/files/2021/05/figure4-250x354.jpg 250w, https://hacks.mozilla.org/files/2021/05/figure4-768x1086.jpg 768w, https://hacks.mozilla.org/files/2021/05/figure4-1086x1536.jpg 1086w, https://hacks.mozilla.org/files/2021/05/figure4-1448x2048.jpg 1448w, https://hacks.mozilla.org/files/2021/05/figure4-scaled.jpg 1810w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>With Site Isolation, Firefox loads each site in its own process, thereby isolating their memory from each other, and relies on security guarantees of the operating system.</p>\n<p>Suppose now, you open the same two websites: www.attacker.com and www.my-bank.com, as seen in the diagram above. Site isolation recognizes that the two sites are not “same-site” and hence the site isolation architecture will completely separate content from attacker.com and my-bank.com into separate operating system processes.</p>\n<p>This process separation of content from different sites provides the memory protections required to allow for a secure browsing experience, making it even harder for sites to execute Spectre-like attacks, and, ultimately, provide a secure browsing experience for our users.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-47280\" src=\"https://hacks.mozilla.org/files/2021/05/figure5-500x323.jpg\" alt=\"The window, www.attacker.com, embeds a page from a different site, www.my-bank.com. The top level page is loaded in process 3 and the subframe corresponding to the bank site is loaded in process 5. The two sites are, thus, isolated from each other in different operating system processes.\" width=\"700\" height=\"452\" srcset=\"https://hacks.mozilla.org/files/2021/05/figure5-500x323.jpg 500w, https://hacks.mozilla.org/files/2021/05/figure5-250x161.jpg 250w, https://hacks.mozilla.org/files/2021/05/figure5-768x496.jpg 768w, https://hacks.mozilla.org/files/2021/05/figure5-1536x991.jpg 1536w, https://hacks.mozilla.org/files/2021/05/figure5.jpg 1830w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>With Site Isolation, Firefox loads subframes from different sites in their own processes.</p>\n<p>Identical to loading sites into two different tabs is the separation of two different sites when loaded into subframes. Let’s revisit an earlier example where pages contained subframes, with Site Isolation, subframes that are not “same-site” with the top level page will load in a different process.</p>\n<p>In the diagram above, we see that the page www.attacker.com embeds a page from www.my-bank.com and loads in a different process. Having a top level document and subframes from different sites loaded in their own processes ensures their memory is isolated from each other, yielding profound security guarantees.</p>\n<h2>Additional Benefits of Site Isolation</h2>\n<p>With Site Isolation architecture in place, we are able to bring additional security hardening to Firefox to keep you and your data safe. Besides providing an extra layer of defence against possible security threats, Site Isolation brings other wins:</p>\n<ul>\n<li aria-level=\"1\">By placing more pages into separate processes, we can ensure that doing heavy computation or garbage collection on one page will not degrade the responsiveness of pages in other processes.</li>\n<li aria-level=\"1\">Using more processes to load websites allows us to spread work across many CPU cores and use the underlying hardware more efficiently.</li>\n<li aria-level=\"1\">Due to the finer-grained separation of sites, a subframe or a tab crashing will not affect websites loaded in different processes, resulting in an improved application stability and better user experience.</li>\n</ul>\n<h2>Going Forward</h2>\n<p>We are currently testing Site Isolation on desktop browsers Nightly and Beta with a subset of users and will be rolling out to more desktop users soon. However, if you already want to benefit from the improved security architecture now, you can enable it by downloading the Nightly or Beta browser from <a href=\"https://www.mozilla.org/firefox/channel/desktop/\">here</a> and following these steps:</p>\n<p><b>To enable Site Isolation on Firefox Nightly:</b></p>\n<ol>\n<li aria-level=\"1\">Navigate to about:preferences#experimental</li>\n<li aria-level=\"1\">Check the &#8220;Fission (Site Isolation)&#8221; checkbox to enable.</li>\n<li aria-level=\"1\">Restart Firefox.</li>\n</ol>\n<p><b>To enable Site Isolation on Firefox Beta or Release:</b></p>\n<ol>\n<li aria-level=\"1\">Navigate to about:config.</li>\n<li aria-level=\"1\">Set `fission.autostart` pref to `true`.</li>\n<li aria-level=\"1\">Restart Firefox.</li>\n</ol>\n<p>For technical details on how we group sites and subframes together, you can check out our new process manager tool at “about:processes” (type it into the address bar) and follow the project at  <a href=\"https://wiki.mozilla.org/Project_Fission\">https://wiki.mozilla.org/Project_Fission</a>.</p>\n<p>With Site Isolation enabled on Firefox for Desktop, Mozilla takes its security guarantees to the next level and protects you against a new class of malicious attacks by relying on memory protections of OS-level process separation for each site. If you are interested in contributing to Mozilla’s open-source projects, you can help us by filing bugs <a href=\"https://bugzilla.mozilla.org/enter_bug.cgi?product=Core&amp;bug_type=defect&amp;short_desc=%5bFission%5d&amp;blocked=fission-dogfooding\">here</a> if you run into any problems with Site Isolation enabled.</p>\n<h2>Acknowledgements</h2>\n<p>Site Isolation (Project Fission), has been a massive multi-year project. Thank you to all of the talented and awesome colleagues who contributed to this work! It’s a privilege to work with people who are passionate about building the web we want: free, inclusive, independent and secure! In particular, I would like to thank Neha Kochar, Nika Layzell, Mike Conley, Melissa Thermidor, Chris Peterson, Kashav Madan, Andrew McCreight, Peter Van der Beken, Tantek Çelik and Christoph Kerschbaumer for their insightful comments and discussions.  Finally, thank you to Morgan Rae Reschenberg for helping me craft alt-text to meet the high standards of our web accessibility principles and allow everyone on the internet to easily gather the benefits provided by Site Isolation.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/05/introducing-firefox-new-site-isolation-security-architecture/\">Introducing Firefox&#8217;s new Site Isolation Security Architecture</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"Like any web browser, Firefox loads code from untrusted and potentially hostile websites and runs it on your computer. To protect you against new types of attacks from malicious sites and to meet the security principles of Mozilla, we set out to redesign Firefox on desktop.\nSite Isolation builds upon a new security architecture that extends current protection mechanisms by separating (web) content and loading each site in its own operating system process.\nThis new security architecture allows Firefox to completely separate code originating from different sites and, in turn, defend against malicious sites trying to access sensitive information from other sites you are visiting.\nIn more detail, whenever you open a website and enter a password, a credit card number, or any other sensitive information, you want to be sure that this information is kept secure and inaccessible to malicious actors.\nAs a first line of defence Firefox enforces a variety of security mechanisms, e.g. the same-origin policy which prevents adversaries from accessing such information when loaded into the same application.\nUnfortunately, the web evolves and so do the techniques of malicious actors. To fully protect your private information, a modern web browser not only needs to provide protections on the application layer but also needs to entirely separate the memory space of different sites – the new Site Isolation security architecture in Firefox provides those security guarantees.\nWhy separating memory space is crucial\nIn early 2018, security researchers disclosed two major vulnerabilities, known as Meltdown and Spectre. The researchers exploited fundamental assumptions about modern hardware execution, and were able to demonstrate how untrusted code can access and read memory anywhere within a process’ address space, even in a language as high level as JavaScript (which powers almost every single website).\nWhile band-aid countermeasures deployed by OS, CPU and major web browser vendors quickly neutralized the attacks, they came with a performance cost and were designed to be temporary. Back when the attacks were announced publicly, Firefox teams promptly reduced the precision of high-precision timers and disabled APIs that allowed such timers to be implemented to keep our users safe.\nGoing forward, it was clear that we needed to fundamentally re-architecture the security design of Firefox to mitigate future variations of such vulnerabilities.\nLet’s take a closer look at the following example which demonstrates how an attacker can access your private data when executing a Spectre-like attack.\n\nWithout Site Isolation, Firefox might load a malicious site in the same process as a site that is handling sensitive information. In the worst case scenario, a malicious site might execute a Spectre-like attack to gain access to memory of the other site.\nSuppose you have two websites open – www.my-bank.com and www.attacker.com. As illustrated in the diagram above, with current web browser architecture it’s possible that web content from both sites ends up being loaded into the same operating system process. To make things worse, using a Spectre-like attack would allow attacker.com to query and access data from the my-bank.com website.\nDespite existing security mitigations, the only way to provide memory protections necessary to defend against Spectre-like attacks is to rely on the security guarantees that come with isolating content from different sites using the operating system’s process separation.\nBackground on Current Browser Architecture\nUpon being launched, the Firefox web browser internally spawns one privileged process (also known as the parent process) which then launches and coordinates activities of multiple (web) content processes – the parent process is the most privileged one, as it is allowed to perform any action that the end-user can.\nThis multi-process architecture allows Firefox to separate more complicated or less trustworthy code into processes, most of which have reduced access to operating system resources or user files. As a consequence, less privileged code will need to ask more privileged code to perform operations which it itself cannot.\nFor example, a content process will have to ask the parent process to save a download because it does not have the permissions to write to disk. Put differently, if an attacker manages to compromise the content process it must additionally (ab)use one of the APIs to convince the parent process to act on its behalf.\nIn great detail, (as of April 2021) Firefox’s parent process launches a fixed number of processes: eight web content processes, up to two additional semi-privileged web content processes, and four utility processes for web extensions, GPU operations, networking, and media decoding.\nWhile separating content into currently eight web content processes already provides a solid foundation, it does not meet the security standards of Mozilla because it allows two completely different sites to end up in the same operating system process and, therefore, share process memory. To counter this, we are targeting a Site Isolation architecture that loads every single site into its own process.\n\nWithout Site Isolation, Firefox does not separate web content into different processes and it’s possible for different sites to be loaded in the same process.\nImagine you open some websites in different tabs: www.my-bank.com, www.getpocket.com, www.mozilla.org and www.attacker.com. As illustrated in the diagram above, it’s entirely possible that my-bank.com and attacker.com end up being loaded in the same operating system process, which would result in them sharing process memory. As we saw in the previous example, with this separation model, an attacker could perform a Spectre-like attack to access my-bank.com’s data.\n\nWithout Site Isolation, the browser will load embedded pages, such as a bank page or an ad, in the same process as the top level document.\nWhile straightforward to understand sites being loaded into different tabs, it’s also possible that sites are embedded into other sites through so-called subframes – if you ever visited a website that had ads on it, those are probably subframes. If you ever had a personal website and you embedded a YouTube video with your favourite song within it, the YouTube video was embedded in a subframe.\nIn a more dangerous scenario, a malicious site could embed a legitimate site within a subframe and try to trick you into entering sensitive information. With the current architecture, if a page contains any subframes from a different site, they will generally be in the same process as the outer tab.\nThis results in both the page and all of its subframes sharing process memory, even if the subframes originate from different sites. In the case of a successful Spectre-like attack, a top-level site might access sensitive information it should not have access to from a subframe it embeds (and vice-versa) – the new Site Isolation security architecture within Firefox will effectively make it even harder for malicious sites to execute such attacks.\nHow Site Isolation Works in Firefox\nWhen enabling Site Isolation in Firefox for desktop, each unique site is loaded in a separate process. In more detail, loading “https://mozilla.org” and also loading “http://getpocket.com” will cause Site Isolation to separate the two sites into their own operating system process because they are not considered “same-site”.\nSimilarly, “https://getpocket.com” (note the difference between http and https) will also be loaded into a separate process – so ultimately all three sites will load in different processes.\nFor the sake of completeness, there are some domains such as “.github.io” or “.blogspot.com” that would be too general to identify a “site”. This is why we use a community-maintained list of effective top level domains (eTLDs) to aid in differentiating between sites.\nSince “github.io” is listed as an eTLD, “a.github.io”  and “b.github.io” would load in different processes. In our running examples, websites “www.my-bank.com” and “www.attacker.com” are not considered “same-site” with each other and will be isolated in separate processes.\n\nWith Site Isolation, Firefox loads each site in its own process, thereby isolating their memory from each other, and relies on security guarantees of the operating system.\nSuppose now, you open the same two websites: www.attacker.com and www.my-bank.com, as seen in the diagram above. Site isolation recognizes that the two sites are not “same-site” and hence the site isolation architecture will completely separate content from attacker.com and my-bank.com into separate operating system processes.\nThis process separation of content from different sites provides the memory protections required to allow for a secure browsing experience, making it even harder for sites to execute Spectre-like attacks, and, ultimately, provide a secure browsing experience for our users.\n\nWith Site Isolation, Firefox loads subframes from different sites in their own processes.\nIdentical to loading sites into two different tabs is the separation of two different sites when loaded into subframes. Let’s revisit an earlier example where pages contained subframes, with Site Isolation, subframes that are not “same-site” with the top level page will load in a different process.\nIn the diagram above, we see that the page www.attacker.com embeds a page from www.my-bank.com and loads in a different process. Having a top level document and subframes from different sites loaded in their own processes ensures their memory is isolated from each other, yielding profound security guarantees.\nAdditional Benefits of Site Isolation\nWith Site Isolation architecture in place, we are able to bring additional security hardening to Firefox to keep you and your data safe. Besides providing an extra layer of defence against possible security threats, Site Isolation brings other wins:\nBy placing more pages into separate processes, we can ensure that doing heavy computation or garbage collection on one page will not degrade the responsiveness of pages in other processes.\nUsing more processes to load websites allows us to spread work across many CPU cores and use the underlying hardware more efficiently.\nDue to the finer-grained separation of sites, a subframe or a tab crashing will not affect websites loaded in different processes, resulting in an improved application stability and better user experience.\nGoing Forward\nWe are currently testing Site Isolation on desktop browsers Nightly and Beta with a subset of users and will be rolling out to more desktop users soon. However, if you already want to benefit from the improved security architecture now, you can enable it by downloading the Nightly or Beta browser from here and following these steps:\nTo enable Site Isolation on Firefox Nightly:\nNavigate to about:preferences#experimental\nCheck the “Fission (Site Isolation)” checkbox to enable.\nRestart Firefox.\nTo enable Site Isolation on Firefox Beta or Release:\nNavigate to about:config.\nSet `fission.autostart` pref to `true`.\nRestart Firefox.\nFor technical details on how we group sites and subframes together, you can check out our new process manager tool at “about:processes” (type it into the address bar) and follow the project at  https://wiki.mozilla.org/Project_Fission.\nWith Site Isolation enabled on Firefox for Desktop, Mozilla takes its security guarantees to the next level and protects you against a new class of malicious attacks by relying on memory protections of OS-level process separation for each site. If you are interested in contributing to Mozilla’s open-source projects, you can help us by filing bugs here if you run into any problems with Site Isolation enabled.\nAcknowledgements\nSite Isolation (Project Fission), has been a massive multi-year project. Thank you to all of the talented and awesome colleagues who contributed to this work! It’s a privilege to work with people who are passionate about building the web we want: free, inclusive, independent and secure! In particular, I would like to thank Neha Kochar, Nika Layzell, Mike Conley, Melissa Thermidor, Chris Peterson, Kashav Madan, Andrew McCreight, Peter Van der Beken, Tantek Çelik and Christoph Kerschbaumer for their insightful comments and discussions.  Finally, thank you to Morgan Rae Reschenberg for helping me craft alt-text to meet the high standards of our web accessibility principles and allow everyone on the internet to easily gather the benefits provided by Site Isolation.\nThe post Introducing Firefox’s new Site Isolation Security Architecture appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Anny Gakhokidze","content":"<p>Like any web browser, Firefox loads code from untrusted and potentially hostile websites and runs it on your computer. To protect you against new types of attacks from malicious sites and to meet the security principles of Mozilla, we set out to redesign Firefox on desktop.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/05/introducing-firefox-new-site-isolation-security-architecture/\">Introducing Firefox&#8217;s new Site Isolation Security Architecture</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"Like any web browser, Firefox loads code from untrusted and potentially hostile websites and runs it on your computer. To protect you against new types of attacks from malicious sites and to meet the security principles of Mozilla, we set out to redesign Firefox on desktop.\nThe post Introducing Firefox’s new Site Isolation Security Architecture appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47259","categories":["Featured Article","Firefox","firefox","security"],"isoDate":"2021-05-18T15:45:15.000Z","timestamp":"5/18/2021"},{"creator":"Teon Brooks","title":"Pyodide Spin Out and 0.17 Release","link":"https://hacks.mozilla.org/2021/04/pyodide-spin-out-and-0-17-release/","pubDate":"Thu, 22 Apr 2021 15:17:11 +0000","content:encoded":"<p>We are happy to announce that Pyodide has become an independent and community-driven project. We are also pleased to announce the 0.17 release for Pyodide with many new features and improvements.</p>\n<p>Pyodide consists of the CPython 3.8 interpreter compiled to WebAssembly which allows Python to run in the browser. Many popular scientific Python packages have also been compiled and made available. In addition, Pyodide can install any Python package with a pure Python wheel from the Python Package Index (PyPi). Pyodide also includes a comprehensive foreign function interface which exposes the ecosystem of Python packages to Javascript and the browser user interface, including the DOM, to Python.</p>\n<p>You can try out the latest version of Pyodide in a <a href=\"https://pyodide.org/en/0.17.0/console.html\">REPL</a> directly in your browser.</p>\n<h2>Pyodide is now an independent project</h2>\n<p>We are happy to announce that Pyodide now has a new home in a separate GitHub organisation (<a href=\"https://github.com/pyodide\">github.com/pyodide</a>) and is maintained by a volunteer team of contributors. The project documentation is available on <a href=\"https://pyodide.org\">pyodide.org</a>.</p>\n<p>Pyodide was originally developed inside Mozilla to allow the use of Python in <a href=\"https://hacks.mozilla.org/2019/03/iodide-an-experimental-tool-for-scientific-communicatiodide-for-scientific-communication-exploration-on-the-web/\">Iodide</a>, an experimental effort to build an interactive scientific computing environment for the web.  Since <a href=\"https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser/\">its initial release and announcement</a>, Pyodide has attracted a large amount of interest from the community, remains actively developed, and is used in many projects outside of Mozilla.</p>\n<p>The core team has approved a transparent <a href=\"https://pyodide.org/en/0.17.0/project/governance.html\">governance document </a> and has a <a href=\"https://pyodide.org/en/0.17.0/project/roadmap.html\">roadmap for future developments</a>. Pyodide also has a<a href=\"https://pyodide.org/en/0.17.0/project/code-of-conduct.html#code-of-conduct\"> Code of Conduct</a> which we expect all contributors and core members to adhere to.</p>\n<p>New contributors are welcome to participate in the project development on Github. There are many ways to contribute, including code contributions, documentation improvements, adding packages, and using Pyodide for your applications and providing feedback.</p>\n<h2>The Pyodide 0.17 release</h2>\n<p>Pyodide 0.17.0 is a major step forward from previous versions. It includes:</p>\n<ul>\n<li>major maintenance improvements,</li>\n<li>a thorough redesign of the central APIs, and</li>\n<li>careful elimination of error leaks and memory leaks</li>\n</ul>\n<h3>Type translation improvements</h3>\n<p>The type translations module was significantly reworked in v0.17 with the goal that round trip translations of objects between Python and Javascript produces an identical object.</p>\n<p>In other words, Python -&gt; JS -&gt; Python translation and JS -&gt; Python -&gt; JS translation now produce objects that are  equal to the original object. (A couple of exceptions to this remain due to unavoidable design tradeoffs.)</p>\n<p>One of Pyodide’s strengths is the foreign function interface between Python and Javascript, which at its best can practically erase the mental overhead of working with two different languages. All I/O must pass through the usual web APIs, so in order for Python code to take advantage of the browser’s strengths , we need to be able to support use cases like generating image data in Python and rendering the data to an HTML5 Canvas, or implementing event handlers in Python.</p>\n<p>In the past we found that one of the major pain points in using Pyodide occurs when an object makes a round trip from Python to Javascript and back to Python and comes back different. This violated the expectations of the user and forced inelegant workarounds.</p>\n<p>The issues with round trip translations were primarily caused by implicit conversion of Python types to Javascript. The implicit conversions were intended to be convenient, but the system was inflexible and surprising to users. We still implicitly convert strings, numbers, booleans, and None. Most other objects are shared between languages using proxies that allow methods and some operations to be called on the object from the other language. The proxies can be converted to native types with new explicit converter methods called <code>.toJs</code> and <code>to_py</code>.</p>\n<p>For instance, given an Array in JavaScript,</p>\n<pre><code class=\"language-js\">window.x = [\"a\", \"b\", \"c\"];\n</code></pre>\n<p>We can access it in Python as,</p>\n<pre>&gt;&gt;&gt; from js import x # import x from global Javascript scope\n>&gt;&gt; type(x)\n&lt;class 'JsProxy'&gt;\n>&gt;&gt; x[0]    # can index x directly\n'a'\n>&gt;&gt; x[1] = 'c' # modify x\n>&gt;&gt; x.to_py()   # convert x to a Python list\n['a', 'c']\n</pre>\n<p>Several other conversion methods have been added for more complicated use cases. This gives the user much finer control over type conversions than was previously possible.</p>\n<p>For example, suppose we have a Python list and want to use it as an argument to a Javascript function that expects an Array.  Either the caller or the callee needs to take care of the conversion. This allows us to directly call functions that are unaware of Pyodide.</p>\n<p>Here is an example of calling a Javascript function from Python with argument conversion on the Python side:</p>\n<pre><code class=\"js\">\nfunction jsfunc(array) {\n  array.push(2);\n  return array.length;\n}\n\npyodide.runPython(`\nfrom js import jsfunc\nfrom pyodide import to_js\n\ndef pyfunc():\n  mylist = [1,2,3]\n  jslist = to_js(mylist)\n  return jsfunc(jslist) # returns 4\n`)\n</code></pre>\n<p>This would work well in the case that <code>jsfunc</code> is a Javascript built-in and <code>pyfunc</code> is part of our codebase. If <code>pyfunc</code> is part of a Python package, we can handle the conversion in Javascript instead:</p>\n<pre><code class=\"js\">\nfunction jsfunc(pylist) {\n  let array = pylist.toJs();\n  array.push(2);\n  return array.length;\n}\n</code></pre>\n<p>See the <a href=\"https://pyodide.org/en/0.17.0/usage/type-conversions.html\">type translation documentation</a> for more information.</p>\n<h3>Asyncio support</h3>\n<p>Another major new feature is the implementation of a Python event loop that schedules coroutines to run on the browser event loop. This makes it possible to use asyncio in Pyodide.</p>\n<p>Additionally, it is now possible to await Javascript Promises in Python and to await Python awaitables in Javascript. This allows for seamless interoperability between asyncio in Python and Javascript (though memory management issues may arise in complex use cases).</p>\n<p>Here is an example where we define a Python async function that awaits the Javascript async function “fetch” and then we await the Python async function from Javascript.</p>\n<pre><code class=\"js\">\npyodide.runPython(`\nasync def test():\n    from js import fetch\n    # Fetch the Pyodide packages list\n    r = await fetch(\"packages.json\")\n    data = await r.json()\n    # return all available packages\n    return data.dependencies.object_keys()\n`);\n\nlet test = pyodide.globals.get(\"test\");\n\n// we can await the test() coroutine from Javascript\nresult = await test();\nconsole.log(result);\n// logs [\"asciitree\", \"parso\", \"scikit-learn\", ...]\n</code></pre>\n<h3>Error Handling</h3>\n<p>Errors can now be thrown in Python and caught in Javascript or thrown in Javascript and caught in Python. Support for this is integrated at the lowest level, so calls between Javascript and C functions behave as expected. The error translation code is generated by C macros which makes implementing and debugging new logic dramatically simpler.</p>\n<p>For example:</p>\n<pre><code class=\"js\">\nfunction jserror() {\n  throw new Error(\"ooops!\");\n}\n\npyodide.runPython(`\nfrom js import jserror\nfrom pyodide import JsException\n\ntry:\n  jserror()\nexcept JsException as e:\n  print(str(e)) # prints \"TypeError: ooops!\"\n`);\n</code></pre>\n<h3>Emscripten update</h3>\n<p>Pyodide uses the <a href=\"https://emscripten.org/\">Emscripten</a> compiler toolchain to compile the CPython 3.8 interpreter and Python packages with C extensions to WebAssembly. In this release we finally completed the migration to the latest version of Emscripten that uses the upstream LLVM backend. This allows us to take advantage of recent improvements to the toolchain, including significant reductions in package size and execution time.</p>\n<p>For instance, the SciPy package shrank dramatically from 92 MB to 15 MB so Scipy is now cached by browsers. This greatly improves the usability of scientific Python packages that depend on scipy, such as scikit-image and scikit-learn. The size of the base Pyodide environment with only the CPython standard library shrank from 8.1 MB to 6.4 MB.</p>\n<p>On the performance side, the latest toolchain comes with a 25% to 30% run time improvement:<br />\n<img loading=\"lazy\" src=\"https://hacks.mozilla.org/files/2021/04/pyodide-benchmarks.png\" alt=\"\" width=\"853\" height=\"538\" class=\"alignnone size-full wp-image-47245\" srcset=\"https://hacks.mozilla.org/files/2021/04/pyodide-benchmarks.png 853w, https://hacks.mozilla.org/files/2021/04/pyodide-benchmarks-250x158.png 250w, https://hacks.mozilla.org/files/2021/04/pyodide-benchmarks-500x315.png 500w, https://hacks.mozilla.org/files/2021/04/pyodide-benchmarks-768x484.png 768w\" sizes=\"(max-width: 853px) 100vw, 853px\" /><br />\nPerformance ranges between near native to up to 3 to 5 times slower, depending on the benchmark.  The above benchmarks were created with Firefox 87.</p>\n<h3>Other changes</h3>\n<p>Other notable features include:</p>\n<ul>\n<li aria-level=\"1\">Fixed package loading for Safari v14+ and other Webkit-based browsers</li>\n<li aria-level=\"1\">Added support for relative URLs in micropip and loadPackage, and improved interaction between micropip and loadPackage</li>\n<li aria-level=\"1\">Support for implementing Python modules in Javascript</li>\n</ul>\n<p>We also did a large amount of maintenance work and code quality improvements:</p>\n<ul>\n<li aria-level=\"1\">Lots of bug fixes</li>\n<li aria-level=\"1\">Upstreamed a number of patches to the emscripten compiler toolchain</li>\n<li aria-level=\"1\">Added systematic error handling to the C code, including automatic adaptors between Javascript errors and CPython errors</li>\n<li aria-level=\"1\">Added internal consistency checks to detect memory leaks, detect fatal errors, and improve ease of debugging</li>\n</ul>\n<p>See <a href=\"https://pyodide.org/en/0.17.0/project/changelog.html#version-0-17-0\">the changelog</a> for more details.</p>\n<h2>Winding down Iodide</h2>\n<p>Mozilla has made the difficult decision to wind down the Iodide project. While <a href=\"https://alpha.iodide.io\">alpha.iodide.io</a> will continue to be available for now (in part to provide a demonstration of Pyodide’s capabilities), we do not recommend using it for important work as it may shut down in the future. Since iodide’s release, there have been <a href=\"https://pyodide.org/en/0.17.0/project/related-projects.html#notebook-environements-ides-repls\">many efforts</a> at creating interactive notebook environments based on Pyodide which are in active development and offer a similar environment for creating interactive visualizations in the browser using python.</p>\n<h2>Next steps for Pyodide</h2>\n<p>While many issues were addressed in this release, a number of other major steps remain on the roadmap. We can mention</p>\n<ul>\n<li aria-level=\"1\">Reducing download sizes and initialization times</li>\n<li aria-level=\"1\">Improve performance of Python code in Pyodide</li>\n<li aria-level=\"1\">Simplification of package loading system</li>\n<li aria-level=\"1\">Update scipy to a more recent version</li>\n<li aria-level=\"1\">Better project sustainability, for instance, by seeking synergies with the conda-forge project and its tooling.</li>\n<li aria-level=\"1\">Better support for web workers</li>\n<li aria-level=\"1\">Better support for synchronous IO (popular for programming education)</li>\n</ul>\n<p>For additional information see the <a href=\"https://pyodide.org/en/latest/project/roadmap.html\">project roadmap</a>.</p>\n<h2>Acknowledgements</h2>\n<p>Lots of thanks to:</p>\n<ul>\n<li aria-level=\"1\"><a href=\"https://github.com/dalcde\">Dexter Chua</a> and <a href=\"https://github.com/joemarshall\">Joe Marshall</a> for improving the build setup and making Emscripten migration possible.</li>\n<li aria-level=\"1\"><a href=\"https://github.com/hoodmane\">Hood Chatham</a> for in-depth improvement of the type translation module and adding asyncio support</li>\n<li aria-level=\"1\">and <a href=\"https://github.com/casatir\">Romain Casati</a> for improving the Pyodide REPL console.</li>\n</ul>\n<p>We are also grateful to all <a href=\"https://github.com/pyodide/pyodide/graphs/contributors\">Pyodide contributors</a>.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/04/pyodide-spin-out-and-0-17-release/\">Pyodide Spin Out and 0.17 Release</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"We are happy to announce that Pyodide has become an independent and community-driven project. We are also pleased to announce the 0.17 release for Pyodide with many new features and improvements.\nPyodide consists of the CPython 3.8 interpreter compiled to WebAssembly which allows Python to run in the browser. Many popular scientific Python packages have also been compiled and made available. In addition, Pyodide can install any Python package with a pure Python wheel from the Python Package Index (PyPi). Pyodide also includes a comprehensive foreign function interface which exposes the ecosystem of Python packages to Javascript and the browser user interface, including the DOM, to Python.\nYou can try out the latest version of Pyodide in a REPL directly in your browser.\nPyodide is now an independent project\nWe are happy to announce that Pyodide now has a new home in a separate GitHub organisation (github.com/pyodide) and is maintained by a volunteer team of contributors. The project documentation is available on pyodide.org.\nPyodide was originally developed inside Mozilla to allow the use of Python in Iodide, an experimental effort to build an interactive scientific computing environment for the web.  Since its initial release and announcement, Pyodide has attracted a large amount of interest from the community, remains actively developed, and is used in many projects outside of Mozilla.\nThe core team has approved a transparent governance document  and has a roadmap for future developments. Pyodide also has a Code of Conduct which we expect all contributors and core members to adhere to.\nNew contributors are welcome to participate in the project development on Github. There are many ways to contribute, including code contributions, documentation improvements, adding packages, and using Pyodide for your applications and providing feedback.\nThe Pyodide 0.17 release\nPyodide 0.17.0 is a major step forward from previous versions. It includes:\nmajor maintenance improvements,\na thorough redesign of the central APIs, and\ncareful elimination of error leaks and memory leaks\nType translation improvements\nThe type translations module was significantly reworked in v0.17 with the goal that round trip translations of objects between Python and Javascript produces an identical object.\nIn other words, Python -> JS -> Python translation and JS -> Python -> JS translation now produce objects that are  equal to the original object. (A couple of exceptions to this remain due to unavoidable design tradeoffs.)\nOne of Pyodide’s strengths is the foreign function interface between Python and Javascript, which at its best can practically erase the mental overhead of working with two different languages. All I/O must pass through the usual web APIs, so in order for Python code to take advantage of the browser’s strengths , we need to be able to support use cases like generating image data in Python and rendering the data to an HTML5 Canvas, or implementing event handlers in Python.\nIn the past we found that one of the major pain points in using Pyodide occurs when an object makes a round trip from Python to Javascript and back to Python and comes back different. This violated the expectations of the user and forced inelegant workarounds.\nThe issues with round trip translations were primarily caused by implicit conversion of Python types to Javascript. The implicit conversions were intended to be convenient, but the system was inflexible and surprising to users. We still implicitly convert strings, numbers, booleans, and None. Most other objects are shared between languages using proxies that allow methods and some operations to be called on the object from the other language. The proxies can be converted to native types with new explicit converter methods called .toJs and to_py.\nFor instance, given an Array in JavaScript,\nwindow.x = [\"a\", \"b\", \"c\"];\n\nWe can access it in Python as,\n>>> from js import x # import x from global Javascript scope\n>>> type(x)\n<class 'JsProxy'>\n>>> x[0]    # can index x directly\n'a'\n>>> x[1] = 'c' # modify x\n>>> x.to_py()   # convert x to a Python list\n['a', 'c']\n\nSeveral other conversion methods have been added for more complicated use cases. This gives the user much finer control over type conversions than was previously possible.\nFor example, suppose we have a Python list and want to use it as an argument to a Javascript function that expects an Array.  Either the caller or the callee needs to take care of the conversion. This allows us to directly call functions that are unaware of Pyodide.\nHere is an example of calling a Javascript function from Python with argument conversion on the Python side:\n\nfunction jsfunc(array) {\n  array.push(2);\n  return array.length;\n}\n\npyodide.runPython(`\nfrom js import jsfunc\nfrom pyodide import to_js\n\ndef pyfunc():\n  mylist = [1,2,3]\n  jslist = to_js(mylist)\n  return jsfunc(jslist) # returns 4\n`)\n\nThis would work well in the case that jsfunc is a Javascript built-in and pyfunc is part of our codebase. If pyfunc is part of a Python package, we can handle the conversion in Javascript instead:\n\nfunction jsfunc(pylist) {\n  let array = pylist.toJs();\n  array.push(2);\n  return array.length;\n}\n\nSee the type translation documentation for more information.\nAsyncio support\nAnother major new feature is the implementation of a Python event loop that schedules coroutines to run on the browser event loop. This makes it possible to use asyncio in Pyodide.\nAdditionally, it is now possible to await Javascript Promises in Python and to await Python awaitables in Javascript. This allows for seamless interoperability between asyncio in Python and Javascript (though memory management issues may arise in complex use cases).\nHere is an example where we define a Python async function that awaits the Javascript async function “fetch” and then we await the Python async function from Javascript.\n\npyodide.runPython(`\nasync def test():\n    from js import fetch\n    # Fetch the Pyodide packages list\n    r = await fetch(\"packages.json\")\n    data = await r.json()\n    # return all available packages\n    return data.dependencies.object_keys()\n`);\n\nlet test = pyodide.globals.get(\"test\");\n\n// we can await the test() coroutine from Javascript\nresult = await test();\nconsole.log(result);\n// logs [\"asciitree\", \"parso\", \"scikit-learn\", ...]\n\nError Handling\nErrors can now be thrown in Python and caught in Javascript or thrown in Javascript and caught in Python. Support for this is integrated at the lowest level, so calls between Javascript and C functions behave as expected. The error translation code is generated by C macros which makes implementing and debugging new logic dramatically simpler.\nFor example:\n\nfunction jserror() {\n  throw new Error(\"ooops!\");\n}\n\npyodide.runPython(`\nfrom js import jserror\nfrom pyodide import JsException\n\ntry:\n  jserror()\nexcept JsException as e:\n  print(str(e)) # prints \"TypeError: ooops!\"\n`);\n\nEmscripten update\nPyodide uses the Emscripten compiler toolchain to compile the CPython 3.8 interpreter and Python packages with C extensions to WebAssembly. In this release we finally completed the migration to the latest version of Emscripten that uses the upstream LLVM backend. This allows us to take advantage of recent improvements to the toolchain, including significant reductions in package size and execution time.\nFor instance, the SciPy package shrank dramatically from 92 MB to 15 MB so Scipy is now cached by browsers. This greatly improves the usability of scientific Python packages that depend on scipy, such as scikit-image and scikit-learn. The size of the base Pyodide environment with only the CPython standard library shrank from 8.1 MB to 6.4 MB.\nOn the performance side, the latest toolchain comes with a 25% to 30% run time improvement:\n\nPerformance ranges between near native to up to 3 to 5 times slower, depending on the benchmark.  The above benchmarks were created with Firefox 87.\nOther changes\nOther notable features include:\nFixed package loading for Safari v14+ and other Webkit-based browsers\nAdded support for relative URLs in micropip and loadPackage, and improved interaction between micropip and loadPackage\nSupport for implementing Python modules in Javascript\nWe also did a large amount of maintenance work and code quality improvements:\nLots of bug fixes\nUpstreamed a number of patches to the emscripten compiler toolchain\nAdded systematic error handling to the C code, including automatic adaptors between Javascript errors and CPython errors\nAdded internal consistency checks to detect memory leaks, detect fatal errors, and improve ease of debugging\nSee the changelog for more details.\nWinding down Iodide\nMozilla has made the difficult decision to wind down the Iodide project. While alpha.iodide.io will continue to be available for now (in part to provide a demonstration of Pyodide’s capabilities), we do not recommend using it for important work as it may shut down in the future. Since iodide’s release, there have been many efforts at creating interactive notebook environments based on Pyodide which are in active development and offer a similar environment for creating interactive visualizations in the browser using python.\nNext steps for Pyodide\nWhile many issues were addressed in this release, a number of other major steps remain on the roadmap. We can mention\nReducing download sizes and initialization times\nImprove performance of Python code in Pyodide\nSimplification of package loading system\nUpdate scipy to a more recent version\nBetter project sustainability, for instance, by seeking synergies with the conda-forge project and its tooling.\nBetter support for web workers\nBetter support for synchronous IO (popular for programming education)\nFor additional information see the project roadmap.\nAcknowledgements\nLots of thanks to:\nDexter Chua and Joe Marshall for improving the build setup and making Emscripten migration possible.\nHood Chatham for in-depth improvement of the type translation module and adding asyncio support\nand Romain Casati for improving the Pyodide REPL console.\nWe are also grateful to all Pyodide contributors.\nThe post Pyodide Spin Out and 0.17 Release appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Teon Brooks","content":"<p>We are happy to announce that Pyodide has become an independent and community-driven project. We are also pleased to announce the 0.17 release for Pyodide with many new features and improvements. Pyodide consists of the CPython 3.8 interpreter compiled to WebAssembly which allows Python to run in the browser.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/04/pyodide-spin-out-and-0-17-release/\">Pyodide Spin Out and 0.17 Release</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"We are happy to announce that Pyodide has become an independent and community-driven project. We are also pleased to announce the 0.17 release for Pyodide with many new features and improvements. Pyodide consists of the CPython 3.8 interpreter compiled to WebAssembly which allows Python to run in the browser.\nThe post Pyodide Spin Out and 0.17 Release appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47230","categories":["Featured Article","JavaScript","WebAssembly","pyodide","python"],"isoDate":"2021-04-22T15:17:11.000Z","timestamp":"4/22/2021"},{"creator":"Chris Mills","title":"Never too late for Firefox 88","link":"https://hacks.mozilla.org/2021/04/never-too-late-for-firefox-88/","pubDate":"Mon, 19 Apr 2021 15:18:52 +0000","content:encoded":"<p>April is upon us, and we have a most timely release for you — Firefox 88. In this release you will find a bunch of nice CSS additions including <code>:user-valid</code> and <code>:user-invalid</code> support and <code>image-set()</code> support, support for regular expression match indices, removal of FTP protocol support for enhanced security, and more!</p>\n<p>This blog post provides merely a set of highlights; for all the details, check out the following:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/docs/Mozilla/Firefox/Releases/88\">Firefox 88 for developers on MDN</a></li>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/88.0/releasenotes/\">Firefox 88 end-user release notes</a></li>\n</ul>\n<h2>:user-valid and :user-invalid</h2>\n<p>There are a large number of HTML form-related pseudo-classes that allow us to specify styles for various data validity states, as you&#8217;ll see in our <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Forms/UI_pseudo-classes\">UI pseudo-classes</a> tutorial. Firefox 88 introduces two more — <code>:user-valid</code> and <code>:user-invalid</code>.</p>\n<p>You might be thinking &#8220;we already have <code>:valid</code> and <code>:invalid</code> for styling forms containing valid or invalid data — what&#8217;s the difference here?&#8221;</p>\n<p><code>:user-valid</code> and <code>:user-invalid</code> are similar, but have been designed with better user experience in mind. They effectively do the same thing — matching a form input that contains valid or invaid data — but <code>:user-valid</code> and <code>:user-invalid</code> only start matching after the user has stopped focusing on the element (e.g. by tabbing to the next input). This is a subtle but useful change, which we will now demonstrate.</p>\n<p>Take our <a href=\"https://mdn.github.io/learning-area/html/forms/pseudo-classes/valid-invalid.html\">valid-invalid.html</a> example. This uses the following CSS to provide clear indicators as to which fields contain valid and invalid data:</p>\n<pre><code class=\"language-css\">input:invalid {\n  border: 2px solid red;\n}\n\ninput:invalid + span::before {\n  content: '&#x2716;';\n  color: red;\n}\n\ninput:valid + span::before {\n  content: '✓';\n  color: green;\n}</code></pre>\n<p>The problem with this is shown when you try to enter data into the &#8220;E-mail address&#8221; field — as soon as you start typing an email address into the field the invalid styling kicks in, and remains right up until the point where the entered text constitutes a valid e-mail address. This experience can be a bit jarring, making the user think they are doing something wrong when they aren&#8217;t.</p>\n<p>Now consider our <a href=\"https://mdn.github.io/learning-area/html/forms/pseudo-classes/user-valid-invalid.html\">user-valid-invalid.html</a> example. This includes nearly the same CSS, except that it uses the newer <code>:user-valid</code> and <code>:user-invalid</code> pseudo-classes:</p>\n<pre><code class=\"language-css\">input:user-invalid {\n  border: 2px solid red;\n}\n\ninput:user-invalid + span::before {\n  content: '&#x2716;';\n  color: red;\n}\n\ninput:user-valid + span::before {\n  content: '✓';\n  color: green;\n}</code></pre>\n<p>In this example the valid/invalid styling only kicks in when the user has entered their value and removed focus from the input, giving them a chance to enter their complete value before receiving feedback. Much better!</p>\n<p>Note: Previously to Firefox 88, the same effect could be achieved using the proprietary <code>:-moz-ui-invalid</code> and <code>:-moz-ui-valid</code> pseudo-classes.</p>\n<h2>image-set() support</h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/image-set()\"><code>image-set()</code></a> function provides a mechanism in CSS to allow the browser to pick the most suitable image for the device&#8217;s resolution from a list of options, in a similar manner to the HTML <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images#resolution_switching_same_size_different_resolutions\"><code>srcset</code> attribute</a>. For example, the following can be used to provide multiple <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/background-image\"><code>background-image</code>s</a> to choose from:</p>\n<pre><code class=\"language-css\">div {\n  background-image: image-set(\n    url(\"small-balloons.jpg\") 1x,\n    url(\"large-balloons.jpg\") 2x);\n}</code></pre>\n<p>You can also use <code>image-set()</code> as a value for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/content\"><code>content</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\"><code>cursor</code></a> properties. So for example, you could provide multiple resolutions for generated content:</p>\n<pre><code class=\"language-css\">h2::before {\n  content: image-set(\n    url(\"small-icon.jpg\") 1x,\n    url(\"large-icon.jpg\") 2x);\n}</code></pre>\n<p>or custom cursors:</p>\n<pre><code class=\"language-css\">div {\n  cursor: image-set(\n    url(\"custom-cursor-small.png\") 1x,\n    url(\"custom-cursor-large.png\") 2x),\n    auto;\n}</code></pre>\n<h2>outline now follows border-radius shape</h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/outline\"><code>outline</code></a> CSS property has been updated so that it now follows the outline shape created by <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius\"><code>border-radius</code></a>. It is really nice to see a fix included in Firefox for this long standing problem. As part of this work the non-standard <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-outline-radius\"><code>-moz-outline-radius</code></a> property has been removed.</p>\n<h2>RegExp match indices</h2>\n<p>Firefox 88 supports the <strong>match indices</strong> feature of regular expressions, which makes an <code>indices</code> property available containing an array that stores the start and end positions of each matched capture group. This functionality is enabled using the <code>d</code> flag.</p>\n<p>There is also a corresponding <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>hasIndices</code></a> boolean property that allows you to check whether a regex has this mode enabled.</p>\n<p>So for example:</p>\n<pre><code class=\"language-js\">const regex1 = new RegExp('foo', 'd');\nregex1.hasIndices // true\nconst test = regex1.exec('foo bar');\ntest // [ \"foo\" ]\ntest.indices // [ [ 0, 3 ] ]</code></pre>\n<p>For more useful information, see our <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\">RegExp.prototype.exec()</a> page, and <a href=\"https://v8.dev/features/regexp-match-indices\">RegExp match indices</a> on the V8 dev blog.</p>\n<h2>FTP support disabled</h2>\n<p>FTP support has been disabled from Firefox 88 onwards, and its full removal is (currently) planned for Firefox version 90. Addressing this security risk reduces the likelihood of an attack while also removing support for a non-encrypted protocol.</p>\n<p>Complementing this change, the extension setting<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/ftpProtocolEnabled\"> browserSettings.ftpProtocolEnabled</a> has been made read-only, and web extensions can now register themselves as<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/protocol_handlers\"> protocol handlers</a> for FTP.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/04/never-too-late-for-firefox-88/\">Never too late for Firefox 88</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"April is upon us, and we have a most timely release for you — Firefox 88. In this release you will find a bunch of nice CSS additions including :user-valid and :user-invalid support and image-set() support, support for regular expression match indices, removal of FTP protocol support for enhanced security, and more!\nThis blog post provides merely a set of highlights; for all the details, check out the following:\nFirefox 88 for developers on MDN\nFirefox 88 end-user release notes\n:user-valid and :user-invalid\nThere are a large number of HTML form-related pseudo-classes that allow us to specify styles for various data validity states, as you’ll see in our UI pseudo-classes tutorial. Firefox 88 introduces two more — :user-valid and :user-invalid.\nYou might be thinking “we already have :valid and :invalid for styling forms containing valid or invalid data — what’s the difference here?”\n:user-valid and :user-invalid are similar, but have been designed with better user experience in mind. They effectively do the same thing — matching a form input that contains valid or invaid data — but :user-valid and :user-invalid only start matching after the user has stopped focusing on the element (e.g. by tabbing to the next input). This is a subtle but useful change, which we will now demonstrate.\nTake our valid-invalid.html example. This uses the following CSS to provide clear indicators as to which fields contain valid and invalid data:\ninput:invalid {\n  border: 2px solid red;\n}\n\ninput:invalid + span::before {\n  content: '✖';\n  color: red;\n}\n\ninput:valid + span::before {\n  content: '✓';\n  color: green;\n}\nThe problem with this is shown when you try to enter data into the “E-mail address” field — as soon as you start typing an email address into the field the invalid styling kicks in, and remains right up until the point where the entered text constitutes a valid e-mail address. This experience can be a bit jarring, making the user think they are doing something wrong when they aren’t.\nNow consider our user-valid-invalid.html example. This includes nearly the same CSS, except that it uses the newer :user-valid and :user-invalid pseudo-classes:\ninput:user-invalid {\n  border: 2px solid red;\n}\n\ninput:user-invalid + span::before {\n  content: '✖';\n  color: red;\n}\n\ninput:user-valid + span::before {\n  content: '✓';\n  color: green;\n}\nIn this example the valid/invalid styling only kicks in when the user has entered their value and removed focus from the input, giving them a chance to enter their complete value before receiving feedback. Much better!\nNote: Previously to Firefox 88, the same effect could be achieved using the proprietary :-moz-ui-invalid and :-moz-ui-valid pseudo-classes.\nimage-set() support\nThe image-set() function provides a mechanism in CSS to allow the browser to pick the most suitable image for the device’s resolution from a list of options, in a similar manner to the HTML srcset attribute. For example, the following can be used to provide multiple background-images to choose from:\ndiv {\n  background-image: image-set(\n    url(\"small-balloons.jpg\") 1x,\n    url(\"large-balloons.jpg\") 2x);\n}\nYou can also use image-set() as a value for the content and cursor properties. So for example, you could provide multiple resolutions for generated content:\nh2::before {\n  content: image-set(\n    url(\"small-icon.jpg\") 1x,\n    url(\"large-icon.jpg\") 2x);\n}\nor custom cursors:\ndiv {\n  cursor: image-set(\n    url(\"custom-cursor-small.png\") 1x,\n    url(\"custom-cursor-large.png\") 2x),\n    auto;\n}\noutline now follows border-radius shape\nThe outline CSS property has been updated so that it now follows the outline shape created by border-radius. It is really nice to see a fix included in Firefox for this long standing problem. As part of this work the non-standard -moz-outline-radius property has been removed.\nRegExp match indices\nFirefox 88 supports the match indices feature of regular expressions, which makes an indices property available containing an array that stores the start and end positions of each matched capture group. This functionality is enabled using the d flag.\nThere is also a corresponding hasIndices boolean property that allows you to check whether a regex has this mode enabled.\nSo for example:\nconst regex1 = new RegExp('foo', 'd');\nregex1.hasIndices // true\nconst test = regex1.exec('foo bar');\ntest // [ \"foo\" ]\ntest.indices // [ [ 0, 3 ] ]\nFor more useful information, see our RegExp.prototype.exec() page, and RegExp match indices on the V8 dev blog.\nFTP support disabled\nFTP support has been disabled from Firefox 88 onwards, and its full removal is (currently) planned for Firefox version 90. Addressing this security risk reduces the likelihood of an attack while also removing support for a non-encrypted protocol.\nComplementing this change, the extension setting browserSettings.ftpProtocolEnabled has been made read-only, and web extensions can now register themselves as protocol handlers for FTP.\nThe post Never too late for Firefox 88 appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Chris Mills","comments":"https://hacks.mozilla.org/2021/04/never-too-late-for-firefox-88/#comments","content":"<p>April is upon us, and we have a most timely release for you — Firefox 88. In this release you will find a bunch of nice CSS additions including :user-valid and :user-invalid support and image-set() support, support for regular expression match indices, removal of FTP protocol support for enhanced security, and more! This blog post [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/04/never-too-late-for-firefox-88/\">Never too late for Firefox 88</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"April is upon us, and we have a most timely release for you — Firefox 88. In this release you will find a bunch of nice CSS additions including :user-valid and :user-invalid support and image-set() support, support for regular expression match indices, removal of FTP protocol support for enhanced security, and more! This blog post […]\nThe post Never too late for Firefox 88 appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47224","categories":["Featured Article","Firefox","Firefox Releases","MDN","css","ftp","image-set","match indices","outline","RegExp","user-invalid","user-valid"],"isoDate":"2021-04-19T15:18:52.000Z","timestamp":"4/19/2021"},{"creator":"Dragana Damjanovic","title":"QUIC and HTTP/3 Support now in Firefox Nightly and Beta","link":"https://hacks.mozilla.org/2021/04/quic-and-http-3-support-now-in-firefox-nightly-and-beta/","pubDate":"Fri, 16 Apr 2021 20:04:21 +0000","content:encoded":"<p><strong>tl;dr:</strong> Support for <a href=\"https://tools.ietf.org/html/draft-ietf-quic-transport-34\">QUIC</a> and <a href=\"https://tools.ietf.org/html/draft-ietf-quic-http-34\">HTTP/3</a> is now enabled by default in <a href=\"https://www.mozilla.org/en-US/firefox/nightly/all/\">Firefox Nightly</a> and <a href=\"https://www.mozilla.org/en-US/firefox/all/#product-desktop-beta\">Firefox Beta.</a> We are planning to start rollout on the release in Firefox Stable Release 88. HTTP/3 will be available by default by the end of May.</p>\n<h2>What is HTTP/3?</h2>\n<p>HTTP/3 is a new version of HTTP (the protocol that powers the Web) that is based on QUIC. HTTP/3 has three main performance improvements over HTTP/2:</p>\n<ul>\n<li aria-level=\"1\">Because it is based on UDP it takes less time to connect;</li>\n<li aria-level=\"1\">It does not have head of line blocking, where delays in delivering packets cause an entire connection to be delayed; and</li>\n<li aria-level=\"1\">It is better able to detect and repair packet loss.</li>\n</ul>\n<p>QUIC also provides connection migration and other features that should improve performance and reliability. For more on QUIC, see this <a href=\"https://blog.cloudflare.com/http-3-from-root-to-tip/\">excellent blog post</a> from Cloudflare.</p>\n<h2>How to use it?</h2>\n<p><a href=\"https://www.mozilla.org/en-US/firefox/nightly/all/\">Firefox Nightly</a> and <a href=\"https://www.mozilla.org/en-US/firefox/all/#product-desktop-beta\">Firefox Beta</a> will automatically try to use HTTP/3 if offered by the Web server (for instance, Google or Facebook). Web servers can indicate support by using the <a href=\"https://tools.ietf.org/html/rfc7838\">Alt-Svc</a> response header or by advertising HTTP/3 support with a <a href=\"https://tools.ietf.org/html/draft-ietf-dnsop-svcb-https-03\">HTTPS</a> DNS record. Both the client and server must support the same QUIC and HTTP/3 draft version to connect with each other. For example, Firefox currently supports drafts 27 to 32 of the specification, so the server must report support of one of these versions (e.g., “h3-32”) in Alt-Svc or HTTPS record for Firefox to try to use QUIC and HTTP/3 with that server. When visiting such a website, viewing the network request information in Dev Tools should show the Alt-Svc header, and also indicate that HTTP/3 was used.</p>\n<p>If you encounter issues with these or other sites, please file a bug in <a href=\"https://bugzilla.mozilla.org/enter_bug.cgi?product=Core&amp;component=Networking%3A+HTTP\">Bugzilla</a>.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/04/quic-and-http-3-support-now-in-firefox-nightly-and-beta/\">QUIC and HTTP/3 Support now in Firefox Nightly and Beta</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"tl;dr: Support for QUIC and HTTP/3 is now enabled by default in Firefox Nightly and Firefox Beta. We are planning to start rollout on the release in Firefox Stable Release 88. HTTP/3 will be available by default by the end of May.\nWhat is HTTP/3?\nHTTP/3 is a new version of HTTP (the protocol that powers the Web) that is based on QUIC. HTTP/3 has three main performance improvements over HTTP/2:\nBecause it is based on UDP it takes less time to connect;\nIt does not have head of line blocking, where delays in delivering packets cause an entire connection to be delayed; and\nIt is better able to detect and repair packet loss.\nQUIC also provides connection migration and other features that should improve performance and reliability. For more on QUIC, see this excellent blog post from Cloudflare.\nHow to use it?\nFirefox Nightly and Firefox Beta will automatically try to use HTTP/3 if offered by the Web server (for instance, Google or Facebook). Web servers can indicate support by using the Alt-Svc response header or by advertising HTTP/3 support with a HTTPS DNS record. Both the client and server must support the same QUIC and HTTP/3 draft version to connect with each other. For example, Firefox currently supports drafts 27 to 32 of the specification, so the server must report support of one of these versions (e.g., “h3-32”) in Alt-Svc or HTTPS record for Firefox to try to use QUIC and HTTP/3 with that server. When visiting such a website, viewing the network request information in Dev Tools should show the Alt-Svc header, and also indicate that HTTP/3 was used.\nIf you encounter issues with these or other sites, please file a bug in Bugzilla.\nThe post QUIC and HTTP/3 Support now in Firefox Nightly and Beta appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Dragana Damjanovic","comments":"https://hacks.mozilla.org/2021/04/quic-and-http-3-support-now-in-firefox-nightly-and-beta/#comments","content":"<p>Support for QUIC and HTTP/3 is now enabled by default in Firefox Nightly and Firefox Beta and we are planning to start a rollout on the release in Firefox Stable Release 88. HTTP/3 will be available by default by the end of May.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/04/quic-and-http-3-support-now-in-firefox-nightly-and-beta/\">QUIC and HTTP/3 Support now in Firefox Nightly and Beta</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"Support for QUIC and HTTP/3 is now enabled by default in Firefox Nightly and Firefox Beta and we are planning to start a rollout on the release in Firefox Stable Release 88. HTTP/3 will be available by default by the end of May.\nThe post QUIC and HTTP/3 Support now in Firefox Nightly and Beta appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47216","categories":["Featured Article","Firefox","firefox","Firefox Beta","HTTP","quic"],"isoDate":"2021-04-16T20:04:21.000Z","timestamp":"4/16/2021"},{"creator":"Christian Holler","title":"Eliminating Data Races in Firefox – A Technical Report","link":"https://hacks.mozilla.org/2021/04/eliminating-data-races-in-firefox-a-technical-report/","pubDate":"Tue, 06 Apr 2021 15:21:46 +0000","content:encoded":"<p>We successfully deployed <em>ThreadSanitizer</em> in the Firefox project to eliminate data races in our remaining C/C++ components. In the process, we found several impactful bugs and can safely say that data races are often underestimated in terms of their impact on program correctness. We recommend that all multithreaded C/C++ projects adopt the ThreadSanitizer tool to enhance code quality.<br />\n<span id=\"more-47163\"></span></p>\n<h2>What is ThreadSanitizer?</h2>\n<p><a href=\"https://clang.llvm.org/docs/ThreadSanitizer.html\" target=\"_blank\" rel=\"noopener\">ThreadSanitizer</a> (TSan) is compile-time instrumentation to detect <i>data races</i> according to the <a href=\"https://en.cppreference.com/w/cpp/language/memory_model\">C/C++ memory model</a> on Linux. It is important to note that these data races are considered <i>undefined behavior</i> within the C/C++ specification. As such, the compiler is free to assume that data races do not happen and perform optimizations under that assumption. Detecting bugs resulting from such optimizations can be hard, and data races often have an intermittent nature due to thread scheduling.</p>\n<p>Without a tool like ThreadSanitizer, even the most experienced developers can spend hours on locating such a bug. With ThreadSanitizer, you get a comprehensive data race report that often contains all of the information needed to fix the problem.</p>\n<p style=\"text-align: center;\"><img loading=\"lazy\" src=\"https://hacks.mozilla.org/files/2021/03/tsan-sample-race.png\" alt=\"An example for a ThreadSanitizer report, showing where each thread is reading/writing, the location they both access and where the threads were created.\" width=\"636\" height=\"50%\" /> <small>ThreadSanitizer Output for <a href=\"https://gist.github.com/choller/d625ecb4f245a4f466758b00dc254291\" target=\"_blank\" rel=\"noopener\">this example program</a> (shortened for article)</small></p>\n<p>One important property of TSan is that, when properly deployed, the data race detection does not produce false positives. This is incredibly important for tool adoption, as developers quickly lose faith in tools that produce uncertain results.</p>\n<p>Like other sanitizers, TSan is built into Clang and can be used with any recent Clang/LLVM toolchain. If your C/C++ project already uses e.g. AddressSanitizer (which we also highly recommend), deploying ThreadSanitizer will be very straightforward from a toolchain perspective.</p>\n<h2>Challenges in Deployment</h2>\n<h4>Benign vs. Impactful Bugs</h4>\n<p>Despite ThreadSanitizer being a very well designed tool, we had to overcome a variety of challenges at Mozilla during the deployment phase. The most significant issue we faced was that it is really difficult to prove that data races are actually harmful at all and that they impact the everyday use of Firefox. In particular, the term “<i>benign</i>” came up often. Benign data races acknowledge that a particular data race is actually a race, but assume that it does not have any negative side effects.</p>\n<p>While benign data races do exist, we found (in agreement with previous work on this subject <a href=\"https://software.intel.com/content/www/us/en/develop/blogs/benign-data-races-what-could-possibly-go-wrong.html\">[1]</a> <a href=\"https://www.usenix.org/legacy/event/hotpar11/tech/final_files/Boehm.pdf\">[2]</a>) that data races are very easily misclassified as benign. The reasons for this are clear: It is hard to reason about what compilers can and will optimize, and confirmation for certain “benign” data races requires you to look at the assembler code that the compiler finally produces.</p>\n<p>Needless to say, this procedure is often much more time consuming than fixing the actual data race and also not future-proof. As a result, we decided that the ultimate goal should be a <b>“no data races” policy</b> that declares even benign data races as undesirable due to their risk of misclassification, the required time for investigation and the potential risk from future compilers (with better optimizations) or future platforms (e.g. ARM).</p>\n<p>However, it was clear that establishing such a policy would require a lot of work, both on the technical side as well as in convincing developers and management. In particular, we could not expect a large amount of resources to be dedicated to fixing data races with no clear product impact. This is where TSan’s <b>suppression list</b> came in handy:</p>\n<p>We knew we had to stop the influx of new data races but at the same time get the tool usable without fixing all legacy issues. The suppression list (in particular <a href=\"https://searchfox.org/mozilla-central/rev/f47a4b67643b3048ef9a2e2ac0c34edf6d1ebff3/mozglue/build/TsanOptions.cpp\">the version compiled into Firefox</a>) allowed us to temporarily ignore data races once we had them on file and ultimately <a href=\"https://treeherder.mozilla.org/jobs?repo=mozilla-central&amp;searchStr=tsan\" target=\"_blank\" rel=\"noopener\">bring up a TSan build of Firefox in CI</a> that would automatically avoid further regressions. Of course, security bugs required specialized handling, but were usually easy to recognize (e.g. racing on non-thread safe pointers) and were fixed quickly without suppressions.</p>\n<p>To help us understand the impact of our work, we maintained an internal list of all the most serious races that TSan detected (ones that had side-effects or could cause crashes). This data helped convince developers that the tool was making their lives easier while also clearly justifying the work to management.</p>\n<p>In addition to this qualitative data, we also decided for a more quantitative approach: We looked at all the bugs we found over a year and how they were classified. Of the 64 bugs we looked at, 34% were classified as &#8220;benign&#8221; and 22% were &#8220;impactful&#8221; (the rest hadn&#8217;t been classified).</p>\n<p>We knew there was a certain amount of misclassified benign issues to be expected, but what we really wanted to know was: Do benign issues pose a risk to the project? Assuming that all of these issues truly had no impact on the product, are we wasting a lot of resources on fixing them? Thankfully, we found that <b>the majority of these fixes were trivial and/or improved code quality</b>.</p>\n<p>The trivial fixes were mostly turning non-atomic variables into atomics (20%), adding permanent suppressions for upstream issues that we couldn’t address immediately (15%), or removing overly complicated code (20%). Only 45% of the benign fixes actually required some sort of more elaborate patch (as in, the diff was larger than just a few lines of code and did not just remove code).</p>\n<p>We concluded that the risk of benign issues being a major resource sink was not an issue and well acceptable for the overall gains that the project provided.</p>\n<h4>False Positives?</h4>\n<p>As mentioned in the beginning, TSan does not produce false positive data race reports <i>when properly deployed</i>, which includes instrumenting all code that is loaded into the process and avoiding primitives that TSan doesn&#8217;t understand (such as <a href=\"https://en.cppreference.com/w/cpp/atomic/atomic_thread_fence\">atomic fences</a>). For most projects these conditions are trivial, but larger projects like Firefox require a bit more work. Thankfully this work largely amounted to a few lines in TSan&#8217;s robust suppression system.</p>\n<p>Instrumenting all code in Firefox isn&#8217;t currently possible because it needs to use shared system libraries like GTK and X11. Fortunately, TSan offers the “called_from_lib” feature that can be used <a href=\"https://searchfox.org/mozilla-central/rev/f47a4b67643b3048ef9a2e2ac0c34edf6d1ebff3/mfbt/TsanOptions.h#42\" target=\"_blank\" rel=\"noopener\">in the suppression list</a> to ignore any calls originating from those shared libraries. Our other major source of uninstrumented code was build flags not being properly passed around, which was especially problematic for Rust code (see the Rust section below).</p>\n<p>As for unsupported primitives, the only issue we ran into was the lack of support for fences. Most fences were the result of <a href=\"https://doc.rust-lang.org/1.50.0/src/alloc/sync.rs.html#1440-1468\" target=\"_blank\" rel=\"noopener\">a standard atomic reference counting idiom</a> which could be trivially <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1600312\" target=\"_blank\" rel=\"noopener\">replaced</a> with an atomic load in TSan builds. Unfortunately, fences are fundamental to the design of the <a href=\"https://crates.io/crates/crossbeam\" target=\"_blank\" rel=\"noopener\">crossbeam crate</a> (a foundational concurrency library in Rust), and the only solution for this was <a href=\"https://github.com/crossbeam-rs/crossbeam/issues/589#issuecomment-720972996\" target=\"_blank\" rel=\"noopener\">a suppression</a>.</p>\n<p>We also found that there is a (well known) <a href=\"https://github.com/google/sanitizers/issues/814\" target=\"_blank\" rel=\"noopener\">false positive in deadlock detection</a> that is however very easy to spot and also does not affect data race detection/reporting at all. In a nutshell, any deadlock report that only involves a single thread is likely this false positive.</p>\n<p>The only true false positive we found so far turned out to be a rare bug in TSan and was fixed in the tool itself. However, developers <b>claimed</b> on various occasions that a particular report must be a false positive. In all of these cases, it turned out that TSan was indeed right and the problem was just very subtle and hard to understand. This is again confirming that we need tools like TSan to help us eliminate this class of bugs.</p>\n<h2>Interesting Bugs</h2>\n<p>Currently, the TSan bug-o-rama contains around 20 bugs. We’re still working on fixes for some of these bugs and would like to point out several particularly interesting/impactful ones.</p>\n<h4>Beware Bitfields</h4>\n<p>Bitfields are a handy little convenience to save space for storing lots of different small values. For instance, rather than having 30 bools taking up 240 bytes, they can all be packed into 4 bytes. For the most part this works fine, but it has one nasty consequence: different pieces of data now alias. This means that accessing &#8220;neighboring&#8221; bitfields is actually accessing the same memory, and therefore a potential data race.</p>\n<p>In practical terms, this means that if two threads are writing to two neighboring bitfields, one of the writes can get lost, as both of those writes are actually read-modify-write operations of all the bitfields:</p>\n<p><script src=\"https://gist.github.com/choller/daa318bcd343e0d4ab24281cdc4be453.js\"></script></p>\n<p>If you&#8217;re familiar with bitfields and actively thinking about them, this might be obvious, but when you&#8217;re just saying myVal.isInitialized = true you may not think about or even realize that you&#8217;re accessing a bitfield.</p>\n<p>We have had many instances of this problem, but let&#8217;s look at <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1601940\">bug 1601940</a> and its (trimmed) race report:</p>\n<p><script src=\"https://gist.github.com/choller/770be7221ad70e76b7fbd924424236fc.js\"></script></p>\n<p>When we first saw this report, it was puzzling because the two threads in question touch different fields (<a href=\"https://searchfox.org/mozilla-central/rev/ea63a0888d406fae720cf24f4727d87569a8cab5/gfx/layers/apz/src/AsyncPanZoomController.h#1605\" target=\"_blank\" rel=\"noopener\">mAsyncTransformAppliedToContent</a> vs. <a href=\"https://searchfox.org/mozilla-central/rev/ea63a0888d406fae720cf24f4727d87569a8cab5/gfx/layers/apz/src/AsyncPanZoomController.cpp#4218\" target=\"_blank\" rel=\"noopener\">mTestAttributeAppliers</a>). However, as it turns out, these two fields are both <a href=\"https://searchfox.org/mozilla-central/rev/ea63a0888d406fae720cf24f4727d87569a8cab5/gfx/layers/apz/src/AsyncPanZoomController.h#1623-1626\" target=\"_blank\" rel=\"noopener\">adjacent bitfields in the class</a>.</p>\n<p>This was causing intermittent failures in our CI and <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1601940#c3\" target=\"_blank\" rel=\"noopener\">cost a maintainer of this code valuable time</a>. We find this bug particularly interesting because it demonstrates how hard it is to diagnose data races without appropriate tooling and we found more instances of this type of bug (racy bitfield write/write) in our codebase. One of the other instances even had the potential to cause network loads to supply invalid cache content, another hard-to-debug situation, especially when it is intermittent and therefore not easily reproducible.</p>\n<p>We encountered this enough that we eventually introduced a <a href=\"https://searchfox.org/mozilla-central/rev/26330a08b1f9d06938faa0aa5e0f8c7a58064aa2/mfbt/AtomicBitfields.h\" target=\"_blank\" rel=\"noopener\">MOZ_ATOMIC_BITFIELDS</a> macro that generates bitfields with atomic load/store methods. This allowed us to quickly fix problematic bitfields for the maintainers of each component without having to redesign their types.</p>\n<h4>Oops That Wasn&#8217;t Supposed To Be Multithreaded</h4>\n<p>We also found several instances of components which were explicitly designed to be single-threaded accidentally being used by multiple threads, such as <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1681950\" target=\"_blank\" rel=\"noopener\">bug 1681950</a>:</p>\n<p><script src=\"https://gist.github.com/choller/cfc1611b3cf5f46c0bd68450e1d72abe.js\"></script></p>\n<p>The race itself here is rather simple, we are racing on the same file through stat64 and understanding the report was not the problem this time. However, as can be seen from frame 10, this call originates from the <code>PreferencesWriter</code>, which is responsible for writing changes to the prefs.js file, the central storage for Firefox preferences.</p>\n<p>It was never intended for this to be called on multiple threads at the same time and we believe that this had the potential to corrupt the prefs.js file. As a result, during the next startup the file would fail to load and be discarded (reset to default prefs). Over the years, we’ve had quite a few bug reports related to this file magically losing its custom preferences but we were never able to find the root cause. We now believe that this bug is at least partially responsible for these losses.</p>\n<p>We think this is a particularly good example of a failure for two reasons: it was a race that had more harmful effects than just a crash, and it caught a larger logic error of something being used outside of its original design parameters.</p>\n<h4>Late-Validated Races</h4>\n<p>On several occasions we encountered a pattern that lies on the boundary of benign that we think merits some extra attention: intentionally racily reading a value, but then later doing checks that properly validate it. For instance, code like:</p>\n<p><script src=\"https://gist.github.com/choller/a76d62ec9b9635cbe289c3176a8c08f1.js\"></script></p>\n<p>See for example, <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1153409#c4\" target=\"_blank\" rel=\"noopener\">this instance we encountered in SQLite</a>.</p>\n<p><i>Please Don&#8217;t Do This</i>. These patterns are really fragile and they&#8217;re ultimately undefined behavior, even if they <i>generally </i>work right. Just write proper atomic code &#8212; you&#8217;ll usually find that the performance is perfectly fine.</p>\n<h2>What about Rust?</h2>\n<p>Another difficulty that we had to solve during TSan deployment was due to part of our codebase now being written in Rust, which has much less mature support for sanitizers. This meant that we spent a significant portion of our bringup with all Rust code suppressed while that tooling was still being developed.</p>\n<p>We weren&#8217;t particularly concerned with our Rust code having a lot of races, but rather races in C++ code being obfuscated by passing through Rust. In fact, we strongly recommend writing new projects entirely in Rust to avoid data races altogether.</p>\n<p>The hardest part in particular is the need to rebuild the Rust standard library with TSan instrumentation. On nightly there is an unstable feature, -Zbuild-std, that lets us do exactly that, but it still has a lot of rough edges.</p>\n<p>Our biggest hurdle with build-std was that it&#8217;s currently incompatible with vendored build environments, which Firefox uses. Fixing this isn&#8217;t simple because cargo&#8217;s tools for patching in dependencies aren&#8217;t designed for affecting only a subgraph (i.e. just std and not your own code). So far, we have mitigated this by maintaining a small set of patches on top of rustc/cargo which implement this well-enough for Firefox but need <a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues/23\">further work to go upstream</a>.</p>\n<p>But with build-std hacked into working for us we were able to instrument our Rust code and were happy to find that there were very few problems! Most of the things we discovered were C++ races that happened to pass through some Rust code and had therefore been hidden by our blanket suppressions.</p>\n<p>We did however find two pure Rust races:</p>\n<p>The first was <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1674770\" target=\"_blank\" rel=\"noopener\">bug 1674770</a>, which was a bug in the parking_lot library. This Rust library provides synchronization primitives and other concurrency tools and is written and maintained by experts. We did not investigate the impact but the issue was a couple atomic orderings being too weak and <a href=\"https://github.com/Amanieu/parking_lot/pull/260\" target=\"_blank\" rel=\"noopener\">was fixed</a> quickly by the authors. This is yet another example that proves how difficult it is to write bug-free concurrent code.</p>\n<p>The second was <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1686158\" target=\"_blank\" rel=\"noopener\">bug 1686158</a>, which was some code in WebRender&#8217;s software OpenGL shim. They were maintaining some hand-rolled shared-mutable state using raw atomics for part of the implementation but forgot to make one of the fields atomic. This was easy enough to fix.</p>\n<p>Overall Rust appears to be fulfilling one of its original design goals: allowing us to write more concurrent code safely. Both WebRender and Stylo are very large and pervasively multi-threaded, but have had minimal threading issues. What issues we did find were mistakes in the implementations of low-level and explicitly unsafe multithreading abstractions &#8212; and those mistakes were simple to fix.</p>\n<p>This is in contrast to many of our C++ races, which often involved things being randomly accessed on different threads with unclear semantics, necessitating non-trivial refactorings of the code.</p>\n<h2>Conclusion</h2>\n<p>Data races are an underestimated problem. Due to their complexity and intermittency, we often struggle to identify them, locate their cause and judge their impact correctly. In many cases, this is also a time-consuming process, wasting valuable resources. ThreadSanitizer has proven to be not just <b>effective in locating data races </b>and<b> providing adequate debug information</b>, but also to be <b>practical</b> even on a project as large as Firefox.</p>\n<h2>Acknowledgements</h2>\n<p>We would like to thank the authors of ThreadSanitizer for providing the tool and in particular Dmitry Vyukov (Google) for helping us with some complex, Firefox-specific edge cases during deployment.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/04/eliminating-data-races-in-firefox-a-technical-report/\">Eliminating Data Races in Firefox &#8211; A Technical Report</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"We successfully deployed ThreadSanitizer in the Firefox project to eliminate data races in our remaining C/C++ components. In the process, we found several impactful bugs and can safely say that data races are often underestimated in terms of their impact on program correctness. We recommend that all multithreaded C/C++ projects adopt the ThreadSanitizer tool to enhance code quality.\n\nWhat is ThreadSanitizer?\nThreadSanitizer (TSan) is compile-time instrumentation to detect data races according to the C/C++ memory model on Linux. It is important to note that these data races are considered undefined behavior within the C/C++ specification. As such, the compiler is free to assume that data races do not happen and perform optimizations under that assumption. Detecting bugs resulting from such optimizations can be hard, and data races often have an intermittent nature due to thread scheduling.\nWithout a tool like ThreadSanitizer, even the most experienced developers can spend hours on locating such a bug. With ThreadSanitizer, you get a comprehensive data race report that often contains all of the information needed to fix the problem.\n ThreadSanitizer Output for this example program (shortened for article)\nOne important property of TSan is that, when properly deployed, the data race detection does not produce false positives. This is incredibly important for tool adoption, as developers quickly lose faith in tools that produce uncertain results.\nLike other sanitizers, TSan is built into Clang and can be used with any recent Clang/LLVM toolchain. If your C/C++ project already uses e.g. AddressSanitizer (which we also highly recommend), deploying ThreadSanitizer will be very straightforward from a toolchain perspective.\nChallenges in Deployment\nBenign vs. Impactful Bugs\nDespite ThreadSanitizer being a very well designed tool, we had to overcome a variety of challenges at Mozilla during the deployment phase. The most significant issue we faced was that it is really difficult to prove that data races are actually harmful at all and that they impact the everyday use of Firefox. In particular, the term “benign” came up often. Benign data races acknowledge that a particular data race is actually a race, but assume that it does not have any negative side effects.\nWhile benign data races do exist, we found (in agreement with previous work on this subject [1] [2]) that data races are very easily misclassified as benign. The reasons for this are clear: It is hard to reason about what compilers can and will optimize, and confirmation for certain “benign” data races requires you to look at the assembler code that the compiler finally produces.\nNeedless to say, this procedure is often much more time consuming than fixing the actual data race and also not future-proof. As a result, we decided that the ultimate goal should be a “no data races” policy that declares even benign data races as undesirable due to their risk of misclassification, the required time for investigation and the potential risk from future compilers (with better optimizations) or future platforms (e.g. ARM).\nHowever, it was clear that establishing such a policy would require a lot of work, both on the technical side as well as in convincing developers and management. In particular, we could not expect a large amount of resources to be dedicated to fixing data races with no clear product impact. This is where TSan’s suppression list came in handy:\nWe knew we had to stop the influx of new data races but at the same time get the tool usable without fixing all legacy issues. The suppression list (in particular the version compiled into Firefox) allowed us to temporarily ignore data races once we had them on file and ultimately bring up a TSan build of Firefox in CI that would automatically avoid further regressions. Of course, security bugs required specialized handling, but were usually easy to recognize (e.g. racing on non-thread safe pointers) and were fixed quickly without suppressions.\nTo help us understand the impact of our work, we maintained an internal list of all the most serious races that TSan detected (ones that had side-effects or could cause crashes). This data helped convince developers that the tool was making their lives easier while also clearly justifying the work to management.\nIn addition to this qualitative data, we also decided for a more quantitative approach: We looked at all the bugs we found over a year and how they were classified. Of the 64 bugs we looked at, 34% were classified as “benign” and 22% were “impactful” (the rest hadn’t been classified).\nWe knew there was a certain amount of misclassified benign issues to be expected, but what we really wanted to know was: Do benign issues pose a risk to the project? Assuming that all of these issues truly had no impact on the product, are we wasting a lot of resources on fixing them? Thankfully, we found that the majority of these fixes were trivial and/or improved code quality.\nThe trivial fixes were mostly turning non-atomic variables into atomics (20%), adding permanent suppressions for upstream issues that we couldn’t address immediately (15%), or removing overly complicated code (20%). Only 45% of the benign fixes actually required some sort of more elaborate patch (as in, the diff was larger than just a few lines of code and did not just remove code).\nWe concluded that the risk of benign issues being a major resource sink was not an issue and well acceptable for the overall gains that the project provided.\nFalse Positives?\nAs mentioned in the beginning, TSan does not produce false positive data race reports when properly deployed, which includes instrumenting all code that is loaded into the process and avoiding primitives that TSan doesn’t understand (such as atomic fences). For most projects these conditions are trivial, but larger projects like Firefox require a bit more work. Thankfully this work largely amounted to a few lines in TSan’s robust suppression system.\nInstrumenting all code in Firefox isn’t currently possible because it needs to use shared system libraries like GTK and X11. Fortunately, TSan offers the “called_from_lib” feature that can be used in the suppression list to ignore any calls originating from those shared libraries. Our other major source of uninstrumented code was build flags not being properly passed around, which was especially problematic for Rust code (see the Rust section below).\nAs for unsupported primitives, the only issue we ran into was the lack of support for fences. Most fences were the result of a standard atomic reference counting idiom which could be trivially replaced with an atomic load in TSan builds. Unfortunately, fences are fundamental to the design of the crossbeam crate (a foundational concurrency library in Rust), and the only solution for this was a suppression.\nWe also found that there is a (well known) false positive in deadlock detection that is however very easy to spot and also does not affect data race detection/reporting at all. In a nutshell, any deadlock report that only involves a single thread is likely this false positive.\nThe only true false positive we found so far turned out to be a rare bug in TSan and was fixed in the tool itself. However, developers claimed on various occasions that a particular report must be a false positive. In all of these cases, it turned out that TSan was indeed right and the problem was just very subtle and hard to understand. This is again confirming that we need tools like TSan to help us eliminate this class of bugs.\nInteresting Bugs\nCurrently, the TSan bug-o-rama contains around 20 bugs. We’re still working on fixes for some of these bugs and would like to point out several particularly interesting/impactful ones.\nBeware Bitfields\nBitfields are a handy little convenience to save space for storing lots of different small values. For instance, rather than having 30 bools taking up 240 bytes, they can all be packed into 4 bytes. For the most part this works fine, but it has one nasty consequence: different pieces of data now alias. This means that accessing “neighboring” bitfields is actually accessing the same memory, and therefore a potential data race.\nIn practical terms, this means that if two threads are writing to two neighboring bitfields, one of the writes can get lost, as both of those writes are actually read-modify-write operations of all the bitfields:\n\nIf you’re familiar with bitfields and actively thinking about them, this might be obvious, but when you’re just saying myVal.isInitialized = true you may not think about or even realize that you’re accessing a bitfield.\nWe have had many instances of this problem, but let’s look at bug 1601940 and its (trimmed) race report:\n\nWhen we first saw this report, it was puzzling because the two threads in question touch different fields (mAsyncTransformAppliedToContent vs. mTestAttributeAppliers). However, as it turns out, these two fields are both adjacent bitfields in the class.\nThis was causing intermittent failures in our CI and cost a maintainer of this code valuable time. We find this bug particularly interesting because it demonstrates how hard it is to diagnose data races without appropriate tooling and we found more instances of this type of bug (racy bitfield write/write) in our codebase. One of the other instances even had the potential to cause network loads to supply invalid cache content, another hard-to-debug situation, especially when it is intermittent and therefore not easily reproducible.\nWe encountered this enough that we eventually introduced a MOZ_ATOMIC_BITFIELDS macro that generates bitfields with atomic load/store methods. This allowed us to quickly fix problematic bitfields for the maintainers of each component without having to redesign their types.\nOops That Wasn’t Supposed To Be Multithreaded\nWe also found several instances of components which were explicitly designed to be single-threaded accidentally being used by multiple threads, such as bug 1681950:\n\nThe race itself here is rather simple, we are racing on the same file through stat64 and understanding the report was not the problem this time. However, as can be seen from frame 10, this call originates from the PreferencesWriter, which is responsible for writing changes to the prefs.js file, the central storage for Firefox preferences.\nIt was never intended for this to be called on multiple threads at the same time and we believe that this had the potential to corrupt the prefs.js file. As a result, during the next startup the file would fail to load and be discarded (reset to default prefs). Over the years, we’ve had quite a few bug reports related to this file magically losing its custom preferences but we were never able to find the root cause. We now believe that this bug is at least partially responsible for these losses.\nWe think this is a particularly good example of a failure for two reasons: it was a race that had more harmful effects than just a crash, and it caught a larger logic error of something being used outside of its original design parameters.\nLate-Validated Races\nOn several occasions we encountered a pattern that lies on the boundary of benign that we think merits some extra attention: intentionally racily reading a value, but then later doing checks that properly validate it. For instance, code like:\n\nSee for example, this instance we encountered in SQLite.\nPlease Don’t Do This. These patterns are really fragile and they’re ultimately undefined behavior, even if they generally work right. Just write proper atomic code — you’ll usually find that the performance is perfectly fine.\nWhat about Rust?\nAnother difficulty that we had to solve during TSan deployment was due to part of our codebase now being written in Rust, which has much less mature support for sanitizers. This meant that we spent a significant portion of our bringup with all Rust code suppressed while that tooling was still being developed.\nWe weren’t particularly concerned with our Rust code having a lot of races, but rather races in C++ code being obfuscated by passing through Rust. In fact, we strongly recommend writing new projects entirely in Rust to avoid data races altogether.\nThe hardest part in particular is the need to rebuild the Rust standard library with TSan instrumentation. On nightly there is an unstable feature, -Zbuild-std, that lets us do exactly that, but it still has a lot of rough edges.\nOur biggest hurdle with build-std was that it’s currently incompatible with vendored build environments, which Firefox uses. Fixing this isn’t simple because cargo’s tools for patching in dependencies aren’t designed for affecting only a subgraph (i.e. just std and not your own code). So far, we have mitigated this by maintaining a small set of patches on top of rustc/cargo which implement this well-enough for Firefox but need further work to go upstream.\nBut with build-std hacked into working for us we were able to instrument our Rust code and were happy to find that there were very few problems! Most of the things we discovered were C++ races that happened to pass through some Rust code and had therefore been hidden by our blanket suppressions.\nWe did however find two pure Rust races:\nThe first was bug 1674770, which was a bug in the parking_lot library. This Rust library provides synchronization primitives and other concurrency tools and is written and maintained by experts. We did not investigate the impact but the issue was a couple atomic orderings being too weak and was fixed quickly by the authors. This is yet another example that proves how difficult it is to write bug-free concurrent code.\nThe second was bug 1686158, which was some code in WebRender’s software OpenGL shim. They were maintaining some hand-rolled shared-mutable state using raw atomics for part of the implementation but forgot to make one of the fields atomic. This was easy enough to fix.\nOverall Rust appears to be fulfilling one of its original design goals: allowing us to write more concurrent code safely. Both WebRender and Stylo are very large and pervasively multi-threaded, but have had minimal threading issues. What issues we did find were mistakes in the implementations of low-level and explicitly unsafe multithreading abstractions — and those mistakes were simple to fix.\nThis is in contrast to many of our C++ races, which often involved things being randomly accessed on different threads with unclear semantics, necessitating non-trivial refactorings of the code.\nConclusion\nData races are an underestimated problem. Due to their complexity and intermittency, we often struggle to identify them, locate their cause and judge their impact correctly. In many cases, this is also a time-consuming process, wasting valuable resources. ThreadSanitizer has proven to be not just effective in locating data races and providing adequate debug information, but also to be practical even on a project as large as Firefox.\nAcknowledgements\nWe would like to thank the authors of ThreadSanitizer for providing the tool and in particular Dmitry Vyukov (Google) for helping us with some complex, Firefox-specific edge cases during deployment.\nThe post Eliminating Data Races in Firefox – A Technical Report appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Christian Holler","comments":"https://hacks.mozilla.org/2021/04/eliminating-data-races-in-firefox-a-technical-report/#comments","content":"<p>We successfully deployed ThreadSanitizer in the Firefox project to eliminate data races in our remaining C/C++ components. In the process, we found several impactful bugs and can safely say that data races are often underestimated in terms of their impact on program correctness. We recommend that all multithreaded C/C++ projects adopt the ThreadSanitizer tool to enhance code quality.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/04/eliminating-data-races-in-firefox-a-technical-report/\">Eliminating Data Races in Firefox &#8211; A Technical Report</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"We successfully deployed ThreadSanitizer in the Firefox project to eliminate data races in our remaining C/C++ components. In the process, we found several impactful bugs and can safely say that data races are often underestimated in terms of their impact on program correctness. We recommend that all multithreaded C/C++ projects adopt the ThreadSanitizer tool to enhance code quality.\nThe post Eliminating Data Races in Firefox – A Technical Report appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47163","categories":["Debugging","Developer Tools","Featured Article","Firefox","Security","Stability","Testing","Tools","data races","fuzzing","sanitizers","security","undefined behavior"],"isoDate":"2021-04-06T15:21:46.000Z","timestamp":"4/6/2021"},{"creator":"Chris Mills","title":"A web testing deep dive: The MDN web testing report","link":"https://hacks.mozilla.org/2021/04/a-web-testing-deep-dive-the-mdn-web-testing-report/","pubDate":"Thu, 01 Apr 2021 14:53:46 +0000","content:encoded":"<p>For the last couple of years, we&#8217;ve run the MDN Web Developer Needs Assessment (DNA) Report, which aims to highlight the key issues faced by developers building web sites and applications. This has proved to be an invaluable source of data for browser vendors and other organizations to prioritize improvements to the web platform. This year we did a deep dive into web testing, and we are delighted to be able to announce the publication of this follow-on work, available at our <a href=\"https://insights.developer.mozilla.org/\">insights.developer.mozilla.org</a> site along with our other Web DNA publications.</p>\n<h2>Why web testing?</h2>\n<p>In the Web DNA studies for <a href=\"https://insights.developer.mozilla.org/reports/mdn-web-developer-needs-assessment-2019.html\">2019</a> and <a href=\"https://insights.developer.mozilla.org/reports/mdn-web-developer-needs-assessment-2020.html\">2020</a>, developers ranked the need &#8220;Having to support specific browsers, (e.g., IE11)&#8221; as the most frustrating aspect of web development, among 28 needs. The 2nd and 3rd rankings were also related to browser compatibility:</p>\n<ol start=\"2\">\n<li>Avoiding or removing a feature that doesn&#8217;t work across browsers</li>\n<li>Making a design look/work the same across browsers</li>\n</ol>\n<p>In 2020, we released our <a href=\"https://insights.developer.mozilla.org/reports/mdn-browser-compatibility-report-2020.html\">browser compatibility research results</a> — a deeper dive into identifying specific issues around browser compatibility and pinpointing what can be done to mitigate these issues.</p>\n<p>This year we decided to follow up with another deep dive focused on the 4th most frustrating aspect of developing for the web, &#8220;Testing across browsers.&#8221; It follows on nicely from the previous deep dive, and also concerns much-sought-after information.</p>\n<p>You can download this report directly — see the <a href=\"https://insights.developer.mozilla.org/reports/pdf/MDN-Web-Testing-Report-2021.pdf\">Web Testing Report (PDF, 0.6MB)</a>.</p>\n<h2>A new question for 2020</h2>\n<p>Based on the 2019 ranking of &#8220;testing across browsers&#8221;, we introduced a new question to the DNA survey in 2020: &#8220;What are the biggest pain points for you when it comes to web testing?&#8221; We wanted to understand more about this need and what some of the underlying issues are.</p>\n<p>Respondents could choose one or more of the following answers:</p>\n<ul>\n<li>Time spent on manual testing (e.g. due to lack of automation).</li>\n<li>Slow-running tests.</li>\n<li>Running tests across multiple browsers.</li>\n<li>Test failures are hard to debug or reproduce.</li>\n<li>Lack of debug tooling support (browser dev tools or IDE integration).</li>\n<li>Difficulty diagnosing performance issues.</li>\n<li>Tests are difficult to write.</li>\n<li>Difficult to set up an adequate test environment.</li>\n<li>No pain points.</li>\n<li>Other.</li>\n</ul>\n<h2>Results summary</h2>\n<p>7.5% of respondents (out of 6,645) said they don&#8217;t have pain points with web testing. For those who did, the biggest pain point is the time spent on manual testing.</p>\n<p>To better understand the nuances behind these results, we ran a qualitative study on web testing. The study consisted of twenty one-hour interviews with web developers who took the 2020 DNA survey and agreed to participate in follow-up research.</p>\n<p>The results will help browser vendors understand whether to accelerate work on <a href=\"https://w3c.github.io/webdriver-bidi/\">WebDriver Bidirectional Protocol (BiDi) </a>or if the unmet needs lie elsewhere. Our analysis on WebDriver BiDi is based on the assumption that the feature gap between single-browser test tooling and cross-browser test tooling is a source of pain. Future research on the struggles developers have will be able to focus the priorities and technical design of that specification to address the pain points.</p>\n<h3>Key Takeaways</h3>\n<ul>\n<li>In the 2020 Web DNA report, we included the results of a segmentation study. One of the seven segments that emerged was &#8220;Testing Technicians&#8221;. The name implies that the segment does testing and therefore finds frustration while doing tests. This is correct, but what’s also true is that developers commonly see a high entry barrier to testing, which contributes to their frustration.</li>\n<li>Defining a testing workflow, choosing tools, writing tests, and running tests all take time. Many developers face pressure to develop and launch products under tight deadlines. Testing or not testing is a tradeoff between the perceived value that testing adds compared to the time it will take to implement.</li>\n<li>Some developers are aware of testing but limited by their lack of knowledge in the area. This lack of knowledge is a barrier to successfully implementing a testing strategy. Other developers are aware of what testing is and how to do it, but they still consider it frustrating. Rather than lacking knowledge, this second group lacks the time and resources to run tests to the degree that they&#8217;d ideally like.</li>\n<li>For some developers, what constitutes a test type is unclear. Additionally, the line between coding and testing can be blurry.</li>\n<li>For developers who have established a testing workflow, the best way to describe how that came to be is <i>evolutionary</i>. The evolutionary workflow is generally being continuously improved.</li>\n<li>Browser vendors assumed unit testing to be a common type of testing and that it’s a well-developed space without a lot of pain points. However, what we learned is that there are more challenges with unit testing code that runs in the browser than anticipated, and there&#8217;s the same time pressure as elsewhere, meaning it doesn&#8217;t happen as frequently as expected.</li>\n<li>In the most general of summaries, one could conclude that testing should take less time than it does.</li>\n<li>Stakeholders had assumed that developers want to test their code in as many browsers as they can and they&#8217;re just limited by the browsers their tools support. What we learned is that the decision of which browsers they support does not depend on the tools they use. Conversely, what browsers they support drives the decisions for which tools they use.8</li>\n</ul>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/04/a-web-testing-deep-dive-the-mdn-web-testing-report/\">A web testing deep dive: The MDN web testing report</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"For the last couple of years, we’ve run the MDN Web Developer Needs Assessment (DNA) Report, which aims to highlight the key issues faced by developers building web sites and applications. This has proved to be an invaluable source of data for browser vendors and other organizations to prioritize improvements to the web platform. This year we did a deep dive into web testing, and we are delighted to be able to announce the publication of this follow-on work, available at our insights.developer.mozilla.org site along with our other Web DNA publications.\nWhy web testing?\nIn the Web DNA studies for 2019 and 2020, developers ranked the need “Having to support specific browsers, (e.g., IE11)” as the most frustrating aspect of web development, among 28 needs. The 2nd and 3rd rankings were also related to browser compatibility:\nAvoiding or removing a feature that doesn’t work across browsers\nMaking a design look/work the same across browsers\nIn 2020, we released our browser compatibility research results — a deeper dive into identifying specific issues around browser compatibility and pinpointing what can be done to mitigate these issues.\nThis year we decided to follow up with another deep dive focused on the 4th most frustrating aspect of developing for the web, “Testing across browsers.” It follows on nicely from the previous deep dive, and also concerns much-sought-after information.\nYou can download this report directly — see the Web Testing Report (PDF, 0.6MB).\nA new question for 2020\nBased on the 2019 ranking of “testing across browsers”, we introduced a new question to the DNA survey in 2020: “What are the biggest pain points for you when it comes to web testing?” We wanted to understand more about this need and what some of the underlying issues are.\nRespondents could choose one or more of the following answers:\nTime spent on manual testing (e.g. due to lack of automation).\nSlow-running tests.\nRunning tests across multiple browsers.\nTest failures are hard to debug or reproduce.\nLack of debug tooling support (browser dev tools or IDE integration).\nDifficulty diagnosing performance issues.\nTests are difficult to write.\nDifficult to set up an adequate test environment.\nNo pain points.\nOther.\nResults summary\n7.5% of respondents (out of 6,645) said they don’t have pain points with web testing. For those who did, the biggest pain point is the time spent on manual testing.\nTo better understand the nuances behind these results, we ran a qualitative study on web testing. The study consisted of twenty one-hour interviews with web developers who took the 2020 DNA survey and agreed to participate in follow-up research.\nThe results will help browser vendors understand whether to accelerate work on WebDriver Bidirectional Protocol (BiDi) or if the unmet needs lie elsewhere. Our analysis on WebDriver BiDi is based on the assumption that the feature gap between single-browser test tooling and cross-browser test tooling is a source of pain. Future research on the struggles developers have will be able to focus the priorities and technical design of that specification to address the pain points.\nKey Takeaways\nIn the 2020 Web DNA report, we included the results of a segmentation study. One of the seven segments that emerged was “Testing Technicians”. The name implies that the segment does testing and therefore finds frustration while doing tests. This is correct, but what’s also true is that developers commonly see a high entry barrier to testing, which contributes to their frustration.\nDefining a testing workflow, choosing tools, writing tests, and running tests all take time. Many developers face pressure to develop and launch products under tight deadlines. Testing or not testing is a tradeoff between the perceived value that testing adds compared to the time it will take to implement.\nSome developers are aware of testing but limited by their lack of knowledge in the area. This lack of knowledge is a barrier to successfully implementing a testing strategy. Other developers are aware of what testing is and how to do it, but they still consider it frustrating. Rather than lacking knowledge, this second group lacks the time and resources to run tests to the degree that they’d ideally like.\nFor some developers, what constitutes a test type is unclear. Additionally, the line between coding and testing can be blurry.\nFor developers who have established a testing workflow, the best way to describe how that came to be is evolutionary. The evolutionary workflow is generally being continuously improved.\nBrowser vendors assumed unit testing to be a common type of testing and that it’s a well-developed space without a lot of pain points. However, what we learned is that there are more challenges with unit testing code that runs in the browser than anticipated, and there’s the same time pressure as elsewhere, meaning it doesn’t happen as frequently as expected.\nIn the most general of summaries, one could conclude that testing should take less time than it does.\nStakeholders had assumed that developers want to test their code in as many browsers as they can and they’re just limited by the browsers their tools support. What we learned is that the decision of which browsers they support does not depend on the tools they use. Conversely, what browsers they support drives the decisions for which tools they use.8\nThe post A web testing deep dive: The MDN web testing report appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Chris Mills","content":"<p>For the last couple of years, we've run the MDN Web Developer Needs Assessment (DNA) Report, which aims to highlight the key issues faced by developers building web sites and applications. This has proved to be an invaluable source of data for browser vendors and other organizations to prioritize improvements to the web platform. This year we did a deep dive into web testing, and we are delighted to be able to announce the publication of this follow-on work, available at our insights.developer.mozilla.org site along with our other Web DNA publications.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/04/a-web-testing-deep-dive-the-mdn-web-testing-report/\">A web testing deep dive: The MDN web testing report</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"For the last couple of years, we've run the MDN Web Developer Needs Assessment (DNA) Report, which aims to highlight the key issues faced by developers building web sites and applications. This has proved to be an invaluable source of data for browser vendors and other organizations to prioritize improvements to the web platform. This year we did a deep dive into web testing, and we are delighted to be able to announce the publication of this follow-on work, available at our insights.developer.mozilla.org site along with our other Web DNA publications.\nThe post A web testing deep dive: The MDN web testing report appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47161","categories":["Featured Article","MDN","browser compatibility","Developer Needs Assessment","mdn","survey","web dna","web testing"],"isoDate":"2021-04-01T14:53:46.000Z","timestamp":"4/1/2021"},{"creator":"Chris Mills","title":"MDN localization in March — Tier 1 locales unfrozen, and future plans","link":"https://hacks.mozilla.org/2021/03/mdn-localization-in-march-tier-1-locales-unfrozen-and-future-plans/","pubDate":"Thu, 25 Mar 2021 16:05:25 +0000","content:encoded":"<p>Since we <a href=\"https://hacks.mozilla.org/2021/02/mdn-localization-update-february-2021/\">last talked about MDN localization</a>, a lot of progress has been made. In this post we&#8217;ll talk you through the unfreezing of Tier 1 locales, and the next steps in our plans to stop displaying non-active and unmaintained locales.</p>\n<h2>Tier 1 locales unfrozen!</h2>\n<p>It has been a long time coming, but we&#8217;ve finally achieved our goal of unfreezing our Tier 1 locales. the <code>fr</code>, <code>ja</code>, <code>ru</code>, <code>zh-CN</code>, and <code>zh-TW</code> locales can now be edited, and we have active teams working on each of these locales. We added Russian (<code>ru</code>) to the list very recently, after great interest from the community helped us to rapidly assemble a team to maintain those docs — we are really excited about making progress here!</p>\n<p>If you are interested in helping out with these locales, or asking questions, you can find all the information you need at our all-new <a href=\"https://github.com/mdn/translated-content\">translated-content README</a>. This includes:</p>\n<ul>\n<li>How to contribute</li>\n<li>The policies in place to govern the work</li>\n<li>Who is in the active localization teams</li>\n<li>How the structure is kept in sync with the en-US version.</li>\n</ul>\n<p>We&#8217;d like to thank everyone who helped us get to this stage, especially the localization team members who have stepped up to help us maintain our localized content:</p>\n<ul>\n<li>Our French (fr) team:\n<ul>\n<li><a href=\"https://github.com/nicolas-goudry\">@nicolas-goudry</a></li>\n<li><a href=\"https://github.com/JNa0\">@JNa0</a></li>\n<li><a href=\"https://github.com/tristantheb\">@tristantheb</a></li>\n<li><a href=\"https://github.com/LEMIBANDDEXARI\">@LEMIBANDDEXARI</a></li>\n<li><a href=\"https://github.com/SphinxKnight\">@SphinxKnight</a></li>\n</ul>\n</li>\n<li>Our Japanese (ja) team:\n<ul>\n<li><a href=\"https://github.com/hmatrjp\">@hmatrjp</a></li>\n<li><a href=\"https://github.com/potappo\">@potappo</a></li>\n<li><a href=\"https://github.com/dynamis\">@dynamis</a></li>\n<li><a href=\"https://github.com/kenji-yamasaki\">@kenji-yamasaki</a></li>\n<li><a href=\"https://github.com/mfuji09\">@mfuji09</a></li>\n</ul>\n</li>\n<li>Our Russian (ru) team:\n<ul>\n<li><a href=\"https://github.com/armanpwnz\">@armanpwnz</a></li>\n<li><a href=\"https://github.com/captainspring\">@captainspring</a></li>\n<li><a href=\"https://github.com/mpstv\">@mpstv</a></li>\n<li><a href=\"https://github.com/myshov\">@myshov</a></li>\n<li><a href=\"https://github.com/Saionaro\">@Saionaro</a></li>\n<li><a href=\"https://github.com/sashasushko\">@sashasushko</a></li>\n<li><a href=\"https://github.com/lex111\">@lex111</a></li>\n</ul>\n</li>\n<li>Our Chinese (zh-CN and zh-TW) team:\n<ul>\n<li><a href=\"https://github.com/t7yang\">@t7yang</a></li>\n<li><a href=\"https://github.com/dibery\">@dibery</a></li>\n<li><a href=\"https://github.com/irvin\">@irvin</a></li>\n</ul>\n</li>\n</ul>\n<h2>Stopping the display of unmaintained locales on MDN</h2>\n<p>Previously we said that we were planning to stop the display of all locales except for <code>en-US</code>, and our Tier 1 locales.</p>\n<p>We&#8217;ve revised this plan a little since then — we looked at the readership figures of each locale, as a percentage of the total MDN traffic, and decided that we should keep a few more than just the 5 we previously mentioned. Some of the viewing figures for non-active locales are quite high, so we thought it would be wise to keep them and try to encourage teams to start maintaining them.</p>\n<p>In the end, we decided to keep the following locales:</p>\n<ul>\n<li><code>en-US</code></li>\n<li><code>es</code></li>\n<li><code>ru</code> (already unfrozen)</li>\n<li><code>fr</code> (already unfrozen)</li>\n<li><code>zh-CN</code> (already unfrozen)</li>\n<li><code>ja</code> (already unfrozen)</li>\n<li><code>pt-BR</code></li>\n<li><code>ko</code></li>\n<li><code>de</code></li>\n<li><code>pl</code></li>\n<li><code>zh-TW</code> (already unfrozen)</li>\n</ul>\n<p>We are planning to stop displaying the other 21 locales. Many of them have very few pages, a high percentage of which are out-of-date or otherwise flawed, and we estimate that the total traffic we will lose by removing all these locales is less than 2%.</p>\n<h2>So what does this mean?</h2>\n<p>We are intending to stop displaying all locales outside the top ten by a certain date. The date we have chosen is April 30th.</p>\n<p>We will remove all the source content for those locales from the translated-content repo, and put it in a new retired translated content repo, so that anyone who still wants to use this content in some way is welcome to do so. We highly respect the work that so many people have done on translating MDN content over the years, and want to preserve it in some way.</p>\n<p>We will redirect the URLs for all removed articles to their en-US equivalents — this solves an often-mentioned issue whereby people would rather view the up-to-date English article than the low-quality or out-of-date version in their own language, but find it difficult to do so because of they way MDN works.</p>\n<p>We are also intending to create a new tool whereby if you see a really outdated page, you can press a button saying “retire content” to open up a pull request that when merged will check it out to the retired content repo.</p>\n<p>After this point, we won’t revive anything — the journey to retirement is one way. This may sound harsh, but we are taking determined steps to clean up MDN and get rid of out-of-date and out-of-remit content that has been around for years in some cases.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/03/mdn-localization-in-march-tier-1-locales-unfrozen-and-future-plans/\">MDN localization in March — Tier 1 locales unfrozen, and future plans</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"Since we last talked about MDN localization, a lot of progress has been made. In this post we’ll talk you through the unfreezing of Tier 1 locales, and the next steps in our plans to stop displaying non-active and unmaintained locales.\nTier 1 locales unfrozen!\nIt has been a long time coming, but we’ve finally achieved our goal of unfreezing our Tier 1 locales. the fr, ja, ru, zh-CN, and zh-TW locales can now be edited, and we have active teams working on each of these locales. We added Russian (ru) to the list very recently, after great interest from the community helped us to rapidly assemble a team to maintain those docs — we are really excited about making progress here!\nIf you are interested in helping out with these locales, or asking questions, you can find all the information you need at our all-new translated-content README. This includes:\nHow to contribute\nThe policies in place to govern the work\nWho is in the active localization teams\nHow the structure is kept in sync with the en-US version.\nWe’d like to thank everyone who helped us get to this stage, especially the localization team members who have stepped up to help us maintain our localized content:\nOur French (fr) team:\n\n@nicolas-goudry\n@JNa0\n@tristantheb\n@LEMIBANDDEXARI\n@SphinxKnight\nOur Japanese (ja) team:\n\n@hmatrjp\n@potappo\n@dynamis\n@kenji-yamasaki\n@mfuji09\nOur Russian (ru) team:\n\n@armanpwnz\n@captainspring\n@mpstv\n@myshov\n@Saionaro\n@sashasushko\n@lex111\nOur Chinese (zh-CN and zh-TW) team:\n\n@t7yang\n@dibery\n@irvin\nStopping the display of unmaintained locales on MDN\nPreviously we said that we were planning to stop the display of all locales except for en-US, and our Tier 1 locales.\nWe’ve revised this plan a little since then — we looked at the readership figures of each locale, as a percentage of the total MDN traffic, and decided that we should keep a few more than just the 5 we previously mentioned. Some of the viewing figures for non-active locales are quite high, so we thought it would be wise to keep them and try to encourage teams to start maintaining them.\nIn the end, we decided to keep the following locales:\nen-US\nes\nru (already unfrozen)\nfr (already unfrozen)\nzh-CN (already unfrozen)\nja (already unfrozen)\npt-BR\nko\nde\npl\nzh-TW (already unfrozen)\nWe are planning to stop displaying the other 21 locales. Many of them have very few pages, a high percentage of which are out-of-date or otherwise flawed, and we estimate that the total traffic we will lose by removing all these locales is less than 2%.\nSo what does this mean?\nWe are intending to stop displaying all locales outside the top ten by a certain date. The date we have chosen is April 30th.\nWe will remove all the source content for those locales from the translated-content repo, and put it in a new retired translated content repo, so that anyone who still wants to use this content in some way is welcome to do so. We highly respect the work that so many people have done on translating MDN content over the years, and want to preserve it in some way.\nWe will redirect the URLs for all removed articles to their en-US equivalents — this solves an often-mentioned issue whereby people would rather view the up-to-date English article than the low-quality or out-of-date version in their own language, but find it difficult to do so because of they way MDN works.\nWe are also intending to create a new tool whereby if you see a really outdated page, you can press a button saying “retire content” to open up a pull request that when merged will check it out to the retired content repo.\nAfter this point, we won’t revive anything — the journey to retirement is one way. This may sound harsh, but we are taking determined steps to clean up MDN and get rid of out-of-date and out-of-remit content that has been around for years in some cases.\nThe post MDN localization in March — Tier 1 locales unfrozen, and future plans appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Chris Mills","content":"<p>Since we last talked about MDN localization, a lot of progress has been made. In this post we'll talk you through the unfreezing of Tier 1 locales, and the next steps in our plans to stop displaying non-active and unmaintained locales.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/03/mdn-localization-in-march-tier-1-locales-unfrozen-and-future-plans/\">MDN localization in March — Tier 1 locales unfrozen, and future plans</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"Since we last talked about MDN localization, a lot of progress has been made. In this post we'll talk you through the unfreezing of Tier 1 locales, and the next steps in our plans to stop displaying non-active and unmaintained locales.\nThe post MDN localization in March — Tier 1 locales unfrozen, and future plans appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47142","categories":["Localization","MDN","l10n","localization","mdn","Translations"],"isoDate":"2021-03-25T16:05:25.000Z","timestamp":"3/25/2021"},{"creator":"Chris Mills","title":"In March, we see Firefox 87","link":"https://hacks.mozilla.org/2021/03/in-march-we-see-firefox-87/","pubDate":"Tue, 23 Mar 2021 15:56:13 +0000","content:encoded":"<p>Nearing the end of March now, and we have a new version of Firefox ready to deliver some interesting new features to your door. This month, we&#8217;ve got some rather nice DevTools additions in the form of <code>prefers-color-scheme</code> media query emulation and toggling <code>:target</code> pseudo-classes, some very useful additions to editable DOM elements: the <code>beforeinput</code> event and <code>getTargetRanges()</code> method, and some nice security, privacy, and macOS screenreader support updates.</p>\n<p>This blog post provides merely a set of highlights; for all the details, check out the following:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/docs/Mozilla/Firefox/Releases/87\">Firefox 87 for developers on MDN</a></li>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/87.0/releasenotes/\">Firefox 87 end-user release notes</a></li>\n</ul>\n<h2>Developer tools</h2>\n<p>In developer tools this time around, we&#8217;ve first of all updated the <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_and_edit_CSS#view_media_rules_for_prefers-color-scheme\">Page Inspector</a> to allow simulation of <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\"><code>prefers-color-scheme</code></a> media queries, without having to change the operating system to trigger light or dark mode.</p>\n<p>Open the DevTools, and you&#8217;ll see a new set of buttons in the top right corner:</p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-47132\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2021/03/color_scheme_null.png\" alt=\"Two buttons marked with sun and moon icons\" width=\"136\" height=\"55\" /></p>\n<p>When pressed, these enable the light and dark preference, respectively. Selecting either button deselects the other. If neither button is selected then the simulator does not set a preference, and the browser renders using the default feature value set by the operating system.</p>\n<p>And another nice addition to mention is that the Page Inspector&#8217;s CSS pane can now be used to toggle the <a href=\"https://developer.mozilla.org/docs/Web/CSS/:target\"><code>:target</code></a> pseudo-class for the currently selected element, in addition to a number of others that were already available (<a href=\"https://developer.mozilla.org/docs/Web/CSS/:hover\"><code>:hover</code></a>, <a href=\"https://developer.mozilla.org/docs/Web/CSS/:active\"><code>:active</code></a>, etc.)</p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-47136\" style=\"border: 1px solid black;\" src=\"https://hacks.mozilla.org/files/2021/03/show_pseudo_classes_hover.png\" alt=\"Firefox devtools CSS rules pane, showing a body selector with a number of following declarations, and a bar up the top with several pseudo classes written inside it\" width=\"498\" height=\"225\" srcset=\"https://hacks.mozilla.org/files/2021/03/show_pseudo_classes_hover.png 498w, https://hacks.mozilla.org/files/2021/03/show_pseudo_classes_hover-250x113.png 250w\" sizes=\"(max-width: 498px) 100vw, 498px\" /></p>\n<p>Find more out about this at <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_and_edit_CSS#viewing_common_pseudo-classes\">Viewing common pseudo-classes</a>.</p>\n<h2>Better control over user input: beforeinput and getTargetRanges()</h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event\"><code>beforeinput</code></a> event and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/getTargetRanges\"><code>getTargetRanges()</code></a> method are now enabled by default. They allow web apps to override text edit behavior before the browser modifies the DOM tree, providing more control over text input to improve performance.</p>\n<p>The global <code>beforeinput</code> event is sent to an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a> element — or any element whose <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-contenteditable\"><code>contenteditable</code></a> attribute is set to <code>true</code> — immediately before the element&#8217;s value changes. The <code>getTargetRanges()</code> method of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/InputEvent\"><code>InputEvent</code></a> interface returns an array of static ranges that will be affected by a change to the DOM if the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event\"><code>input</code></a> event is not canceled.</p>\n<p>As an example, say we have a simple comment system where users are able to edit their comments live using a <code>contenteditable</code> container, but we don&#8217;t want them to edit the commenter&#8217;s name or other valuable meta data? Some sample markup might look like so:</p>\n<pre><code class=\"language-html\">&lt;p contenteditable&gt;\n  &lt;span&gt;Mr Bungle:&lt;/span&gt;\n  This is my comment; isn't it good!\n  &lt;em&gt;-- 09/16/21, 09.24&lt;/em&gt;\n&lt;/p&gt;</code></pre>\n<p>Using <code>beforeinput</code> and <code>getTargetRanges()</code>, this is now really simple:</p>\n<pre><code class=\"language-js\">const editable = document.querySelector('[contenteditable]');\n\neditable.addEventListener('beforeinput', e =&gt; {\n  const targetRanges = e.getTargetRanges();\n  if(targetRanges[0].startContainer.parentElement.tagName === 'SPAN' ||\n     targetRanges[0].startContainer.parentElement.tagName === 'EM') {\n    e.preventDefault();\n  };\n})</code></pre>\n<p>Here we respond to the <code>beforeinput</code> event so that each time a change to the text is attempted, we get the target range that would be affected by the change, find out if it is inside a <code>&lt;span&gt;</code> or <code>&lt;em&gt;</code> element, and if so, run <code>preventDefault()</code> to stop the edit happening. Voila — non-editable text regions inside editable text. Granted, this could be handled in other ways, but think beyond this trivial example — there is a lot of power to unlock here in terms of the control you&#8217;ve now got over text input.</p>\n<h2>Security and privacy</h2>\n<p>Firefox 87 sees some valuable security and privacy changes.</p>\n<h3>Referrer-Policy changes</h3>\n<p>First of all, the default <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\"><code>Referrer-Policy</code></a> has been changed to <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#strict-origin-when-cross-origin\"><code>strict-origin-when-cross-origin</code></a> (from <code>no-referrer-when-downgrade</code>), reducing the risk of leaking sensitive information in cross-origin requests. Essentially this means that by default, path and query string information are no longer included in HTTP Referrers.</p>\n<p>You can find out more about this change at <a href=\"https://blog.mozilla.org/security/2021/03/22/firefox-87-trims-http-referrers-by-default-to-protect-user-privacy/\">Firefox 87 trims HTTP Referrers by default to protect user privacy</a>.</p>\n<h3>SmartBlock</h3>\n<p>We also wanted to bring our new SmartBlock feature to the attention of our readers. SmartBlock provides stand-ins for tracking scripts blocked by Firefox (e.g. when in private browsing mode), getting round the often-experienced problem of sites failing to load or not working properly when those tracking scripts are blocked and therefore not present.</p>\n<p>The provided stand-in scripts behave close enough to the original ones that they allow sites that rely on them to load and behave normally. And best of all, these stand-ins are bundled with Firefox. No communication needs to happen with the third-party at all, so the potential for any tracking to occur is greatly diminished, and the affected sites may even load quicker than before.</p>\n<p>Learn more about SmartBlock at <a href=\"https://blog.mozilla.org/security/2021/03/23/introducing-smartblock/\">Introducing SmartBlock</a></p>\n<h2>VoiceOver support on macOS</h2>\n<p>Firefox 87 sees us shipping our VoiceOver screen reader support on macOS! No longer will you have to switch over to Chrome or Safari to do significant parts of your accessibility testing.</p>\n<p>Check it out now, and let us know what you think.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/03/in-march-we-see-firefox-87/\">In March, we see Firefox 87</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"Nearing the end of March now, and we have a new version of Firefox ready to deliver some interesting new features to your door. This month, we’ve got some rather nice DevTools additions in the form of prefers-color-scheme media query emulation and toggling :target pseudo-classes, some very useful additions to editable DOM elements: the beforeinput event and getTargetRanges() method, and some nice security, privacy, and macOS screenreader support updates.\nThis blog post provides merely a set of highlights; for all the details, check out the following:\nFirefox 87 for developers on MDN\nFirefox 87 end-user release notes\nDeveloper tools\nIn developer tools this time around, we’ve first of all updated the Page Inspector to allow simulation of prefers-color-scheme media queries, without having to change the operating system to trigger light or dark mode.\nOpen the DevTools, and you’ll see a new set of buttons in the top right corner:\n\nWhen pressed, these enable the light and dark preference, respectively. Selecting either button deselects the other. If neither button is selected then the simulator does not set a preference, and the browser renders using the default feature value set by the operating system.\nAnd another nice addition to mention is that the Page Inspector’s CSS pane can now be used to toggle the :target pseudo-class for the currently selected element, in addition to a number of others that were already available (:hover, :active, etc.)\n\nFind more out about this at Viewing common pseudo-classes.\nBetter control over user input: beforeinput and getTargetRanges()\nThe beforeinput event and getTargetRanges() method are now enabled by default. They allow web apps to override text edit behavior before the browser modifies the DOM tree, providing more control over text input to improve performance.\nThe global beforeinput event is sent to an <input> element — or any element whose contenteditable attribute is set to true — immediately before the element’s value changes. The getTargetRanges() method of the InputEvent interface returns an array of static ranges that will be affected by a change to the DOM if the input event is not canceled.\nAs an example, say we have a simple comment system where users are able to edit their comments live using a contenteditable container, but we don’t want them to edit the commenter’s name or other valuable meta data? Some sample markup might look like so:\n<p contenteditable>\n  <span>Mr Bungle:</span>\n  This is my comment; isn't it good!\n  <em>-- 09/16/21, 09.24</em>\n</p>\nUsing beforeinput and getTargetRanges(), this is now really simple:\nconst editable = document.querySelector('[contenteditable]');\n\neditable.addEventListener('beforeinput', e => {\n  const targetRanges = e.getTargetRanges();\n  if(targetRanges[0].startContainer.parentElement.tagName === 'SPAN' ||\n     targetRanges[0].startContainer.parentElement.tagName === 'EM') {\n    e.preventDefault();\n  };\n})\nHere we respond to the beforeinput event so that each time a change to the text is attempted, we get the target range that would be affected by the change, find out if it is inside a <span> or <em> element, and if so, run preventDefault() to stop the edit happening. Voila — non-editable text regions inside editable text. Granted, this could be handled in other ways, but think beyond this trivial example — there is a lot of power to unlock here in terms of the control you’ve now got over text input.\nSecurity and privacy\nFirefox 87 sees some valuable security and privacy changes.\nReferrer-Policy changes\nFirst of all, the default Referrer-Policy has been changed to strict-origin-when-cross-origin (from no-referrer-when-downgrade), reducing the risk of leaking sensitive information in cross-origin requests. Essentially this means that by default, path and query string information are no longer included in HTTP Referrers.\nYou can find out more about this change at Firefox 87 trims HTTP Referrers by default to protect user privacy.\nSmartBlock\nWe also wanted to bring our new SmartBlock feature to the attention of our readers. SmartBlock provides stand-ins for tracking scripts blocked by Firefox (e.g. when in private browsing mode), getting round the often-experienced problem of sites failing to load or not working properly when those tracking scripts are blocked and therefore not present.\nThe provided stand-in scripts behave close enough to the original ones that they allow sites that rely on them to load and behave normally. And best of all, these stand-ins are bundled with Firefox. No communication needs to happen with the third-party at all, so the potential for any tracking to occur is greatly diminished, and the affected sites may even load quicker than before.\nLearn more about SmartBlock at Introducing SmartBlock\nVoiceOver support on macOS\nFirefox 87 sees us shipping our VoiceOver screen reader support on macOS! No longer will you have to switch over to Chrome or Safari to do significant parts of your accessibility testing.\nCheck it out now, and let us know what you think.\nThe post In March, we see Firefox 87 appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Chris Mills","content":"<p>Nearing the end of March now, and we have a new version of Firefox ready to deliver some interesting new features to your door. This month, we've got some rather nice DevTools additions in the form of prefers-color-scheme media query emulation and toggling :target pseudo-classes, some very useful additions to editable DOM elements: the beforeinput event and getTargetRanges() method, and some nice security, privacy, and macOS screenreader support updates.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/03/in-march-we-see-firefox-87/\">In March, we see Firefox 87</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"Nearing the end of March now, and we have a new version of Firefox ready to deliver some interesting new features to your door. This month, we've got some rather nice DevTools additions in the form of prefers-color-scheme media query emulation and toggling :target pseudo-classes, some very useful additions to editable DOM elements: the beforeinput event and getTargetRanges() method, and some nice security, privacy, and macOS screenreader support updates.\nThe post In March, we see Firefox 87 appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47129","categories":["Featured Article","Firefox","Firefox Releases","MDN","Accessibility","beforeinput","darkmode","getTargetRanges()","JavaScript","macos","referrer-policy","smartblock","target","voiceover"],"isoDate":"2021-03-23T15:56:13.000Z","timestamp":"3/23/2021"},{"creator":"Peter Bengtsson","title":"How MDN’s site-search works","link":"https://hacks.mozilla.org/2021/03/how-mdns-site-search-works/","pubDate":"Mon, 22 Mar 2021 17:02:05 +0000","content:encoded":"<p><strong>tl;dr: </strong>Periodically, the whole of <a href=\"https://developer.mozilla.org\">MDN</a> is built, <a href=\"https://github.com/mdn/yari\">by our Node code</a>, in a GitHub Action. A Python script bulk-publishes this to Elasticsearch. Our Django server queries the same Elasticsearch via <code>/api/v1/search</code>. The site-search page is a static single-page app that sends XHR requests to the <code>/api/v1/search</code> endpoint. Search results&#8217; sort-order is determined by match and &#8220;popularity&#8221;.</p>\n<h2>Jamstack&#8217;ing</h2>\n<p>The challenge with <a href=\"https://jamstack.org/what-is-jamstack/\">&#8220;Jamstack&#8221;</a> websites is with data that is too vast and dynamic that it doesn&#8217;t make sense to build statically. Search is one of those. For the record, as of Feb 2021, MDN consists of 11,619 documents (aka. articles) in English. Roughly another 40,000 <em>translated</em> documents. <strong>In English alone, there are 5.3 million words.</strong> So to build a good search experience we need to, as a static site build side-effect, index all of this in a full-text search database. And Elasticsearch is one such database and it&#8217;s good. In particular, Elasticsearch is something MDN is already quite familiar with because it&#8217;s what was used from within the Django app when MDN was a wiki.</p>\n<p>Note: <a href=\"https://github.com/mdn/kuma/issues/7799\">MDN gets about 20k site-searches per day</a> from within the site.</p>\n<h2>Build</h2>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-47105 size-full\" src=\"https://hacks.mozilla.org/files/2021/03/Untitled-Diagram-4.png\" alt=\"\" width=\"902\" height=\"502\" srcset=\"https://hacks.mozilla.org/files/2021/03/Untitled-Diagram-4.png 902w, https://hacks.mozilla.org/files/2021/03/Untitled-Diagram-4-250x139.png 250w, https://hacks.mozilla.org/files/2021/03/Untitled-Diagram-4-500x278.png 500w, https://hacks.mozilla.org/files/2021/03/Untitled-Diagram-4-768x427.png 768w\" sizes=\"(max-width: 902px) 100vw, 902px\" /></p>\n<p>When we build the whole site, it&#8217;s a script that basically loops over all the raw content, applies macros and fixes, dumps one <code>index.html</code> (via React server-side rendering) and one <code>index.json</code>. The <code>index.json</code> contains all the fully rendered text (as HTML!) in blocks of &#8220;prose&#8221;. It looks something like this:</p>\n<pre><code class=\"language-json\">\n{\n  \"doc\": {\n    \"title\": \"DOCUMENT TITLE\",\n    \"summary\": \"DOCUMENT SUMMARY\",\n    \"body\": [\n      {\n        \"type\": \"prose\", \n        \"value\": {\n          \"id\": \"introduction\", \n          \"title\": \"INTRODUCTION\",\n          \"content\": \"&lt;p&gt;FIRST BLOCK OF TEXTS&lt;/p&gt;\"\n       }\n     },\n     ...\n   ],\n   \"popularity\": 0.12345,\n   ...\n}0\n</code></pre>\n<p>You can see one here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/index.json\"><code>/en-US/docs/Web/index.json</code></a></p>\n<h2>Indexing</h2>\n<p>Next, after all the <code>index.json</code> files have been produced, a Python script takes over and it traverses all the <code>index.json</code> files and based on that structure it figures out the, title, summary, and the whole body (as HTML).</p>\n<p>Next up, before sending this into the bulk-publisher in Elasticsearch it strips the HTML. It&#8217;s a bit more than just turning <code>&lt;p&gt;Some &lt;em&gt;cool&lt;/em&gt; text.&lt;/p&gt;</code> to <code>Some cool text.</code> because it also cleans up things like <code>&lt;div class=\"hidden\"&gt;</code> and certain <code>&lt;div class=\"notecard warning\"&gt;</code> blocks.</p>\n<p>One thing worth noting is that this whole thing runs roughly every 24 hours and then it builds everything. But what if, between two runs, a certain page has been removed (or moved), how do you remove what was previously added to Elasticsearch? The solution is simple: <strong>it deletes and re-creates the index from scratch every day</strong>. The whole bulk-publish takes a while so right after the index has been deleted, the searches won&#8217;t be that great. Someone could be unlucky in that they&#8217;re searching MDN a couple of seconds after the index was deleted and now waiting for it to build up again.<br />\nIt&#8217;s an unfortunate reality but it&#8217;s a risk worth taking for the sake of simplicity. Also, most people are searching for things in English and specifically the <code>Web/</code> tree so the bulk-publishing is done in a way the most popular content is bulk-published first and the rest was done after. Here&#8217;s what the build output logs:</p>\n<pre>Found 50,461 (potential) documents to index\nDeleting any possible existing index and creating a new one called mdn_docs\nTook 3m 35s to index 50,362 documents. Approximately 234.1 docs/second\nCounts per priority prefixes:\n    en-us/docs/web                 9,056\n    *rest*                         41,306</pre>\n<p>So, yes, for 3m 35s there&#8217;s stuff missing from the index and some unlucky few will get fewer search results than they should. But we can optimize this in the future.</p>\n<h2>Searching</h2>\n<p>The way you connect to Elasticsearch is simply by a URL it looks something like this:</p>\n<pre>https://USER:PASSWD@HASH.us-west-2.aws.found.io:9243</pre>\n<p>It&#8217;s an Elasticsearch cluster managed by Elastic running inside AWS. Our job is to make sure that we put the exact same URL in our GitHub Action (&#8220;the writer&#8221;) as we put it into our Django server (&#8220;the reader&#8221;).<br />\nIn fact, we have 3 Elastic clusters: Prod, Stage, Dev.<br />\nAnd we have 2 Django servers: Prod, Stage.<br />\nSo we just need to carefully make sure the secrets are set correctly to match the right environment.</p>\n<p>Now, in the Django server, we just need to convert a request like <code>GET /api/v1/search?q=foo&amp;locale=fr</code> (for example) to a query to send to Elasticsearch. We have a simple Django view function that validates the query string parameters, does some rate-limiting, creates a query (using <a href=\"https://elasticsearch-dsl.readthedocs.io/en/latest/\"><code>elasticsearch-dsl</code></a>) and packages the Elasticsearch results back to JSON.</p>\n<p>How we make that query is important. In here lies the most important feature of the search; <strong>how it sorts results</strong>.</p>\n<p>In one simple explanation, the sort order is a <strong>combination of popularity and &#8220;matchness&#8221;</strong>. The assumption is that most <em>people want the popular content</em>. I.e. they search for <code>foreach</code> and mean to go to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</code></a> not <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\"><code>/en-US/docs/Web/API/NodeList/forEach</code></a> both of which contains <code>forEach</code> in the title. The &#8220;popularity&#8221; is based on Google Analytics pageviews which we download periodically, normalize into a floating-point number between 1 and 0. At the time of writing the scoring function does something like this:</p>\n<pre>rank = doc.popularity * 10 + search.score</pre>\n<p>This seems to produce pretty reasonable results.</p>\n<p>But there&#8217;s more to the &#8220;matchness&#8221; too. Elasticsearch has its own API for defining boosting and the way we apply is:</p>\n<ul>\n<li>match phrase in the <code>title</code>: Boost = 10.0</li>\n<li>match phrase in the <code>body</code>: Boost = 5.0</li>\n<li>match in <code>title</code>: Boost = 2.0</li>\n<li>match in <code>body</code>: Boost = 1.0</li>\n</ul>\n<p>This is then applied on top of whatever else Elasticsearch does such as &#8220;Term Frequency&#8221; and &#8220;Inverse Document Frequency&#8221; (tf and if). <a href=\"https://www.compose.com/articles/how-scoring-works-in-elasticsearch/\">This article is a helpful introduction</a>.</p>\n<p>We&#8217;re most likely not done with this. There&#8217;s probably a lot more we can do to tune this myriad of knobs and sliders to get the best possible ranking of documents that match.</p>\n<h2>Web UI</h2>\n<p>The last piece of the puzzle is how we display all of this to the user. The way it works is that <a href=\"https://developer.mozilla.org/en-US/search\"><code>developer.mozilla.org/$locale/search</code></a> returns a static page that is blank. As soon as the page has loaded, it lazy-loads JavaScript that can actually issue the XHR request to get and display search results. The code looks something like this:</p>\n<div class=\"highlight\">\n<pre><span class=\"kd\">function</span> <span class=\"nx\">SearchResults</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">searchParams</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useSearchParams</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">sp</span> <span class=\"o\">=</span> <span class=\"nx\">createSearchParams</span><span class=\"p\">(</span><span class=\"nx\">searchParams</span><span class=\"p\">);</span>\n  <span class=\"c1\">// add defaults and stuff here</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">fetchURL</span> <span class=\"o\">=</span> <span class=\"sb\">`/api/v1/search?</span><span class=\"si\">${</span><span class=\"nx\">sp</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">error</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useSWR</span><span class=\"p\">(</span>\n    <span class=\"nx\">fetchURL</span><span class=\"p\">,</span>\n    <span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">URL</span><span class=\"p\">);</span>\n      <span class=\"c1\">// various checks on the response.statusCode here</span>\n      <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">);</span>\n\n  <span class=\"c1\">// render 'data' or 'error' accordingly here</span>\n\n</pre>\n</div>\n<p>A lot of interesting details are omitted from this code snippet. You have to <a href=\"https://github.com/mdn/yari/blob/main/client/src/site-search/search-results.tsx\">check it out for yourself</a> to get a more up-to-date insight into how it actually works. But basically, the <code>window.location</code> (and <code>pushState</code>) query string drives the <code>fetch()</code> call and then all the component has to do is display the search results with some highlighting.</p>\n<p>The <code>/api/v1/search</code> endpoint also runs a <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters.html\">suggestion query</a> as part of the main search query. This extracts out interest alternative search queries. These are filtered and scored and we issue &#8220;sub-queries&#8221; just to get a count for each. Now we can do one of those <strong>&#8220;Did you mean&#8230;&#8221;</strong>. For example: <a href=\"https://developer.mozilla.org/en-US/search?q=intersections\">search for <code>intersections</code></a>.</p>\n<h2>In conclusion</h2>\n<p>There are a lot of interesting, important, and careful details that are glossed over here in this blog post. It&#8217;s a constantly evolving system and we&#8217;re constantly trying to improve and perfect the system in a way that it fits what users expect.</p>\n<p>A lot of people reach MDN via a Google search (e.g. <code>mdn array foreach</code>) but despite that, nearly 5% of all traffic on MDN is the site-search functionality. The <code>/$locale/search?...</code> endpoint is the most frequently viewed page of all of MDN. And having a good search engine that&#8217;s reliable is nevertheless important. By owning and controlling the whole pipeline allows us to do specific things that are unique to MDN that other websites don&#8217;t need. For example, we index a lot of raw HTML (e.g. <code>&lt;video&gt;</code>) and we have code snippets that needs to be searchable.</p>\n<p>Hopefully, the MDN site-search will elevate from being known to be very limited to something now that can genuinely help people get to the exact page better than Google can. Yes, it&#8217;s worth aiming high!</p>\n<p>(Originally <a href=\"https://www.peterbe.com/plog/how-mdns-site-search-works\">posted on personal blog</a>)</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/03/how-mdns-site-search-works/\">How MDN&#8217;s site-search works</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"tl;dr: Periodically, the whole of MDN is built, by our Node code, in a GitHub Action. A Python script bulk-publishes this to Elasticsearch. Our Django server queries the same Elasticsearch via /api/v1/search. The site-search page is a static single-page app that sends XHR requests to the /api/v1/search endpoint. Search results’ sort-order is determined by match and “popularity”.\nJamstack’ing\nThe challenge with “Jamstack” websites is with data that is too vast and dynamic that it doesn’t make sense to build statically. Search is one of those. For the record, as of Feb 2021, MDN consists of 11,619 documents (aka. articles) in English. Roughly another 40,000 translated documents. In English alone, there are 5.3 million words. So to build a good search experience we need to, as a static site build side-effect, index all of this in a full-text search database. And Elasticsearch is one such database and it’s good. In particular, Elasticsearch is something MDN is already quite familiar with because it’s what was used from within the Django app when MDN was a wiki.\nNote: MDN gets about 20k site-searches per day from within the site.\nBuild\n\nWhen we build the whole site, it’s a script that basically loops over all the raw content, applies macros and fixes, dumps one index.html (via React server-side rendering) and one index.json. The index.json contains all the fully rendered text (as HTML!) in blocks of “prose”. It looks something like this:\n\n{\n  \"doc\": {\n    \"title\": \"DOCUMENT TITLE\",\n    \"summary\": \"DOCUMENT SUMMARY\",\n    \"body\": [\n      {\n        \"type\": \"prose\", \n        \"value\": {\n          \"id\": \"introduction\", \n          \"title\": \"INTRODUCTION\",\n          \"content\": \"<p>FIRST BLOCK OF TEXTS</p>\"\n       }\n     },\n     ...\n   ],\n   \"popularity\": 0.12345,\n   ...\n}0\n\nYou can see one here: /en-US/docs/Web/index.json\nIndexing\nNext, after all the index.json files have been produced, a Python script takes over and it traverses all the index.json files and based on that structure it figures out the, title, summary, and the whole body (as HTML).\nNext up, before sending this into the bulk-publisher in Elasticsearch it strips the HTML. It’s a bit more than just turning <p>Some <em>cool</em> text.</p> to Some cool text. because it also cleans up things like <div class=\"hidden\"> and certain <div class=\"notecard warning\"> blocks.\nOne thing worth noting is that this whole thing runs roughly every 24 hours and then it builds everything. But what if, between two runs, a certain page has been removed (or moved), how do you remove what was previously added to Elasticsearch? The solution is simple: it deletes and re-creates the index from scratch every day. The whole bulk-publish takes a while so right after the index has been deleted, the searches won’t be that great. Someone could be unlucky in that they’re searching MDN a couple of seconds after the index was deleted and now waiting for it to build up again.\nWeb/ tree so the bulk-publishing is done in a way the most popular content is bulk-published first and the rest was done after. Here’s what the build output logs:\nFound 50,461 (potential) documents to index\nDeleting any possible existing index and creating a new one called mdn_docs\nTook 3m 35s to index 50,362 documents. Approximately 234.1 docs/second\nCounts per priority prefixes:\n    en-us/docs/web                 9,056\n    *rest*                         41,306\nSo, yes, for 3m 35s there’s stuff missing from the index and some unlucky few will get fewer search results than they should. But we can optimize this in the future.\nSearching\nThe way you connect to Elasticsearch is simply by a URL it looks something like this:\nhttps://USER:PASSWD@HASH.us-west-2.aws.found.io:9243\nIt’s an Elasticsearch cluster managed by Elastic running inside AWS. Our job is to make sure that we put the exact same URL in our GitHub Action (“the writer”) as we put it into our Django server (“the reader”).\nNow, in the Django server, we just need to convert a request like GET /api/v1/search?q=foo&locale=fr (for example) to a query to send to Elasticsearch. We have a simple Django view function that validates the query string parameters, does some rate-limiting, creates a query (using elasticsearch-dsl) and packages the Elasticsearch results back to JSON.\nHow we make that query is important. In here lies the most important feature of the search; how it sorts results.\nIn one simple explanation, the sort order is a combination of popularity and “matchness”. The assumption is that most people want the popular content. I.e. they search for foreach and mean to go to /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach not /en-US/docs/Web/API/NodeList/forEach both of which contains forEach in the title. The “popularity” is based on Google Analytics pageviews which we download periodically, normalize into a floating-point number between 1 and 0. At the time of writing the scoring function does something like this:\nrank = doc.popularity * 10 + search.score\nThis seems to produce pretty reasonable results.\nBut there’s more to the “matchness” too. Elasticsearch has its own API for defining boosting and the way we apply is:\nmatch phrase in the title: Boost = 10.0\nmatch phrase in the body: Boost = 5.0\nmatch in title: Boost = 2.0\nmatch in body: Boost = 1.0\nThis is then applied on top of whatever else Elasticsearch does such as “Term Frequency” and “Inverse Document Frequency” (tf and if). This article is a helpful introduction.\nWe’re most likely not done with this. There’s probably a lot more we can do to tune this myriad of knobs and sliders to get the best possible ranking of documents that match.\nWeb UI\nThe last piece of the puzzle is how we display all of this to the user. The way it works is that developer.mozilla.org/$locale/search returns a static page that is blank. As soon as the page has loaded, it lazy-loads JavaScript that can actually issue the XHR request to get and display search results. The code looks something like this:\nfunction SearchResults() {\n  const [searchParams] = useSearchParams();\n  const sp = createSearchParams(searchParams);\n  // add defaults and stuff here\n  const fetchURL = `/api/v1/search?${sp.toString()}`;\n\n  const { data, error } = useSWR(\n    fetchURL,\n    async (url) => {\n      const response = await fetch(URL);\n      // various checks on the response.statusCode here\n      return await response.json();\n    }\n  );\n\n  // render 'data' or 'error' accordingly here\n\n\n\nA lot of interesting details are omitted from this code snippet. You have to check it out for yourself to get a more up-to-date insight into how it actually works. But basically, the window.location (and pushState) query string drives the fetch() call and then all the component has to do is display the search results with some highlighting.\nThe /api/v1/search endpoint also runs a suggestion query as part of the main search query. This extracts out interest alternative search queries. These are filtered and scored and we issue “sub-queries” just to get a count for each. Now we can do one of those “Did you mean…”. For example: search for intersections.\nIn conclusion\nThere are a lot of interesting, important, and careful details that are glossed over here in this blog post. It’s a constantly evolving system and we’re constantly trying to improve and perfect the system in a way that it fits what users expect.\nA lot of people reach MDN via a Google search (e.g. mdn array foreach) but despite that, nearly 5% of all traffic on MDN is the site-search functionality. The /$locale/search?... endpoint is the most frequently viewed page of all of MDN. And having a good search engine that’s reliable is nevertheless important. By owning and controlling the whole pipeline allows us to do specific things that are unique to MDN that other websites don’t need. For example, we index a lot of raw HTML (e.g. <video>) and we have code snippets that needs to be searchable.\nHopefully, the MDN site-search will elevate from being known to be very limited to something now that can genuinely help people get to the exact page better than Google can. Yes, it’s worth aiming high!\n(Originally posted on personal blog)\nThe post How MDN’s site-search works appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Peter Bengtsson","comments":"https://hacks.mozilla.org/2021/03/how-mdns-site-search-works/#comments","content":"<p>Periodically, the whole of MDN is built, by our Node code , in a GitHub Action. A Python script bulk-publishes this to Elasticsearch. Our Django server queries the same Elasticsearch via /api/v1/search. The site-search page is a static single-page app that sends XHR requests to the /api/v1/search endpoint. Search results' sort-order is determined by match and \"popularity\".</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/03/how-mdns-site-search-works/\">How MDN&#8217;s site-search works</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"Periodically, the whole of MDN is built, by our Node code , in a GitHub Action. A Python script bulk-publishes this to Elasticsearch. Our Django server queries the same Elasticsearch via /api/v1/search. The site-search page is a static single-page app that sends XHR requests to the /api/v1/search endpoint. Search results' sort-order is determined by match and \"popularity\".\nThe post How MDN’s site-search works appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47104","categories":["Featured Article","MDN","jamstack","mdn","site search"],"isoDate":"2021-03-22T17:02:05.000Z","timestamp":"3/22/2021"},{"creator":"Melissa Thermidor","title":"Here’s what’s happening with the Firefox Nightly logo","link":"https://hacks.mozilla.org/2021/02/heres-whats-happening-with-the-firefox-nightly-logo/","pubDate":"Fri, 26 Feb 2021 19:43:01 +0000","content:encoded":"<h2>Fox Gate</h2>\n<p>The internet was set on fire (pun intended) this week, by what I&#8217;m calling &#8216;fox gate&#8217;, and chances are <a href=\"https://knowyourmeme.com/memes/firefox-minimalist-logo\">you might have seen a meme or two </a>about the Firefox logo. Many people were pulling up for a battle royale because they thought we had scrubbed fox imagery from our browser.<img class=\"aligncenter\" src=\"https://i-cdn.embed.ly/1/display?key=fd92ebbc52fc43fb98f69e50e7893c13&amp;url=https%3A%2F%2Fexternal-preview.redd.it%2FoczlNYbSFRamivo-bcRijCbFTMdtyDPYli-B5cWsr1Y.jpg%3Fauto%3Dwebp%26s%3D595d6c01dce5fcba369e12efe4805e4399dab289\" /></p>\n<p>This is <strong>definitely not happening.</strong></p>\n<p>The logo causing all the stir is one we created a while ago with input from our users. Back in 2019, <a href=\"https://blog.mozilla.org/opendesign/firefox-the-evolution-of-a-brand/\">we updated the Firefox browser logo and added the parent brand logo. </a></p>\n<p>What we learned throughout this, is that many of our users aren’t actually using the browser because then they’d know (no shade) the beloved fox icon is alive and well in Firefox on your desktop.</p>\n<p><em>Shameless plug</em> &#8211; you can download the browser <a href=\"https://www.mozilla.org/firefox/download/thanks/?utm_source=hacks.mozilla.org&amp;utm_medium=referral&amp;utm_campaign=header-download-button&amp;utm_content=header-download-button\">here</a></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-47094 size-full\" src=\"https://hacks.mozilla.org/files/2021/02/firefox-desktop.png\" alt=\"Firefox logo OSX Dock\" width=\"265\" height=\"75\" srcset=\"https://hacks.mozilla.org/files/2021/02/firefox-desktop.png 265w, https://hacks.mozilla.org/files/2021/02/firefox-desktop-250x71.png 250w\" sizes=\"(max-width: 265px) 100vw, 265px\" /></p>\n<p>You can read more about how all this spiralled in the mini-case study on how the &#8216;fox gate&#8217; misinformation spread online <a href=\"https://blog.mozilla.org/firefox/the-fox-is-still-in-the-firefox-logo/\">here</a>.</p>\n<p><img class=\"aligncenter\" src=\"https://ffp4g1ylyit3jdyti1hqcvtb-wpengine.netdna-ssl.com/firefox/files/2021/02/Screenshot_2021-02-25-16-Real-Luigi-%E2%84%A2-very_real_Luigi-Twitter1.png\" alt=\"screenshot of tweet with firefox logos, including parent logo\" /></p>\n<p>Long story short, the fox is here to stay and for our <a href=\"https://www.mozilla.org/en-US/firefox/channel/desktop/#nightly\">Firefox Nightly</a> users out there, we’re bringing back a very <a href=\"https://www.mozilla.org/en-US/firefox/nightly/firstrun/\">special version of an older logo,</a> as a treat.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-47086 size-large\" src=\"https://hacks.mozilla.org/files/2021/02/image-4-500x315.png\" alt=\"Firefox Browser Nightly\" width=\"500\" height=\"315\" srcset=\"https://hacks.mozilla.org/files/2021/02/image-4-500x315.png 500w, https://hacks.mozilla.org/files/2021/02/image-4-250x158.png 250w, https://hacks.mozilla.org/files/2021/02/image-4-768x484.png 768w, https://hacks.mozilla.org/files/2021/02/image-4-1536x968.png 1536w, https://hacks.mozilla.org/files/2021/02/image-4.png 1584w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Our commitment to privacy and a safe and open web remains the same. We hope you enjoy the nightly version of the logo and take some time to read up on <a href=\"https://blog.mozilla.org/firefox/how-to-spot-real-fake-news/\" target=\"_blank\" rel=\"noopener noreferrer\">spotting misinformation</a> and fake news.</p>\n<p>&nbsp;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/02/heres-whats-happening-with-the-firefox-nightly-logo/\">Here&#8217;s what&#8217;s happening with the Firefox Nightly logo</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"Fox Gate\nThe internet was set on fire (pun intended) this week, by what I’m calling ‘fox gate’, and chances are you might have seen a meme or two about the Firefox logo. Many people were pulling up for a battle royale because they thought we had scrubbed fox imagery from our browser.\nThis is definitely not happening.\nThe logo causing all the stir is one we created a while ago with input from our users. Back in 2019, we updated the Firefox browser logo and added the parent brand logo. \nWhat we learned throughout this, is that many of our users aren’t actually using the browser because then they’d know (no shade) the beloved fox icon is alive and well in Firefox on your desktop.\nShameless plug – you can download the browser here\n\nYou can read more about how all this spiralled in the mini-case study on how the ‘fox gate’ misinformation spread online here.\n\nLong story short, the fox is here to stay and for our Firefox Nightly users out there, we’re bringing back a very special version of an older logo, as a treat.\n\nOur commitment to privacy and a safe and open web remains the same. We hope you enjoy the nightly version of the logo and take some time to read up on spotting misinformation and fake news.\n \nThe post Here’s what’s happening with the Firefox Nightly logo appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Melissa Thermidor","content":"<p>The internet was set on fire (pun intended) this week, by what I'm calling 'fox gate', and chances are you might have seen a meme or two about the Firefox logo. Many people were pulling up for a battle royale because they thought we had scrubbed fox imagery from our browser. We can confirm, that this is definitely not happening.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/02/heres-whats-happening-with-the-firefox-nightly-logo/\">Here&#8217;s what&#8217;s happening with the Firefox Nightly logo</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"The internet was set on fire (pun intended) this week, by what I'm calling 'fox gate', and chances are you might have seen a meme or two about the Firefox logo. Many people were pulling up for a battle royale because they thought we had scrubbed fox imagery from our browser. We can confirm, that this is definitely not happening.\nThe post Here’s what’s happening with the Firefox Nightly logo appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47085","categories":["Featured Article","Firefox","Firefox OS","fake news","firefox","Firefox Nightly","misinformation","mozilla"],"isoDate":"2021-02-26T19:43:01.000Z","timestamp":"2/26/2021"},{"creator":"Chris Mills","title":"A Fabulous February Firefox — 86!","link":"https://hacks.mozilla.org/2021/02/a-fabulous-february-firefox-86/","pubDate":"Tue, 23 Feb 2021 16:07:03 +0000","content:encoded":"<p>Looking into the near distance, we can see the end of February loitering on the horizon, threatening to give way to March at any moment. To keep you engaged until then, we’d like to introduce you to Firefox 86. The new version features some interesting and fun new goodies including support for the <code>Intl.DisplayNames</code> object, the <code>:autofill</code> pseudo-class, and a much better <code>&lt;iframe&gt;</code> inspection feature in DevTools.</p>\n<p>This blog post provides merely a set of highlights; for all the details, check out the following:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/docs/Mozilla/Firefox/Releases/86\">Firefox 86 for developers on MDN</a></li>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/86.0/releasenotes/\">Firefox 86 end-user release notes</a></li>\n</ul>\n<h2>Better &lt;iframe&gt; inspection</h2>\n<p>The Firefox <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Web_Console\">web console</a> used to include a <code>cd()</code> helper command that enabled developers to change the DevTools’ context to inspect a specific <code>&lt;iframe&gt;</code> present on the page. This helper has been removed in favor of the iframe context picker, which is much easier to use.</p>\n<p>When inspecting a page with <code>&lt;iframe&gt;</code>s present, the DevTools will show the iframe context picker button.</p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-47074\" src=\"https://hacks.mozilla.org/files/2021/02/developer_tools_select_iframe.png\" alt=\"Firefox devtools, showing the select iframe dropdown menu, a list of the iframes on the page that can be selected from\" width=\"1013\" height=\"335\" srcset=\"https://hacks.mozilla.org/files/2021/02/developer_tools_select_iframe.png 1013w, https://hacks.mozilla.org/files/2021/02/developer_tools_select_iframe-250x83.png 250w, https://hacks.mozilla.org/files/2021/02/developer_tools_select_iframe-500x165.png 500w, https://hacks.mozilla.org/files/2021/02/developer_tools_select_iframe-768x254.png 768w\" sizes=\"(max-width: 1013px) 100vw, 1013px\" /></p>\n<p>When pressed, it will display a drop-down menu listing all the URLs of content embedded in the page inside <code>&lt;iframe&gt;</code>s. Choose one of these, and the inspector, console, debugger, and all other developer tools will then target that <code>&lt;iframe&gt;</code>, essentially behaving as if the rest of the page does not exist.</p>\n<h2>:autofill</h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:autofill\"><code>:autofill</code></a> CSS pseudo-class matches when an <code>&lt;input&gt;</code> element has had its value auto-filled by the browser. The class stops matching as soon as the user edits the field.</p>\n<p>For example:</p>\n<pre><code class=\"language-css\">input:-webkit-autofill {\n  border: 3px solid blue;\n}\n\ninput:autofill {\n  border: 3px solid blue;\n}</code></pre>\n<p>Firefox 86 supports the unprefixed version with the -webkit-prefixed version also supported as an alias. Most other browsers just support the prefixed version, so you should provide both for maximum browser support.</p>\n<h2>Intl.DisplayNames</h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\"><code>Intl.DisplayNames</code></a> built-in object has been enabled by default in Firefox 86. This enables the consistent translation of language, region, and script display names. A simple example looks like so:</p>\n<pre><code class=\"language-js\">// Get English currency code display names\nlet currencyNames = new Intl.DisplayNames(['en'], {type: 'currency'});\n\n// Get currency names\ncurrencyNames.of('USD'); // \"US Dollar\"\ncurrencyNames.of('EUR'); // \"Euro\"</code></pre>\n<h2>Nightly preview — image-set()</h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/image-set()\"><code>image-set()</code></a> CSS function lets the browser pick the most appropriate CSS image from a provided set. This is useful for implementing responsive images in CSS, respecting the fact that resolution and bandwidth differ by device and network access.</p>\n<p>The syntax looks like so:</p>\n<pre><code class=\"language-css\">background-image: image-set(\"cat.png\" 1x,\n                            \"cat-2x.png\" 2x,\n                            \"cat-print.png\" 600dpi);</code></pre>\n<p>Given the set of options, the browser will choose the most appropriate one for the current device’s resolution — users of lower-resolution devices will appreciate not having to download a large hi-res image that they don’t need, which users of more modern devices will be happy to receive a sharper, crisper image that looks better on their device.</p>\n<h2>WebExtensions</h2>\n<p>As part of our work on Manifest V3, we have landed an experimental base content security policy (CSP) behind a preference in Firefox 86. The new CSP disallows remote code execution. This restriction only applies to extensions using <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/manifest_version\"><code>manifest_version</code> 3</a>, which is not currently supported in Firefox (currently, only <code>manifest_version</code> 2 is supported).</p>\n<p>If you would like to test the new CSP for extension pages and content scripts, you must change your extension’s <code>manifest_version</code> to 3 and set <code>extensions.manifestv3.enabled</code> to <code>true</code> in <code>about:config</code>. Because this is a highly experimental and evolving feature, we want developers to be aware that extensions that work with the new CSP may break as more changes are implemented.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/02/a-fabulous-february-firefox-86/\">A Fabulous February Firefox — 86!</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content:encodedSnippet":"Looking into the near distance, we can see the end of February loitering on the horizon, threatening to give way to March at any moment. To keep you engaged until then, we’d like to introduce you to Firefox 86. The new version features some interesting and fun new goodies including support for the Intl.DisplayNames object, the :autofill pseudo-class, and a much better <iframe> inspection feature in DevTools.\nThis blog post provides merely a set of highlights; for all the details, check out the following:\nFirefox 86 for developers on MDN\nFirefox 86 end-user release notes\nBetter <iframe> inspection\nThe Firefox web console used to include a cd() helper command that enabled developers to change the DevTools’ context to inspect a specific <iframe> present on the page. This helper has been removed in favor of the iframe context picker, which is much easier to use.\nWhen inspecting a page with <iframe>s present, the DevTools will show the iframe context picker button.\n\nWhen pressed, it will display a drop-down menu listing all the URLs of content embedded in the page inside <iframe>s. Choose one of these, and the inspector, console, debugger, and all other developer tools will then target that <iframe>, essentially behaving as if the rest of the page does not exist.\n:autofill\nThe :autofill CSS pseudo-class matches when an <input> element has had its value auto-filled by the browser. The class stops matching as soon as the user edits the field.\nFor example:\ninput:-webkit-autofill {\n  border: 3px solid blue;\n}\n\ninput:autofill {\n  border: 3px solid blue;\n}\nFirefox 86 supports the unprefixed version with the -webkit-prefixed version also supported as an alias. Most other browsers just support the prefixed version, so you should provide both for maximum browser support.\nIntl.DisplayNames\nThe Intl.DisplayNames built-in object has been enabled by default in Firefox 86. This enables the consistent translation of language, region, and script display names. A simple example looks like so:\n// Get English currency code display names\nlet currencyNames = new Intl.DisplayNames(['en'], {type: 'currency'});\n\n// Get currency names\ncurrencyNames.of('USD'); // \"US Dollar\"\ncurrencyNames.of('EUR'); // \"Euro\"\nNightly preview — image-set()\nThe image-set() CSS function lets the browser pick the most appropriate CSS image from a provided set. This is useful for implementing responsive images in CSS, respecting the fact that resolution and bandwidth differ by device and network access.\nThe syntax looks like so:\nbackground-image: image-set(\"cat.png\" 1x,\n                            \"cat-2x.png\" 2x,\n                            \"cat-print.png\" 600dpi);\nGiven the set of options, the browser will choose the most appropriate one for the current device’s resolution — users of lower-resolution devices will appreciate not having to download a large hi-res image that they don’t need, which users of more modern devices will be happy to receive a sharper, crisper image that looks better on their device.\nWebExtensions\nAs part of our work on Manifest V3, we have landed an experimental base content security policy (CSP) behind a preference in Firefox 86. The new CSP disallows remote code execution. This restriction only applies to extensions using manifest_version 3, which is not currently supported in Firefox (currently, only manifest_version 2 is supported).\nIf you would like to test the new CSP for extension pages and content scripts, you must change your extension’s manifest_version to 3 and set extensions.manifestv3.enabled to true in about:config. Because this is a highly experimental and evolving feature, we want developers to be aware that extensions that work with the new CSP may break as more changes are implemented.\nThe post A Fabulous February Firefox — 86! appeared first on Mozilla Hacks - the Web developer blog.","dc:creator":"Chris Mills","comments":"https://hacks.mozilla.org/2021/02/a-fabulous-february-firefox-86/#comments","content":"<p>Looking into the near distance, we can see the end of February loitering on the horizon, threatening to give way to March at any moment. To keep you engaged until then, we’d like to introduce you to Firefox 86.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2021/02/a-fabulous-february-firefox-86/\">A Fabulous February Firefox — 86!</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org\">Mozilla Hacks - the Web developer blog</a>.</p>\n","contentSnippet":"Looking into the near distance, we can see the end of February loitering on the horizon, threatening to give way to March at any moment. To keep you engaged until then, we’d like to introduce you to Firefox 86.\nThe post A Fabulous February Firefox — 86! appeared first on Mozilla Hacks - the Web developer blog.","guid":"https://hacks.mozilla.org/?p=47073","categories":["Featured Article","Firefox","Firefox Releases","MDN","autofill","css","devtools","firefox","i18n","Images","internationalization","Intl","JavaScript","release"],"isoDate":"2021-02-23T16:07:03.000Z","timestamp":"2/23/2021"}],"feedUrl":"https://hacks.mozilla.org/feed/","paginationLinks":{"self":"https://hacks.mozilla.org/feed/"},"title":"Mozilla Hacks – the Web developer blog","description":"hacks.mozilla.org","generator":"https://wordpress.org/?v=5.8","link":"https://hacks.mozilla.org","language":"en-US","lastBuildDate":"Wed, 08 Sep 2021 15:23:58 +0000","feed":"https://hacks.mozilla.org/feed/"}]],["Blogs",[{"items":[{"title":"Writing a Simple Browser Game in Elm","link":"https://joy.recurse.com/posts/1349-writing-a-simple-browser-game-in-elm","pubDate":"2021-09-10T11:01:39.000Z","author":"Joe Thomas","content":"<div class=\"post\">\n\n  <header class=\"post__header\">\n      <div class=\"post__published-at\">\n        Friday, Sep 10\n      </div>\n\n    <h3 class=\"post__title\">\n      <a class=\"post__link\" href=\"https://jsthomas.github.io/elm-space-battle.html\">Writing a Simple Browser Game in Elm</a>\n\n        <span class=\"post__meta\">(<a href=\"/posts/1349-writing-a-simple-browser-game-in-elm\">permalink</a>)</span>\n\n    </h3>\n\n    <div class=\"post__made-by\">\n      made by <a href=\"https://joy.recurse.com/~Joe%20Thomas\">Joe Thomas</a>, submitted by <a href=\"https://joy.recurse.com/~nicholasbs\">nicholasbs</a>\n    </div>\n  </header>\n\n  <div class=\"post__description\">\n    Some thoughts on learning Elm to write a simple arcade game, along with the playable game and source.\n    <span class=\"post__meta\">\n      —&nbsp;<a href=\"https://joy.recurse.com/~nicholasbs\">nicholasbs</a>\n    </span>\n  </div>\n\n    <div class=\"post__embedding\">\n      <img src=\"https://recurse-uploads-production.s3.amazonaws.com/6d511b61-e866-440f-b25b-4ae83995a8b0/space.png\" class=\"post__embedding-image\">\n    </div>\n</div>\n","contentSnippet":"Writing a Simple Browser Game in Elm\n\n        (permalink)\n\n    \nJoe Thomas, submitted by nicholasbs\n    \nnicholasbs","id":"https://joy.recurse.com/posts/1349-writing-a-simple-browser-game-in-elm","isoDate":"2021-09-10T11:01:39.000Z","timestamp":"9/10/2021"},{"title":"tree-grepper","link":"https://joy.recurse.com/posts/1348-tree-grepper","pubDate":"2021-09-09T11:02:29.000Z","author":"brianhicks","content":"<div class=\"post\">\n\n  <header class=\"post__header\">\n      <div class=\"post__published-at\">\n        Thursday, Sep 9\n      </div>\n\n    <h3 class=\"post__title\">\n      <a class=\"post__link\" href=\"https://bytes.zone/posts/tree-grepper/\">tree-grepper</a>\n\n        <span class=\"post__meta\">(<a href=\"/posts/1348-tree-grepper\">permalink</a>)</span>\n\n    </h3>\n\n    <div class=\"post__made-by\">\n      made and submitted by <a href=\"https://joy.recurse.com/~brianhicks\">brianhicks</a>\n    </div>\n  </header>\n\n  <div class=\"post__description\">\n    Tree-grepper searches by looking at code structure instead of strings. This lets you match on whatever structures a language defines without worrying about whitespace! It uses tree-sitter underneath so it&#39;s easy to extend, too!\n    <span class=\"post__meta\">\n      —&nbsp;<a href=\"https://joy.recurse.com/~brianhicks\">brianhicks</a>\n    </span>\n  </div>\n\n</div>\n","contentSnippet":"tree-grepper\n\n        (permalink)\n\n    \nbrianhicks\n    \nbrianhicks","id":"https://joy.recurse.com/posts/1348-tree-grepper","isoDate":"2021-09-09T11:02:29.000Z","timestamp":"9/9/2021"},{"title":"um-abt: an OCaml library for unifiable abstract binding trees","link":"https://joy.recurse.com/posts/1347-um-abt-an-ocaml-library-for-unifiable-abstract-binding-trees","pubDate":"2021-09-08T11:01:29.000Z","author":"Shon","content":"<div class=\"post\">\n\n  <header class=\"post__header\">\n      <div class=\"post__published-at\">\n        Wednesday, Sep 8\n      </div>\n\n    <h3 class=\"post__title\">\n      <a class=\"post__link\" href=\"https://github.com/shonfeder/um-abt#um-abt\">um-abt: an OCaml library for unifiable abstract binding trees</a>\n\n        <span class=\"post__meta\">(<a href=\"/posts/1347-um-abt-an-ocaml-library-for-unifiable-abstract-binding-trees\">permalink</a>)</span>\n\n    </h3>\n\n    <div class=\"post__made-by\">\n      made and submitted by <a href=\"https://joy.recurse.com/~Shon\">Shon</a>\n    </div>\n  </header>\n\n  <div class=\"post__description\">\n    um-abt is a library for working with the abstract syntax of languages that use variables. It provides &quot;unifiable abstract binding trees&quot; (UABTs): abstract syntax trees (ASTs), enriched with constructs to manage variable binding and (nominal) unification.\n    <span class=\"post__meta\">\n      —&nbsp;<a href=\"https://joy.recurse.com/~Shon\">Shon</a>\n    </span>\n  </div>\n\n    <div class=\"post__embedding\">\n      <img src=\"https://recurse-uploads-production.s3.amazonaws.com/50f1acfb-25cd-49d9-9cee-528a707aa1c9/2021-08-30-210836_1994x1572_scrot.png\" class=\"post__embedding-image\">\n    </div>\n</div>\n","contentSnippet":"um-abt: an OCaml library for unifiable abstract binding trees\n\n        (permalink)\n\n    \nShon\n    \nShon","id":"https://joy.recurse.com/posts/1347-um-abt-an-ocaml-library-for-unifiable-abstract-binding-trees","isoDate":"2021-09-08T11:01:29.000Z","timestamp":"9/8/2021"},{"title":"Mitigating harm in language models with conditional-likelihood filtration","link":"https://joy.recurse.com/posts/1341-mitigating-harm-in-language-models-with-conditional-likelihood-filtration","pubDate":"2021-09-07T11:01:03.000Z","author":"mathemakitten","content":"<div class=\"post\">\n\n  <header class=\"post__header\">\n      <div class=\"post__published-at\">\n        Tuesday, Sep 7\n      </div>\n\n    <h3 class=\"post__title\">\n      <a class=\"post__link\" href=\"https://arxiv.org/abs/2108.07790\">Mitigating harm in language models with conditional-likelihood filtration</a>\n\n        <span class=\"post__meta\">(<a href=\"/posts/1341-mitigating-harm-in-language-models-with-conditional-likelihood-filtration\">permalink</a>)</span>\n\n    </h3>\n\n    <div class=\"post__made-by\">\n      made and submitted by <a href=\"https://joy.recurse.com/~mathemakitten\">mathemakitten</a>\n    </div>\n  </header>\n\n  <div class=\"post__description\">\n    Language models built on datasets scraped from the open web have become foundational in natural language processing, but they reflect and amplify the biases and harms of their training data. We created a system which lets us filter training data to build more value-aligned models. It&#39;s imperfect—the internet is really big, harmful text is ever-evolving, and human labels include human biases. But little-by-little, we get closer to friendlier models!\n    <span class=\"post__meta\">\n      —&nbsp;<a href=\"https://joy.recurse.com/~mathemakitten\">mathemakitten</a>\n    </span>\n  </div>\n\n    <div class=\"post__embedding\">\n      <img src=\"https://recurse-uploads-production.s3.amazonaws.com/5b218e27-1734-4f0d-b389-a0e8e00a6b57/Screen Shot 2021-08-20 at 12.52.26 PM.png\" class=\"post__embedding-image\">\n    </div>\n</div>\n","contentSnippet":"Mitigating harm in language models with conditional-likelihood filtration\n\n        (permalink)\n\n    \nmathemakitten\n    \nmathemakitten","id":"https://joy.recurse.com/posts/1341-mitigating-harm-in-language-models-with-conditional-likelihood-filtration","isoDate":"2021-09-07T11:01:03.000Z","timestamp":"9/7/2021"},{"title":"Making a vocoder","link":"https://joy.recurse.com/posts/1343-making-a-vocoder","pubDate":"2021-09-06T11:00:49.000Z","author":"jimkang","content":"<div class=\"post\">\n\n  <header class=\"post__header\">\n      <div class=\"post__published-at\">\n        Monday, Sep 6\n      </div>\n\n    <h3 class=\"post__title\">\n      <a class=\"post__link\" href=\"https://jimkang.com/channel-vocoder/\">Making a vocoder</a>\n\n        <span class=\"post__meta\">(<a href=\"/posts/1343-making-a-vocoder\">permalink</a>)</span>\n\n    </h3>\n\n    <div class=\"post__made-by\">\n      made by <a href=\"https://joy.recurse.com/~jimkang\">jimkang</a>, submitted by <a href=\"https://joy.recurse.com/~Mai\">Mai</a>\n    </div>\n  </header>\n\n  <div class=\"post__description\">\n    Jim is working on a vocoder at RC currently! You can read about it on his blog and check out the code here: https://github.com/jimkang/channel-vocoder.\n    <span class=\"post__meta\">\n      —&nbsp;<a href=\"https://joy.recurse.com/~Mai\">Mai</a>\n    </span>\n  </div>\n\n</div>\n","contentSnippet":"Making a vocoder\n\n        (permalink)\n\n    \njimkang, submitted by Mai\n    \nMai","id":"https://joy.recurse.com/posts/1343-making-a-vocoder","isoDate":"2021-09-06T11:00:49.000Z","timestamp":"9/6/2021"},{"title":"How to expose inputs (editable values) in a Google Sheets model","link":"https://joy.recurse.com/posts/1345-how-to-expose-inputs-editable-values-in-a-google-sheets-model","pubDate":"2021-09-03T11:01:19.000Z","author":"peter","content":"<div class=\"post\">\n\n  <header class=\"post__header\">\n      <div class=\"post__published-at\">\n        Friday, Sep 3\n      </div>\n\n    <h3 class=\"post__title\">\n      <a class=\"post__link\" href=\"https://mrcoles.com/how-expose-inputs-google-sheets-model/\">How to expose inputs (editable values) in a Google Sheets model</a>\n\n        <span class=\"post__meta\">(<a href=\"/posts/1345-how-to-expose-inputs-editable-values-in-a-google-sheets-model\">permalink</a>)</span>\n\n    </h3>\n\n    <div class=\"post__made-by\">\n      made by <a href=\"https://joy.recurse.com/~peter\">peter</a>, submitted by <a href=\"https://joy.recurse.com/~nicholasbs\">nicholasbs</a>\n    </div>\n  </header>\n\n  <div class=\"post__description\">\n    A clever way to automatically format (and thus be able to see) all the cells in a Google Sheets spreadsheet that are intended to be inputs.\n    <span class=\"post__meta\">\n      —&nbsp;<a href=\"https://joy.recurse.com/~nicholasbs\">nicholasbs</a>\n    </span>\n  </div>\n\n</div>\n","contentSnippet":"How to expose inputs (editable values) in a Google Sheets model\n\n        (permalink)\n\n    \npeter, submitted by nicholasbs\n    \nnicholasbs","id":"https://joy.recurse.com/posts/1345-how-to-expose-inputs-editable-values-in-a-google-sheets-model","isoDate":"2021-09-03T11:01:19.000Z","timestamp":"9/3/2021"},{"title":"GitHub Star Tagger","link":"https://joy.recurse.com/posts/1339-github-star-tagger","pubDate":"2021-09-02T11:01:40.000Z","author":"apettenati","content":"<div class=\"post\">\n\n  <header class=\"post__header\">\n      <div class=\"post__published-at\">\n        Thursday, Sep 2\n      </div>\n\n    <h3 class=\"post__title\">\n      <a class=\"post__link\" href=\"https://github.com/apettenati/github-star-tagger\">GitHub Star Tagger</a>\n\n        <span class=\"post__meta\">(<a href=\"/posts/1339-github-star-tagger\">permalink</a>)</span>\n\n    </h3>\n\n    <div class=\"post__made-by\">\n      made by <a href=\"https://joy.recurse.com/~apettenati\">apettenati</a>, submitted by <a href=\"https://joy.recurse.com/~rachel\">rachel</a>\n    </div>\n  </header>\n\n  <div class=\"post__description\">\n    Add tags to your starred repos on GitHub, so you never again lose track of that plugin or parser you totally meant to install. \n    <span class=\"post__meta\">\n      —&nbsp;<a href=\"https://joy.recurse.com/~rachel\">rachel</a>\n    </span>\n  </div>\n\n    <div class=\"post__embedding\">\n      <img src=\"https://recurse-uploads-production.s3.amazonaws.com/4b13f25f-387b-4e4a-94cc-f5ac63164250/Screen Shot 2021-08-17 at 5.37.23 PM.png\" class=\"post__embedding-image\">\n    </div>\n</div>\n","contentSnippet":"GitHub Star Tagger\n\n        (permalink)\n\n    \napettenati, submitted by rachel\n    \nrachel","id":"https://joy.recurse.com/posts/1339-github-star-tagger","isoDate":"2021-09-02T11:01:40.000Z","timestamp":"9/2/2021"},{"title":"Wrec: a recommendation engine that tells you what you're missing","link":"https://joy.recurse.com/posts/1346-wrec-a-recommendation-engine-that-tells-you-what-you-re-missing","pubDate":"2021-09-01T11:01:04.000Z","author":"TaniyaS","content":"<div class=\"post\">\n\n  <header class=\"post__header\">\n      <div class=\"post__published-at\">\n        Wednesday, Sep 1\n      </div>\n\n    <h3 class=\"post__title\">\n      <a class=\"post__link\" href=\"https://github.com/singhshemona/recommend\">Wrec: a recommendation engine that tells you what you&#39;re missing</a>\n\n        <span class=\"post__meta\">(<a href=\"/posts/1346-wrec-a-recommendation-engine-that-tells-you-what-you-re-missing\">permalink</a>)</span>\n\n    </h3>\n\n    <div class=\"post__made-by\">\n      made by <a href=\"https://joy.recurse.com/~TaniyaS\">TaniyaS</a>, submitted by <a href=\"https://joy.recurse.com/~Mai\">Mai</a>\n    </div>\n  </header>\n\n  <div class=\"post__description\">\n    Instead of suggesting books that are similar to ones you&#39;ve already read, this recommendation engine tries to broaden your horizons by showing you what you&#39;re not reading or paying attention to. \n    <span class=\"post__meta\">\n      —&nbsp;<a href=\"https://joy.recurse.com/~Mai\">Mai</a>\n    </span>\n  </div>\n\n</div>\n","contentSnippet":"Wrec: a recommendation engine that tells you what you're missing\n\n        (permalink)\n\n    \nTaniyaS, submitted by Mai\n    \nMai","id":"https://joy.recurse.com/posts/1346-wrec-a-recommendation-engine-that-tells-you-what-you-re-missing","isoDate":"2021-09-01T11:01:04.000Z","timestamp":"9/1/2021"},{"title":"Some reasons to measure","link":"https://joy.recurse.com/posts/1344-some-reasons-to-measure","pubDate":"2021-08-31T11:01:06.000Z","author":"impostor","content":"<div class=\"post\">\n\n  <header class=\"post__header\">\n      <div class=\"post__published-at\">\n        Tuesday, Aug 31\n      </div>\n\n    <h3 class=\"post__title\">\n      <a class=\"post__link\" href=\"https://danluu.com/why-benchmark/\">Some reasons to measure</a>\n\n        <span class=\"post__meta\">(<a href=\"/posts/1344-some-reasons-to-measure\">permalink</a>)</span>\n\n    </h3>\n\n    <div class=\"post__made-by\">\n      made by <a href=\"https://joy.recurse.com/~impostor\">impostor</a>, submitted by <a href=\"https://joy.recurse.com/~Mai\">Mai</a>\n    </div>\n  </header>\n\n  <div class=\"post__description\">\n    A thoughtful blog post on the value of measuring vs. building.\n    <span class=\"post__meta\">\n      —&nbsp;<a href=\"https://joy.recurse.com/~Mai\">Mai</a>\n    </span>\n  </div>\n\n</div>\n","contentSnippet":"Some reasons to measure\n\n        (permalink)\n\n    \nimpostor, submitted by Mai\n    \nMai","id":"https://joy.recurse.com/posts/1344-some-reasons-to-measure","isoDate":"2021-08-31T11:01:06.000Z","timestamp":"8/31/2021"},{"title":"JNJ (J iN Janet)","link":"https://joy.recurse.com/posts/1342-jnj-j-in-janet","pubDate":"2021-08-30T11:00:59.000Z","author":"zdsmith","content":"<div class=\"post\">\n\n  <header class=\"post__header\">\n      <div class=\"post__published-at\">\n        Monday, Aug 30\n      </div>\n\n    <h3 class=\"post__title\">\n      <a class=\"post__link\" href=\"https://git.sr.ht/~subsetpark/jnj\">JNJ (J iN Janet)</a>\n\n        <span class=\"post__meta\">(<a href=\"/posts/1342-jnj-j-in-janet\">permalink</a>)</span>\n\n    </h3>\n\n    <div class=\"post__made-by\">\n      made by <a href=\"https://joy.recurse.com/~zdsmith\">zdsmith</a>, submitted by <a href=\"https://joy.recurse.com/~vaibhavsagar\">vaibhavsagar</a>\n    </div>\n  </header>\n\n  <div class=\"post__description\">\n    Janet bindings to the J array programming language!\n    <span class=\"post__meta\">\n      —&nbsp;<a href=\"https://joy.recurse.com/~vaibhavsagar\">vaibhavsagar</a>\n    </span>\n  </div>\n\n</div>\n","contentSnippet":"JNJ (J iN Janet)\n\n        (permalink)\n\n    \nzdsmith, submitted by vaibhavsagar\n    \nvaibhavsagar","id":"https://joy.recurse.com/posts/1342-jnj-j-in-janet","isoDate":"2021-08-30T11:00:59.000Z","timestamp":"8/30/2021"}],"link":"https://joy.recurse.com/","feedUrl":"https://joy.recurse.com/feed.atom","title":"Joy of Computing","lastBuildDate":"2021-09-10T07:01:39-04:00","feed":"https://joy.recurse.com/feed.atom"}]]]